// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProductProductSpecificationValue is an object representing the database table.
type ProductProductSpecificationValue struct {
	ID                          int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	ProductID                   int64     `boil:"product_id" json:"product_id" toml:"product_id" yaml:"product_id"`
	ProductSpecificationValueID int64     `boil:"product_specification_value_id" json:"product_specification_value_id" toml:"product_specification_value_id" yaml:"product_specification_value_id"`
	CreatedAt                   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *productProductSpecificationValueR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productProductSpecificationValueL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductProductSpecificationValueColumns = struct {
	ID                          string
	ProductID                   string
	ProductSpecificationValueID string
	CreatedAt                   string
}{
	ID:                          "id",
	ProductID:                   "product_id",
	ProductSpecificationValueID: "product_specification_value_id",
	CreatedAt:                   "created_at",
}

var ProductProductSpecificationValueTableColumns = struct {
	ID                          string
	ProductID                   string
	ProductSpecificationValueID string
	CreatedAt                   string
}{
	ID:                          "product_product_specification_values.id",
	ProductID:                   "product_product_specification_values.product_id",
	ProductSpecificationValueID: "product_product_specification_values.product_specification_value_id",
	CreatedAt:                   "product_product_specification_values.created_at",
}

// Generated where

var ProductProductSpecificationValueWhere = struct {
	ID                          whereHelperint64
	ProductID                   whereHelperint64
	ProductSpecificationValueID whereHelperint64
	CreatedAt                   whereHelpertime_Time
}{
	ID:                          whereHelperint64{field: "\"product_product_specification_values\".\"id\""},
	ProductID:                   whereHelperint64{field: "\"product_product_specification_values\".\"product_id\""},
	ProductSpecificationValueID: whereHelperint64{field: "\"product_product_specification_values\".\"product_specification_value_id\""},
	CreatedAt:                   whereHelpertime_Time{field: "\"product_product_specification_values\".\"created_at\""},
}

// ProductProductSpecificationValueRels is where relationship names are stored.
var ProductProductSpecificationValueRels = struct {
	Product                   string
	ProductSpecificationValue string
}{
	Product:                   "Product",
	ProductSpecificationValue: "ProductSpecificationValue",
}

// productProductSpecificationValueR is where relationships are stored.
type productProductSpecificationValueR struct {
	Product                   *Product                   `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	ProductSpecificationValue *ProductSpecificationValue `boil:"ProductSpecificationValue" json:"ProductSpecificationValue" toml:"ProductSpecificationValue" yaml:"ProductSpecificationValue"`
}

// NewStruct creates a new relationship struct
func (*productProductSpecificationValueR) NewStruct() *productProductSpecificationValueR {
	return &productProductSpecificationValueR{}
}

func (r *productProductSpecificationValueR) GetProduct() *Product {
	if r == nil {
		return nil
	}
	return r.Product
}

func (r *productProductSpecificationValueR) GetProductSpecificationValue() *ProductSpecificationValue {
	if r == nil {
		return nil
	}
	return r.ProductSpecificationValue
}

// productProductSpecificationValueL is where Load methods for each relationship are stored.
type productProductSpecificationValueL struct{}

var (
	productProductSpecificationValueAllColumns            = []string{"id", "product_id", "product_specification_value_id", "created_at"}
	productProductSpecificationValueColumnsWithoutDefault = []string{"product_id", "product_specification_value_id"}
	productProductSpecificationValueColumnsWithDefault    = []string{"id", "created_at"}
	productProductSpecificationValuePrimaryKeyColumns     = []string{"id"}
	productProductSpecificationValueGeneratedColumns      = []string{}
)

type (
	// ProductProductSpecificationValueSlice is an alias for a slice of pointers to ProductProductSpecificationValue.
	// This should almost always be used instead of []ProductProductSpecificationValue.
	ProductProductSpecificationValueSlice []*ProductProductSpecificationValue
	// ProductProductSpecificationValueHook is the signature for custom ProductProductSpecificationValue hook methods
	ProductProductSpecificationValueHook func(context.Context, boil.ContextExecutor, *ProductProductSpecificationValue) error

	productProductSpecificationValueQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productProductSpecificationValueType                 = reflect.TypeOf(&ProductProductSpecificationValue{})
	productProductSpecificationValueMapping              = queries.MakeStructMapping(productProductSpecificationValueType)
	productProductSpecificationValuePrimaryKeyMapping, _ = queries.BindMapping(productProductSpecificationValueType, productProductSpecificationValueMapping, productProductSpecificationValuePrimaryKeyColumns)
	productProductSpecificationValueInsertCacheMut       sync.RWMutex
	productProductSpecificationValueInsertCache          = make(map[string]insertCache)
	productProductSpecificationValueUpdateCacheMut       sync.RWMutex
	productProductSpecificationValueUpdateCache          = make(map[string]updateCache)
	productProductSpecificationValueUpsertCacheMut       sync.RWMutex
	productProductSpecificationValueUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var productProductSpecificationValueAfterSelectHooks []ProductProductSpecificationValueHook

var productProductSpecificationValueBeforeInsertHooks []ProductProductSpecificationValueHook
var productProductSpecificationValueAfterInsertHooks []ProductProductSpecificationValueHook

var productProductSpecificationValueBeforeUpdateHooks []ProductProductSpecificationValueHook
var productProductSpecificationValueAfterUpdateHooks []ProductProductSpecificationValueHook

var productProductSpecificationValueBeforeDeleteHooks []ProductProductSpecificationValueHook
var productProductSpecificationValueAfterDeleteHooks []ProductProductSpecificationValueHook

var productProductSpecificationValueBeforeUpsertHooks []ProductProductSpecificationValueHook
var productProductSpecificationValueAfterUpsertHooks []ProductProductSpecificationValueHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProductProductSpecificationValue) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productProductSpecificationValueAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProductProductSpecificationValue) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productProductSpecificationValueBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProductProductSpecificationValue) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productProductSpecificationValueAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProductProductSpecificationValue) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productProductSpecificationValueBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProductProductSpecificationValue) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productProductSpecificationValueAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProductProductSpecificationValue) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productProductSpecificationValueBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProductProductSpecificationValue) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productProductSpecificationValueAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProductProductSpecificationValue) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productProductSpecificationValueBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProductProductSpecificationValue) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productProductSpecificationValueAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProductProductSpecificationValueHook registers your hook function for all future operations.
func AddProductProductSpecificationValueHook(hookPoint boil.HookPoint, productProductSpecificationValueHook ProductProductSpecificationValueHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		productProductSpecificationValueAfterSelectHooks = append(productProductSpecificationValueAfterSelectHooks, productProductSpecificationValueHook)
	case boil.BeforeInsertHook:
		productProductSpecificationValueBeforeInsertHooks = append(productProductSpecificationValueBeforeInsertHooks, productProductSpecificationValueHook)
	case boil.AfterInsertHook:
		productProductSpecificationValueAfterInsertHooks = append(productProductSpecificationValueAfterInsertHooks, productProductSpecificationValueHook)
	case boil.BeforeUpdateHook:
		productProductSpecificationValueBeforeUpdateHooks = append(productProductSpecificationValueBeforeUpdateHooks, productProductSpecificationValueHook)
	case boil.AfterUpdateHook:
		productProductSpecificationValueAfterUpdateHooks = append(productProductSpecificationValueAfterUpdateHooks, productProductSpecificationValueHook)
	case boil.BeforeDeleteHook:
		productProductSpecificationValueBeforeDeleteHooks = append(productProductSpecificationValueBeforeDeleteHooks, productProductSpecificationValueHook)
	case boil.AfterDeleteHook:
		productProductSpecificationValueAfterDeleteHooks = append(productProductSpecificationValueAfterDeleteHooks, productProductSpecificationValueHook)
	case boil.BeforeUpsertHook:
		productProductSpecificationValueBeforeUpsertHooks = append(productProductSpecificationValueBeforeUpsertHooks, productProductSpecificationValueHook)
	case boil.AfterUpsertHook:
		productProductSpecificationValueAfterUpsertHooks = append(productProductSpecificationValueAfterUpsertHooks, productProductSpecificationValueHook)
	}
}

// One returns a single productProductSpecificationValue record from the query.
func (q productProductSpecificationValueQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProductProductSpecificationValue, error) {
	o := &ProductProductSpecificationValue{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for product_product_specification_values")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ProductProductSpecificationValue records from the query.
func (q productProductSpecificationValueQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProductProductSpecificationValueSlice, error) {
	var o []*ProductProductSpecificationValue

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ProductProductSpecificationValue slice")
	}

	if len(productProductSpecificationValueAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ProductProductSpecificationValue records in the query.
func (q productProductSpecificationValueQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count product_product_specification_values rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q productProductSpecificationValueQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if product_product_specification_values exists")
	}

	return count > 0, nil
}

// Product pointed to by the foreign key.
func (o *ProductProductSpecificationValue) Product(mods ...qm.QueryMod) productQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProductID),
	}

	queryMods = append(queryMods, mods...)

	return Products(queryMods...)
}

// ProductSpecificationValue pointed to by the foreign key.
func (o *ProductProductSpecificationValue) ProductSpecificationValue(mods ...qm.QueryMod) productSpecificationValueQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProductSpecificationValueID),
	}

	queryMods = append(queryMods, mods...)

	return ProductSpecificationValues(queryMods...)
}

// LoadProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productProductSpecificationValueL) LoadProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductProductSpecificationValue interface{}, mods queries.Applicator) error {
	var slice []*ProductProductSpecificationValue
	var object *ProductProductSpecificationValue

	if singular {
		var ok bool
		object, ok = maybeProductProductSpecificationValue.(*ProductProductSpecificationValue)
		if !ok {
			object = new(ProductProductSpecificationValue)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductProductSpecificationValue)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductProductSpecificationValue))
			}
		}
	} else {
		s, ok := maybeProductProductSpecificationValue.(*[]*ProductProductSpecificationValue)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductProductSpecificationValue)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductProductSpecificationValue))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productProductSpecificationValueR{}
		}
		args = append(args, object.ProductID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productProductSpecificationValueR{}
			}

			for _, a := range args {
				if a == obj.ProductID {
					continue Outer
				}
			}

			args = append(args, obj.ProductID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`products`),
		qm.WhereIn(`products.id in ?`, args...),
		qmhelper.WhereIsNull(`products.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Product")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Product")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Product = foreign
		if foreign.R == nil {
			foreign.R = &productR{}
		}
		foreign.R.ProductProductSpecificationValues = append(foreign.R.ProductProductSpecificationValues, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductID == foreign.ID {
				local.R.Product = foreign
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.ProductProductSpecificationValues = append(foreign.R.ProductProductSpecificationValues, local)
				break
			}
		}
	}

	return nil
}

// LoadProductSpecificationValue allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productProductSpecificationValueL) LoadProductSpecificationValue(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductProductSpecificationValue interface{}, mods queries.Applicator) error {
	var slice []*ProductProductSpecificationValue
	var object *ProductProductSpecificationValue

	if singular {
		var ok bool
		object, ok = maybeProductProductSpecificationValue.(*ProductProductSpecificationValue)
		if !ok {
			object = new(ProductProductSpecificationValue)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductProductSpecificationValue)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductProductSpecificationValue))
			}
		}
	} else {
		s, ok := maybeProductProductSpecificationValue.(*[]*ProductProductSpecificationValue)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductProductSpecificationValue)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductProductSpecificationValue))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productProductSpecificationValueR{}
		}
		args = append(args, object.ProductSpecificationValueID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productProductSpecificationValueR{}
			}

			for _, a := range args {
				if a == obj.ProductSpecificationValueID {
					continue Outer
				}
			}

			args = append(args, obj.ProductSpecificationValueID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_specification_values`),
		qm.WhereIn(`product_specification_values.id in ?`, args...),
		qmhelper.WhereIsNull(`product_specification_values.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ProductSpecificationValue")
	}

	var resultSlice []*ProductSpecificationValue
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ProductSpecificationValue")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for product_specification_values")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_specification_values")
	}

	if len(productSpecificationValueAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductSpecificationValue = foreign
		if foreign.R == nil {
			foreign.R = &productSpecificationValueR{}
		}
		foreign.R.ProductProductSpecificationValues = append(foreign.R.ProductProductSpecificationValues, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductSpecificationValueID == foreign.ID {
				local.R.ProductSpecificationValue = foreign
				if foreign.R == nil {
					foreign.R = &productSpecificationValueR{}
				}
				foreign.R.ProductProductSpecificationValues = append(foreign.R.ProductProductSpecificationValues, local)
				break
			}
		}
	}

	return nil
}

// SetProduct of the productProductSpecificationValue to the related item.
// Sets o.R.Product to related.
// Adds o to related.R.ProductProductSpecificationValues.
func (o *ProductProductSpecificationValue) SetProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Product) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"product_product_specification_values\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"product_id"}),
		strmangle.WhereClause("\"", "\"", 2, productProductSpecificationValuePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductID = related.ID
	if o.R == nil {
		o.R = &productProductSpecificationValueR{
			Product: related,
		}
	} else {
		o.R.Product = related
	}

	if related.R == nil {
		related.R = &productR{
			ProductProductSpecificationValues: ProductProductSpecificationValueSlice{o},
		}
	} else {
		related.R.ProductProductSpecificationValues = append(related.R.ProductProductSpecificationValues, o)
	}

	return nil
}

// SetProductSpecificationValue of the productProductSpecificationValue to the related item.
// Sets o.R.ProductSpecificationValue to related.
// Adds o to related.R.ProductProductSpecificationValues.
func (o *ProductProductSpecificationValue) SetProductSpecificationValue(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ProductSpecificationValue) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"product_product_specification_values\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"product_specification_value_id"}),
		strmangle.WhereClause("\"", "\"", 2, productProductSpecificationValuePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductSpecificationValueID = related.ID
	if o.R == nil {
		o.R = &productProductSpecificationValueR{
			ProductSpecificationValue: related,
		}
	} else {
		o.R.ProductSpecificationValue = related
	}

	if related.R == nil {
		related.R = &productSpecificationValueR{
			ProductProductSpecificationValues: ProductProductSpecificationValueSlice{o},
		}
	} else {
		related.R.ProductProductSpecificationValues = append(related.R.ProductProductSpecificationValues, o)
	}

	return nil
}

// ProductProductSpecificationValues retrieves all the records using an executor.
func ProductProductSpecificationValues(mods ...qm.QueryMod) productProductSpecificationValueQuery {
	mods = append(mods, qm.From("\"product_product_specification_values\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"product_product_specification_values\".*"})
	}

	return productProductSpecificationValueQuery{q}
}

// FindProductProductSpecificationValue retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProductProductSpecificationValue(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ProductProductSpecificationValue, error) {
	productProductSpecificationValueObj := &ProductProductSpecificationValue{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"product_product_specification_values\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, productProductSpecificationValueObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from product_product_specification_values")
	}

	if err = productProductSpecificationValueObj.doAfterSelectHooks(ctx, exec); err != nil {
		return productProductSpecificationValueObj, err
	}

	return productProductSpecificationValueObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProductProductSpecificationValue) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no product_product_specification_values provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productProductSpecificationValueColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productProductSpecificationValueInsertCacheMut.RLock()
	cache, cached := productProductSpecificationValueInsertCache[key]
	productProductSpecificationValueInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productProductSpecificationValueAllColumns,
			productProductSpecificationValueColumnsWithDefault,
			productProductSpecificationValueColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(productProductSpecificationValueType, productProductSpecificationValueMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productProductSpecificationValueType, productProductSpecificationValueMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"product_product_specification_values\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"product_product_specification_values\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into product_product_specification_values")
	}

	if !cached {
		productProductSpecificationValueInsertCacheMut.Lock()
		productProductSpecificationValueInsertCache[key] = cache
		productProductSpecificationValueInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ProductProductSpecificationValue.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProductProductSpecificationValue) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	productProductSpecificationValueUpdateCacheMut.RLock()
	cache, cached := productProductSpecificationValueUpdateCache[key]
	productProductSpecificationValueUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productProductSpecificationValueAllColumns,
			productProductSpecificationValuePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update product_product_specification_values, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"product_product_specification_values\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, productProductSpecificationValuePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productProductSpecificationValueType, productProductSpecificationValueMapping, append(wl, productProductSpecificationValuePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update product_product_specification_values row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for product_product_specification_values")
	}

	if !cached {
		productProductSpecificationValueUpdateCacheMut.Lock()
		productProductSpecificationValueUpdateCache[key] = cache
		productProductSpecificationValueUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q productProductSpecificationValueQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for product_product_specification_values")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for product_product_specification_values")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductProductSpecificationValueSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productProductSpecificationValuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"product_product_specification_values\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, productProductSpecificationValuePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in productProductSpecificationValue slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all productProductSpecificationValue")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProductProductSpecificationValue) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no product_product_specification_values provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productProductSpecificationValueColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productProductSpecificationValueUpsertCacheMut.RLock()
	cache, cached := productProductSpecificationValueUpsertCache[key]
	productProductSpecificationValueUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			productProductSpecificationValueAllColumns,
			productProductSpecificationValueColumnsWithDefault,
			productProductSpecificationValueColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			productProductSpecificationValueAllColumns,
			productProductSpecificationValuePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert product_product_specification_values, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(productProductSpecificationValuePrimaryKeyColumns))
			copy(conflict, productProductSpecificationValuePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"product_product_specification_values\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(productProductSpecificationValueType, productProductSpecificationValueMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productProductSpecificationValueType, productProductSpecificationValueMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert product_product_specification_values")
	}

	if !cached {
		productProductSpecificationValueUpsertCacheMut.Lock()
		productProductSpecificationValueUpsertCache[key] = cache
		productProductSpecificationValueUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ProductProductSpecificationValue record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProductProductSpecificationValue) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ProductProductSpecificationValue provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productProductSpecificationValuePrimaryKeyMapping)
	sql := "DELETE FROM \"product_product_specification_values\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from product_product_specification_values")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for product_product_specification_values")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q productProductSpecificationValueQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no productProductSpecificationValueQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from product_product_specification_values")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for product_product_specification_values")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductProductSpecificationValueSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(productProductSpecificationValueBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productProductSpecificationValuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"product_product_specification_values\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productProductSpecificationValuePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from productProductSpecificationValue slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for product_product_specification_values")
	}

	if len(productProductSpecificationValueAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProductProductSpecificationValue) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProductProductSpecificationValue(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductProductSpecificationValueSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductProductSpecificationValueSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productProductSpecificationValuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"product_product_specification_values\".* FROM \"product_product_specification_values\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productProductSpecificationValuePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProductProductSpecificationValueSlice")
	}

	*o = slice

	return nil
}

// ProductProductSpecificationValueExists checks if the ProductProductSpecificationValue row exists.
func ProductProductSpecificationValueExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"product_product_specification_values\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if product_product_specification_values exists")
	}

	return exists, nil
}

// Exists checks if the ProductProductSpecificationValue row exists.
func (o *ProductProductSpecificationValue) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ProductProductSpecificationValueExists(ctx, exec, o.ID)
}
