// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserPaymentMethod is an object representing the database table.
type UserPaymentMethod struct {
	ID          int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID      int64     `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Type        string    `boil:"type" json:"type" toml:"type" yaml:"type"`
	Name        string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Value       string    `boil:"value" json:"value" toml:"value" yaml:"value"`
	TypePrimary bool      `boil:"type_primary" json:"type_primary" toml:"type_primary" yaml:"type_primary"`
	DeletedAt   null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	UpdatedAt   time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *userPaymentMethodR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userPaymentMethodL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserPaymentMethodColumns = struct {
	ID          string
	UserID      string
	Type        string
	Name        string
	Value       string
	TypePrimary string
	DeletedAt   string
	UpdatedAt   string
	CreatedAt   string
}{
	ID:          "id",
	UserID:      "user_id",
	Type:        "type",
	Name:        "name",
	Value:       "value",
	TypePrimary: "type_primary",
	DeletedAt:   "deleted_at",
	UpdatedAt:   "updated_at",
	CreatedAt:   "created_at",
}

var UserPaymentMethodTableColumns = struct {
	ID          string
	UserID      string
	Type        string
	Name        string
	Value       string
	TypePrimary string
	DeletedAt   string
	UpdatedAt   string
	CreatedAt   string
}{
	ID:          "user_payment_methods.id",
	UserID:      "user_payment_methods.user_id",
	Type:        "user_payment_methods.type",
	Name:        "user_payment_methods.name",
	Value:       "user_payment_methods.value",
	TypePrimary: "user_payment_methods.type_primary",
	DeletedAt:   "user_payment_methods.deleted_at",
	UpdatedAt:   "user_payment_methods.updated_at",
	CreatedAt:   "user_payment_methods.created_at",
}

// Generated where

var UserPaymentMethodWhere = struct {
	ID          whereHelperint64
	UserID      whereHelperint64
	Type        whereHelperstring
	Name        whereHelperstring
	Value       whereHelperstring
	TypePrimary whereHelperbool
	DeletedAt   whereHelpernull_Time
	UpdatedAt   whereHelpertime_Time
	CreatedAt   whereHelpertime_Time
}{
	ID:          whereHelperint64{field: "\"user_payment_methods\".\"id\""},
	UserID:      whereHelperint64{field: "\"user_payment_methods\".\"user_id\""},
	Type:        whereHelperstring{field: "\"user_payment_methods\".\"type\""},
	Name:        whereHelperstring{field: "\"user_payment_methods\".\"name\""},
	Value:       whereHelperstring{field: "\"user_payment_methods\".\"value\""},
	TypePrimary: whereHelperbool{field: "\"user_payment_methods\".\"type_primary\""},
	DeletedAt:   whereHelpernull_Time{field: "\"user_payment_methods\".\"deleted_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"user_payment_methods\".\"updated_at\""},
	CreatedAt:   whereHelpertime_Time{field: "\"user_payment_methods\".\"created_at\""},
}

// UserPaymentMethodRels is where relationship names are stored.
var UserPaymentMethodRels = struct {
	User string
}{
	User: "User",
}

// userPaymentMethodR is where relationships are stored.
type userPaymentMethodR struct {
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*userPaymentMethodR) NewStruct() *userPaymentMethodR {
	return &userPaymentMethodR{}
}

func (r *userPaymentMethodR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// userPaymentMethodL is where Load methods for each relationship are stored.
type userPaymentMethodL struct{}

var (
	userPaymentMethodAllColumns            = []string{"id", "user_id", "type", "name", "value", "type_primary", "deleted_at", "updated_at", "created_at"}
	userPaymentMethodColumnsWithoutDefault = []string{"user_id", "type", "name", "value", "type_primary"}
	userPaymentMethodColumnsWithDefault    = []string{"id", "deleted_at", "updated_at", "created_at"}
	userPaymentMethodPrimaryKeyColumns     = []string{"id"}
	userPaymentMethodGeneratedColumns      = []string{}
)

type (
	// UserPaymentMethodSlice is an alias for a slice of pointers to UserPaymentMethod.
	// This should almost always be used instead of []UserPaymentMethod.
	UserPaymentMethodSlice []*UserPaymentMethod
	// UserPaymentMethodHook is the signature for custom UserPaymentMethod hook methods
	UserPaymentMethodHook func(context.Context, boil.ContextExecutor, *UserPaymentMethod) error

	userPaymentMethodQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userPaymentMethodType                 = reflect.TypeOf(&UserPaymentMethod{})
	userPaymentMethodMapping              = queries.MakeStructMapping(userPaymentMethodType)
	userPaymentMethodPrimaryKeyMapping, _ = queries.BindMapping(userPaymentMethodType, userPaymentMethodMapping, userPaymentMethodPrimaryKeyColumns)
	userPaymentMethodInsertCacheMut       sync.RWMutex
	userPaymentMethodInsertCache          = make(map[string]insertCache)
	userPaymentMethodUpdateCacheMut       sync.RWMutex
	userPaymentMethodUpdateCache          = make(map[string]updateCache)
	userPaymentMethodUpsertCacheMut       sync.RWMutex
	userPaymentMethodUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userPaymentMethodAfterSelectHooks []UserPaymentMethodHook

var userPaymentMethodBeforeInsertHooks []UserPaymentMethodHook
var userPaymentMethodAfterInsertHooks []UserPaymentMethodHook

var userPaymentMethodBeforeUpdateHooks []UserPaymentMethodHook
var userPaymentMethodAfterUpdateHooks []UserPaymentMethodHook

var userPaymentMethodBeforeDeleteHooks []UserPaymentMethodHook
var userPaymentMethodAfterDeleteHooks []UserPaymentMethodHook

var userPaymentMethodBeforeUpsertHooks []UserPaymentMethodHook
var userPaymentMethodAfterUpsertHooks []UserPaymentMethodHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserPaymentMethod) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userPaymentMethodAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserPaymentMethod) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userPaymentMethodBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserPaymentMethod) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userPaymentMethodAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserPaymentMethod) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userPaymentMethodBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserPaymentMethod) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userPaymentMethodAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserPaymentMethod) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userPaymentMethodBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserPaymentMethod) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userPaymentMethodAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserPaymentMethod) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userPaymentMethodBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserPaymentMethod) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userPaymentMethodAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserPaymentMethodHook registers your hook function for all future operations.
func AddUserPaymentMethodHook(hookPoint boil.HookPoint, userPaymentMethodHook UserPaymentMethodHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userPaymentMethodAfterSelectHooks = append(userPaymentMethodAfterSelectHooks, userPaymentMethodHook)
	case boil.BeforeInsertHook:
		userPaymentMethodBeforeInsertHooks = append(userPaymentMethodBeforeInsertHooks, userPaymentMethodHook)
	case boil.AfterInsertHook:
		userPaymentMethodAfterInsertHooks = append(userPaymentMethodAfterInsertHooks, userPaymentMethodHook)
	case boil.BeforeUpdateHook:
		userPaymentMethodBeforeUpdateHooks = append(userPaymentMethodBeforeUpdateHooks, userPaymentMethodHook)
	case boil.AfterUpdateHook:
		userPaymentMethodAfterUpdateHooks = append(userPaymentMethodAfterUpdateHooks, userPaymentMethodHook)
	case boil.BeforeDeleteHook:
		userPaymentMethodBeforeDeleteHooks = append(userPaymentMethodBeforeDeleteHooks, userPaymentMethodHook)
	case boil.AfterDeleteHook:
		userPaymentMethodAfterDeleteHooks = append(userPaymentMethodAfterDeleteHooks, userPaymentMethodHook)
	case boil.BeforeUpsertHook:
		userPaymentMethodBeforeUpsertHooks = append(userPaymentMethodBeforeUpsertHooks, userPaymentMethodHook)
	case boil.AfterUpsertHook:
		userPaymentMethodAfterUpsertHooks = append(userPaymentMethodAfterUpsertHooks, userPaymentMethodHook)
	}
}

// One returns a single userPaymentMethod record from the query.
func (q userPaymentMethodQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserPaymentMethod, error) {
	o := &UserPaymentMethod{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_payment_methods")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserPaymentMethod records from the query.
func (q userPaymentMethodQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserPaymentMethodSlice, error) {
	var o []*UserPaymentMethod

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserPaymentMethod slice")
	}

	if len(userPaymentMethodAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserPaymentMethod records in the query.
func (q userPaymentMethodQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_payment_methods rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userPaymentMethodQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_payment_methods exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *UserPaymentMethod) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userPaymentMethodL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserPaymentMethod interface{}, mods queries.Applicator) error {
	var slice []*UserPaymentMethod
	var object *UserPaymentMethod

	if singular {
		var ok bool
		object, ok = maybeUserPaymentMethod.(*UserPaymentMethod)
		if !ok {
			object = new(UserPaymentMethod)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserPaymentMethod)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserPaymentMethod))
			}
		}
	} else {
		s, ok := maybeUserPaymentMethod.(*[]*UserPaymentMethod)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserPaymentMethod)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserPaymentMethod))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userPaymentMethodR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userPaymentMethodR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserPaymentMethods = append(foreign.R.UserPaymentMethods, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserPaymentMethods = append(foreign.R.UserPaymentMethods, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the userPaymentMethod to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserPaymentMethods.
func (o *UserPaymentMethod) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_payment_methods\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userPaymentMethodPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userPaymentMethodR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserPaymentMethods: UserPaymentMethodSlice{o},
		}
	} else {
		related.R.UserPaymentMethods = append(related.R.UserPaymentMethods, o)
	}

	return nil
}

// UserPaymentMethods retrieves all the records using an executor.
func UserPaymentMethods(mods ...qm.QueryMod) userPaymentMethodQuery {
	mods = append(mods, qm.From("\"user_payment_methods\""), qmhelper.WhereIsNull("\"user_payment_methods\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"user_payment_methods\".*"})
	}

	return userPaymentMethodQuery{q}
}

// FindUserPaymentMethod retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserPaymentMethod(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*UserPaymentMethod, error) {
	userPaymentMethodObj := &UserPaymentMethod{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_payment_methods\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userPaymentMethodObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_payment_methods")
	}

	if err = userPaymentMethodObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userPaymentMethodObj, err
	}

	return userPaymentMethodObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserPaymentMethod) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_payment_methods provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userPaymentMethodColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userPaymentMethodInsertCacheMut.RLock()
	cache, cached := userPaymentMethodInsertCache[key]
	userPaymentMethodInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userPaymentMethodAllColumns,
			userPaymentMethodColumnsWithDefault,
			userPaymentMethodColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userPaymentMethodType, userPaymentMethodMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userPaymentMethodType, userPaymentMethodMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_payment_methods\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_payment_methods\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_payment_methods")
	}

	if !cached {
		userPaymentMethodInsertCacheMut.Lock()
		userPaymentMethodInsertCache[key] = cache
		userPaymentMethodInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserPaymentMethod.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserPaymentMethod) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userPaymentMethodUpdateCacheMut.RLock()
	cache, cached := userPaymentMethodUpdateCache[key]
	userPaymentMethodUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userPaymentMethodAllColumns,
			userPaymentMethodPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_payment_methods, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_payment_methods\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userPaymentMethodPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userPaymentMethodType, userPaymentMethodMapping, append(wl, userPaymentMethodPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_payment_methods row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_payment_methods")
	}

	if !cached {
		userPaymentMethodUpdateCacheMut.Lock()
		userPaymentMethodUpdateCache[key] = cache
		userPaymentMethodUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userPaymentMethodQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_payment_methods")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_payment_methods")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserPaymentMethodSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPaymentMethodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_payment_methods\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userPaymentMethodPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userPaymentMethod slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userPaymentMethod")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserPaymentMethod) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_payment_methods provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userPaymentMethodColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userPaymentMethodUpsertCacheMut.RLock()
	cache, cached := userPaymentMethodUpsertCache[key]
	userPaymentMethodUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userPaymentMethodAllColumns,
			userPaymentMethodColumnsWithDefault,
			userPaymentMethodColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userPaymentMethodAllColumns,
			userPaymentMethodPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert user_payment_methods, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userPaymentMethodPrimaryKeyColumns))
			copy(conflict, userPaymentMethodPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_payment_methods\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userPaymentMethodType, userPaymentMethodMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userPaymentMethodType, userPaymentMethodMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_payment_methods")
	}

	if !cached {
		userPaymentMethodUpsertCacheMut.Lock()
		userPaymentMethodUpsertCache[key] = cache
		userPaymentMethodUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserPaymentMethod record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserPaymentMethod) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserPaymentMethod provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userPaymentMethodPrimaryKeyMapping)
		sql = "DELETE FROM \"user_payment_methods\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"user_payment_methods\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(userPaymentMethodType, userPaymentMethodMapping, append(wl, userPaymentMethodPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_payment_methods")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_payment_methods")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userPaymentMethodQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userPaymentMethodQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_payment_methods")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_payment_methods")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserPaymentMethodSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userPaymentMethodBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPaymentMethodPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"user_payment_methods\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userPaymentMethodPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPaymentMethodPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"user_payment_methods\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, userPaymentMethodPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userPaymentMethod slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_payment_methods")
	}

	if len(userPaymentMethodAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserPaymentMethod) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserPaymentMethod(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserPaymentMethodSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserPaymentMethodSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPaymentMethodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_payment_methods\".* FROM \"user_payment_methods\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userPaymentMethodPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserPaymentMethodSlice")
	}

	*o = slice

	return nil
}

// UserPaymentMethodExists checks if the UserPaymentMethod row exists.
func UserPaymentMethodExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_payment_methods\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_payment_methods exists")
	}

	return exists, nil
}

// Exists checks if the UserPaymentMethod row exists.
func (o *UserPaymentMethod) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserPaymentMethodExists(ctx, exec, o.ID)
}
