// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Supplier is an object representing the database table.
type Supplier struct {
	ID          int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name        string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Code        string      `boil:"code" json:"code" toml:"code" yaml:"code"`
	ImportedAt  null.Time   `boil:"imported_at" json:"imported_at,omitempty" toml:"imported_at" yaml:"imported_at,omitempty"`
	FTPUsername null.String `boil:"ftp_username" json:"ftp_username,omitempty" toml:"ftp_username" yaml:"ftp_username,omitempty"`
	FTPPassword null.String `boil:"ftp_password" json:"ftp_password,omitempty" toml:"ftp_password" yaml:"ftp_password,omitempty"`
	DeletedAt   null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	UpdatedAt   time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	BaseFolder  null.String `boil:"base_folder" json:"base_folder,omitempty" toml:"base_folder" yaml:"base_folder,omitempty"`
	ForceUpdate bool        `boil:"force_update" json:"force_update" toml:"force_update" yaml:"force_update"`

	R *supplierR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L supplierL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SupplierColumns = struct {
	ID          string
	Name        string
	Code        string
	ImportedAt  string
	FTPUsername string
	FTPPassword string
	DeletedAt   string
	UpdatedAt   string
	CreatedAt   string
	BaseFolder  string
	ForceUpdate string
}{
	ID:          "id",
	Name:        "name",
	Code:        "code",
	ImportedAt:  "imported_at",
	FTPUsername: "ftp_username",
	FTPPassword: "ftp_password",
	DeletedAt:   "deleted_at",
	UpdatedAt:   "updated_at",
	CreatedAt:   "created_at",
	BaseFolder:  "base_folder",
	ForceUpdate: "force_update",
}

var SupplierTableColumns = struct {
	ID          string
	Name        string
	Code        string
	ImportedAt  string
	FTPUsername string
	FTPPassword string
	DeletedAt   string
	UpdatedAt   string
	CreatedAt   string
	BaseFolder  string
	ForceUpdate string
}{
	ID:          "suppliers.id",
	Name:        "suppliers.name",
	Code:        "suppliers.code",
	ImportedAt:  "suppliers.imported_at",
	FTPUsername: "suppliers.ftp_username",
	FTPPassword: "suppliers.ftp_password",
	DeletedAt:   "suppliers.deleted_at",
	UpdatedAt:   "suppliers.updated_at",
	CreatedAt:   "suppliers.created_at",
	BaseFolder:  "suppliers.base_folder",
	ForceUpdate: "suppliers.force_update",
}

// Generated where

var SupplierWhere = struct {
	ID          whereHelperint64
	Name        whereHelperstring
	Code        whereHelperstring
	ImportedAt  whereHelpernull_Time
	FTPUsername whereHelpernull_String
	FTPPassword whereHelpernull_String
	DeletedAt   whereHelpernull_Time
	UpdatedAt   whereHelpertime_Time
	CreatedAt   whereHelpertime_Time
	BaseFolder  whereHelpernull_String
	ForceUpdate whereHelperbool
}{
	ID:          whereHelperint64{field: "\"suppliers\".\"id\""},
	Name:        whereHelperstring{field: "\"suppliers\".\"name\""},
	Code:        whereHelperstring{field: "\"suppliers\".\"code\""},
	ImportedAt:  whereHelpernull_Time{field: "\"suppliers\".\"imported_at\""},
	FTPUsername: whereHelpernull_String{field: "\"suppliers\".\"ftp_username\""},
	FTPPassword: whereHelpernull_String{field: "\"suppliers\".\"ftp_password\""},
	DeletedAt:   whereHelpernull_Time{field: "\"suppliers\".\"deleted_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"suppliers\".\"updated_at\""},
	CreatedAt:   whereHelpertime_Time{field: "\"suppliers\".\"created_at\""},
	BaseFolder:  whereHelpernull_String{field: "\"suppliers\".\"base_folder\""},
	ForceUpdate: whereHelperbool{field: "\"suppliers\".\"force_update\""},
}

// SupplierRels is where relationship names are stored.
var SupplierRels = struct {
	ImportJobs   string
	ProductItems string
}{
	ImportJobs:   "ImportJobs",
	ProductItems: "ProductItems",
}

// supplierR is where relationships are stored.
type supplierR struct {
	ImportJobs   ImportJobSlice   `boil:"ImportJobs" json:"ImportJobs" toml:"ImportJobs" yaml:"ImportJobs"`
	ProductItems ProductItemSlice `boil:"ProductItems" json:"ProductItems" toml:"ProductItems" yaml:"ProductItems"`
}

// NewStruct creates a new relationship struct
func (*supplierR) NewStruct() *supplierR {
	return &supplierR{}
}

func (r *supplierR) GetImportJobs() ImportJobSlice {
	if r == nil {
		return nil
	}
	return r.ImportJobs
}

func (r *supplierR) GetProductItems() ProductItemSlice {
	if r == nil {
		return nil
	}
	return r.ProductItems
}

// supplierL is where Load methods for each relationship are stored.
type supplierL struct{}

var (
	supplierAllColumns            = []string{"id", "name", "code", "imported_at", "ftp_username", "ftp_password", "deleted_at", "updated_at", "created_at", "base_folder", "force_update"}
	supplierColumnsWithoutDefault = []string{"name", "code"}
	supplierColumnsWithDefault    = []string{"id", "imported_at", "ftp_username", "ftp_password", "deleted_at", "updated_at", "created_at", "base_folder", "force_update"}
	supplierPrimaryKeyColumns     = []string{"id"}
	supplierGeneratedColumns      = []string{}
)

type (
	// SupplierSlice is an alias for a slice of pointers to Supplier.
	// This should almost always be used instead of []Supplier.
	SupplierSlice []*Supplier
	// SupplierHook is the signature for custom Supplier hook methods
	SupplierHook func(context.Context, boil.ContextExecutor, *Supplier) error

	supplierQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	supplierType                 = reflect.TypeOf(&Supplier{})
	supplierMapping              = queries.MakeStructMapping(supplierType)
	supplierPrimaryKeyMapping, _ = queries.BindMapping(supplierType, supplierMapping, supplierPrimaryKeyColumns)
	supplierInsertCacheMut       sync.RWMutex
	supplierInsertCache          = make(map[string]insertCache)
	supplierUpdateCacheMut       sync.RWMutex
	supplierUpdateCache          = make(map[string]updateCache)
	supplierUpsertCacheMut       sync.RWMutex
	supplierUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var supplierAfterSelectHooks []SupplierHook

var supplierBeforeInsertHooks []SupplierHook
var supplierAfterInsertHooks []SupplierHook

var supplierBeforeUpdateHooks []SupplierHook
var supplierAfterUpdateHooks []SupplierHook

var supplierBeforeDeleteHooks []SupplierHook
var supplierAfterDeleteHooks []SupplierHook

var supplierBeforeUpsertHooks []SupplierHook
var supplierAfterUpsertHooks []SupplierHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Supplier) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range supplierAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Supplier) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range supplierBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Supplier) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range supplierAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Supplier) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range supplierBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Supplier) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range supplierAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Supplier) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range supplierBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Supplier) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range supplierAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Supplier) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range supplierBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Supplier) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range supplierAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSupplierHook registers your hook function for all future operations.
func AddSupplierHook(hookPoint boil.HookPoint, supplierHook SupplierHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		supplierAfterSelectHooks = append(supplierAfterSelectHooks, supplierHook)
	case boil.BeforeInsertHook:
		supplierBeforeInsertHooks = append(supplierBeforeInsertHooks, supplierHook)
	case boil.AfterInsertHook:
		supplierAfterInsertHooks = append(supplierAfterInsertHooks, supplierHook)
	case boil.BeforeUpdateHook:
		supplierBeforeUpdateHooks = append(supplierBeforeUpdateHooks, supplierHook)
	case boil.AfterUpdateHook:
		supplierAfterUpdateHooks = append(supplierAfterUpdateHooks, supplierHook)
	case boil.BeforeDeleteHook:
		supplierBeforeDeleteHooks = append(supplierBeforeDeleteHooks, supplierHook)
	case boil.AfterDeleteHook:
		supplierAfterDeleteHooks = append(supplierAfterDeleteHooks, supplierHook)
	case boil.BeforeUpsertHook:
		supplierBeforeUpsertHooks = append(supplierBeforeUpsertHooks, supplierHook)
	case boil.AfterUpsertHook:
		supplierAfterUpsertHooks = append(supplierAfterUpsertHooks, supplierHook)
	}
}

// One returns a single supplier record from the query.
func (q supplierQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Supplier, error) {
	o := &Supplier{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for suppliers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Supplier records from the query.
func (q supplierQuery) All(ctx context.Context, exec boil.ContextExecutor) (SupplierSlice, error) {
	var o []*Supplier

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Supplier slice")
	}

	if len(supplierAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Supplier records in the query.
func (q supplierQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count suppliers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q supplierQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if suppliers exists")
	}

	return count > 0, nil
}

// ImportJobs retrieves all the import_job's ImportJobs with an executor.
func (o *Supplier) ImportJobs(mods ...qm.QueryMod) importJobQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"import_jobs\".\"supplier_id\"=?", o.ID),
	)

	return ImportJobs(queryMods...)
}

// ProductItems retrieves all the product_item's ProductItems with an executor.
func (o *Supplier) ProductItems(mods ...qm.QueryMod) productItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"product_items\".\"supplier_id\"=?", o.ID),
	)

	return ProductItems(queryMods...)
}

// LoadImportJobs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (supplierL) LoadImportJobs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSupplier interface{}, mods queries.Applicator) error {
	var slice []*Supplier
	var object *Supplier

	if singular {
		var ok bool
		object, ok = maybeSupplier.(*Supplier)
		if !ok {
			object = new(Supplier)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSupplier)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSupplier))
			}
		}
	} else {
		s, ok := maybeSupplier.(*[]*Supplier)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSupplier)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSupplier))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &supplierR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &supplierR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`import_jobs`),
		qm.WhereIn(`import_jobs.supplier_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load import_jobs")
	}

	var resultSlice []*ImportJob
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice import_jobs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on import_jobs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for import_jobs")
	}

	if len(importJobAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ImportJobs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &importJobR{}
			}
			foreign.R.Supplier = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SupplierID {
				local.R.ImportJobs = append(local.R.ImportJobs, foreign)
				if foreign.R == nil {
					foreign.R = &importJobR{}
				}
				foreign.R.Supplier = local
				break
			}
		}
	}

	return nil
}

// LoadProductItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (supplierL) LoadProductItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSupplier interface{}, mods queries.Applicator) error {
	var slice []*Supplier
	var object *Supplier

	if singular {
		var ok bool
		object, ok = maybeSupplier.(*Supplier)
		if !ok {
			object = new(Supplier)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSupplier)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSupplier))
			}
		}
	} else {
		s, ok := maybeSupplier.(*[]*Supplier)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSupplier)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSupplier))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &supplierR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &supplierR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_items`),
		qm.WhereIn(`product_items.supplier_id in ?`, args...),
		qmhelper.WhereIsNull(`product_items.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load product_items")
	}

	var resultSlice []*ProductItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice product_items")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on product_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_items")
	}

	if len(productItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &productItemR{}
			}
			foreign.R.Supplier = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SupplierID {
				local.R.ProductItems = append(local.R.ProductItems, foreign)
				if foreign.R == nil {
					foreign.R = &productItemR{}
				}
				foreign.R.Supplier = local
				break
			}
		}
	}

	return nil
}

// AddImportJobs adds the given related objects to the existing relationships
// of the supplier, optionally inserting them as new records.
// Appends related to o.R.ImportJobs.
// Sets related.R.Supplier appropriately.
func (o *Supplier) AddImportJobs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ImportJob) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SupplierID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"import_jobs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"supplier_id"}),
				strmangle.WhereClause("\"", "\"", 2, importJobPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SupplierID = o.ID
		}
	}

	if o.R == nil {
		o.R = &supplierR{
			ImportJobs: related,
		}
	} else {
		o.R.ImportJobs = append(o.R.ImportJobs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &importJobR{
				Supplier: o,
			}
		} else {
			rel.R.Supplier = o
		}
	}
	return nil
}

// AddProductItems adds the given related objects to the existing relationships
// of the supplier, optionally inserting them as new records.
// Appends related to o.R.ProductItems.
// Sets related.R.Supplier appropriately.
func (o *Supplier) AddProductItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProductItem) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SupplierID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"product_items\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"supplier_id"}),
				strmangle.WhereClause("\"", "\"", 2, productItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SupplierID = o.ID
		}
	}

	if o.R == nil {
		o.R = &supplierR{
			ProductItems: related,
		}
	} else {
		o.R.ProductItems = append(o.R.ProductItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productItemR{
				Supplier: o,
			}
		} else {
			rel.R.Supplier = o
		}
	}
	return nil
}

// Suppliers retrieves all the records using an executor.
func Suppliers(mods ...qm.QueryMod) supplierQuery {
	mods = append(mods, qm.From("\"suppliers\""), qmhelper.WhereIsNull("\"suppliers\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"suppliers\".*"})
	}

	return supplierQuery{q}
}

// FindSupplier retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSupplier(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Supplier, error) {
	supplierObj := &Supplier{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"suppliers\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, supplierObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from suppliers")
	}

	if err = supplierObj.doAfterSelectHooks(ctx, exec); err != nil {
		return supplierObj, err
	}

	return supplierObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Supplier) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no suppliers provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(supplierColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	supplierInsertCacheMut.RLock()
	cache, cached := supplierInsertCache[key]
	supplierInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			supplierAllColumns,
			supplierColumnsWithDefault,
			supplierColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(supplierType, supplierMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(supplierType, supplierMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"suppliers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"suppliers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into suppliers")
	}

	if !cached {
		supplierInsertCacheMut.Lock()
		supplierInsertCache[key] = cache
		supplierInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Supplier.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Supplier) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	supplierUpdateCacheMut.RLock()
	cache, cached := supplierUpdateCache[key]
	supplierUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			supplierAllColumns,
			supplierPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update suppliers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"suppliers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, supplierPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(supplierType, supplierMapping, append(wl, supplierPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update suppliers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for suppliers")
	}

	if !cached {
		supplierUpdateCacheMut.Lock()
		supplierUpdateCache[key] = cache
		supplierUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q supplierQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for suppliers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for suppliers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SupplierSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), supplierPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"suppliers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, supplierPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in supplier slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all supplier")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Supplier) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no suppliers provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(supplierColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	supplierUpsertCacheMut.RLock()
	cache, cached := supplierUpsertCache[key]
	supplierUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			supplierAllColumns,
			supplierColumnsWithDefault,
			supplierColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			supplierAllColumns,
			supplierPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert suppliers, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(supplierPrimaryKeyColumns))
			copy(conflict, supplierPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"suppliers\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(supplierType, supplierMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(supplierType, supplierMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert suppliers")
	}

	if !cached {
		supplierUpsertCacheMut.Lock()
		supplierUpsertCache[key] = cache
		supplierUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Supplier record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Supplier) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Supplier provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), supplierPrimaryKeyMapping)
		sql = "DELETE FROM \"suppliers\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"suppliers\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(supplierType, supplierMapping, append(wl, supplierPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from suppliers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for suppliers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q supplierQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no supplierQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from suppliers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for suppliers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SupplierSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(supplierBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), supplierPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"suppliers\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, supplierPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), supplierPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"suppliers\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, supplierPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from supplier slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for suppliers")
	}

	if len(supplierAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Supplier) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSupplier(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SupplierSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SupplierSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), supplierPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"suppliers\".* FROM \"suppliers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, supplierPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SupplierSlice")
	}

	*o = slice

	return nil
}

// SupplierExists checks if the Supplier row exists.
func SupplierExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"suppliers\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if suppliers exists")
	}

	return exists, nil
}

// Exists checks if the Supplier row exists.
func (o *Supplier) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SupplierExists(ctx, exec, o.ID)
}
