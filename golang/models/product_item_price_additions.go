// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProductItemPriceAddition is an object representing the database table.
type ProductItemPriceAddition struct {
	ID                  int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	ProductItemPriceID  int64     `boil:"product_item_price_id" json:"product_item_price_id" toml:"product_item_price_id" yaml:"product_item_price_id"`
	PriceAdditionTypeID int64     `boil:"price_addition_type_id" json:"price_addition_type_id" toml:"price_addition_type_id" yaml:"price_addition_type_id"`
	AdditionValue       int       `boil:"addition_value" json:"addition_value" toml:"addition_value" yaml:"addition_value"`
	CreatedAt           time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *productItemPriceAdditionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productItemPriceAdditionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductItemPriceAdditionColumns = struct {
	ID                  string
	ProductItemPriceID  string
	PriceAdditionTypeID string
	AdditionValue       string
	CreatedAt           string
}{
	ID:                  "id",
	ProductItemPriceID:  "product_item_price_id",
	PriceAdditionTypeID: "price_addition_type_id",
	AdditionValue:       "addition_value",
	CreatedAt:           "created_at",
}

var ProductItemPriceAdditionTableColumns = struct {
	ID                  string
	ProductItemPriceID  string
	PriceAdditionTypeID string
	AdditionValue       string
	CreatedAt           string
}{
	ID:                  "product_item_price_additions.id",
	ProductItemPriceID:  "product_item_price_additions.product_item_price_id",
	PriceAdditionTypeID: "product_item_price_additions.price_addition_type_id",
	AdditionValue:       "product_item_price_additions.addition_value",
	CreatedAt:           "product_item_price_additions.created_at",
}

// Generated where

var ProductItemPriceAdditionWhere = struct {
	ID                  whereHelperint64
	ProductItemPriceID  whereHelperint64
	PriceAdditionTypeID whereHelperint64
	AdditionValue       whereHelperint
	CreatedAt           whereHelpertime_Time
}{
	ID:                  whereHelperint64{field: "\"product_item_price_additions\".\"id\""},
	ProductItemPriceID:  whereHelperint64{field: "\"product_item_price_additions\".\"product_item_price_id\""},
	PriceAdditionTypeID: whereHelperint64{field: "\"product_item_price_additions\".\"price_addition_type_id\""},
	AdditionValue:       whereHelperint{field: "\"product_item_price_additions\".\"addition_value\""},
	CreatedAt:           whereHelpertime_Time{field: "\"product_item_price_additions\".\"created_at\""},
}

// ProductItemPriceAdditionRels is where relationship names are stored.
var ProductItemPriceAdditionRels = struct {
	PriceAdditionType string
	ProductItemPrice  string
}{
	PriceAdditionType: "PriceAdditionType",
	ProductItemPrice:  "ProductItemPrice",
}

// productItemPriceAdditionR is where relationships are stored.
type productItemPriceAdditionR struct {
	PriceAdditionType *PriceAdditionType `boil:"PriceAdditionType" json:"PriceAdditionType" toml:"PriceAdditionType" yaml:"PriceAdditionType"`
	ProductItemPrice  *ProductItemPrice  `boil:"ProductItemPrice" json:"ProductItemPrice" toml:"ProductItemPrice" yaml:"ProductItemPrice"`
}

// NewStruct creates a new relationship struct
func (*productItemPriceAdditionR) NewStruct() *productItemPriceAdditionR {
	return &productItemPriceAdditionR{}
}

func (r *productItemPriceAdditionR) GetPriceAdditionType() *PriceAdditionType {
	if r == nil {
		return nil
	}
	return r.PriceAdditionType
}

func (r *productItemPriceAdditionR) GetProductItemPrice() *ProductItemPrice {
	if r == nil {
		return nil
	}
	return r.ProductItemPrice
}

// productItemPriceAdditionL is where Load methods for each relationship are stored.
type productItemPriceAdditionL struct{}

var (
	productItemPriceAdditionAllColumns            = []string{"id", "product_item_price_id", "price_addition_type_id", "addition_value", "created_at"}
	productItemPriceAdditionColumnsWithoutDefault = []string{"product_item_price_id", "price_addition_type_id", "addition_value"}
	productItemPriceAdditionColumnsWithDefault    = []string{"id", "created_at"}
	productItemPriceAdditionPrimaryKeyColumns     = []string{"id"}
	productItemPriceAdditionGeneratedColumns      = []string{}
)

type (
	// ProductItemPriceAdditionSlice is an alias for a slice of pointers to ProductItemPriceAddition.
	// This should almost always be used instead of []ProductItemPriceAddition.
	ProductItemPriceAdditionSlice []*ProductItemPriceAddition
	// ProductItemPriceAdditionHook is the signature for custom ProductItemPriceAddition hook methods
	ProductItemPriceAdditionHook func(context.Context, boil.ContextExecutor, *ProductItemPriceAddition) error

	productItemPriceAdditionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productItemPriceAdditionType                 = reflect.TypeOf(&ProductItemPriceAddition{})
	productItemPriceAdditionMapping              = queries.MakeStructMapping(productItemPriceAdditionType)
	productItemPriceAdditionPrimaryKeyMapping, _ = queries.BindMapping(productItemPriceAdditionType, productItemPriceAdditionMapping, productItemPriceAdditionPrimaryKeyColumns)
	productItemPriceAdditionInsertCacheMut       sync.RWMutex
	productItemPriceAdditionInsertCache          = make(map[string]insertCache)
	productItemPriceAdditionUpdateCacheMut       sync.RWMutex
	productItemPriceAdditionUpdateCache          = make(map[string]updateCache)
	productItemPriceAdditionUpsertCacheMut       sync.RWMutex
	productItemPriceAdditionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var productItemPriceAdditionAfterSelectHooks []ProductItemPriceAdditionHook

var productItemPriceAdditionBeforeInsertHooks []ProductItemPriceAdditionHook
var productItemPriceAdditionAfterInsertHooks []ProductItemPriceAdditionHook

var productItemPriceAdditionBeforeUpdateHooks []ProductItemPriceAdditionHook
var productItemPriceAdditionAfterUpdateHooks []ProductItemPriceAdditionHook

var productItemPriceAdditionBeforeDeleteHooks []ProductItemPriceAdditionHook
var productItemPriceAdditionAfterDeleteHooks []ProductItemPriceAdditionHook

var productItemPriceAdditionBeforeUpsertHooks []ProductItemPriceAdditionHook
var productItemPriceAdditionAfterUpsertHooks []ProductItemPriceAdditionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProductItemPriceAddition) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productItemPriceAdditionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProductItemPriceAddition) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productItemPriceAdditionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProductItemPriceAddition) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productItemPriceAdditionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProductItemPriceAddition) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productItemPriceAdditionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProductItemPriceAddition) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productItemPriceAdditionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProductItemPriceAddition) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productItemPriceAdditionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProductItemPriceAddition) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productItemPriceAdditionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProductItemPriceAddition) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productItemPriceAdditionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProductItemPriceAddition) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productItemPriceAdditionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProductItemPriceAdditionHook registers your hook function for all future operations.
func AddProductItemPriceAdditionHook(hookPoint boil.HookPoint, productItemPriceAdditionHook ProductItemPriceAdditionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		productItemPriceAdditionAfterSelectHooks = append(productItemPriceAdditionAfterSelectHooks, productItemPriceAdditionHook)
	case boil.BeforeInsertHook:
		productItemPriceAdditionBeforeInsertHooks = append(productItemPriceAdditionBeforeInsertHooks, productItemPriceAdditionHook)
	case boil.AfterInsertHook:
		productItemPriceAdditionAfterInsertHooks = append(productItemPriceAdditionAfterInsertHooks, productItemPriceAdditionHook)
	case boil.BeforeUpdateHook:
		productItemPriceAdditionBeforeUpdateHooks = append(productItemPriceAdditionBeforeUpdateHooks, productItemPriceAdditionHook)
	case boil.AfterUpdateHook:
		productItemPriceAdditionAfterUpdateHooks = append(productItemPriceAdditionAfterUpdateHooks, productItemPriceAdditionHook)
	case boil.BeforeDeleteHook:
		productItemPriceAdditionBeforeDeleteHooks = append(productItemPriceAdditionBeforeDeleteHooks, productItemPriceAdditionHook)
	case boil.AfterDeleteHook:
		productItemPriceAdditionAfterDeleteHooks = append(productItemPriceAdditionAfterDeleteHooks, productItemPriceAdditionHook)
	case boil.BeforeUpsertHook:
		productItemPriceAdditionBeforeUpsertHooks = append(productItemPriceAdditionBeforeUpsertHooks, productItemPriceAdditionHook)
	case boil.AfterUpsertHook:
		productItemPriceAdditionAfterUpsertHooks = append(productItemPriceAdditionAfterUpsertHooks, productItemPriceAdditionHook)
	}
}

// One returns a single productItemPriceAddition record from the query.
func (q productItemPriceAdditionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProductItemPriceAddition, error) {
	o := &ProductItemPriceAddition{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for product_item_price_additions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ProductItemPriceAddition records from the query.
func (q productItemPriceAdditionQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProductItemPriceAdditionSlice, error) {
	var o []*ProductItemPriceAddition

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ProductItemPriceAddition slice")
	}

	if len(productItemPriceAdditionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ProductItemPriceAddition records in the query.
func (q productItemPriceAdditionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count product_item_price_additions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q productItemPriceAdditionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if product_item_price_additions exists")
	}

	return count > 0, nil
}

// PriceAdditionType pointed to by the foreign key.
func (o *ProductItemPriceAddition) PriceAdditionType(mods ...qm.QueryMod) priceAdditionTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PriceAdditionTypeID),
	}

	queryMods = append(queryMods, mods...)

	return PriceAdditionTypes(queryMods...)
}

// ProductItemPrice pointed to by the foreign key.
func (o *ProductItemPriceAddition) ProductItemPrice(mods ...qm.QueryMod) productItemPriceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProductItemPriceID),
	}

	queryMods = append(queryMods, mods...)

	return ProductItemPrices(queryMods...)
}

// LoadPriceAdditionType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productItemPriceAdditionL) LoadPriceAdditionType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductItemPriceAddition interface{}, mods queries.Applicator) error {
	var slice []*ProductItemPriceAddition
	var object *ProductItemPriceAddition

	if singular {
		var ok bool
		object, ok = maybeProductItemPriceAddition.(*ProductItemPriceAddition)
		if !ok {
			object = new(ProductItemPriceAddition)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductItemPriceAddition)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductItemPriceAddition))
			}
		}
	} else {
		s, ok := maybeProductItemPriceAddition.(*[]*ProductItemPriceAddition)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductItemPriceAddition)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductItemPriceAddition))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productItemPriceAdditionR{}
		}
		args = append(args, object.PriceAdditionTypeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productItemPriceAdditionR{}
			}

			for _, a := range args {
				if a == obj.PriceAdditionTypeID {
					continue Outer
				}
			}

			args = append(args, obj.PriceAdditionTypeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`price_addition_types`),
		qm.WhereIn(`price_addition_types.id in ?`, args...),
		qmhelper.WhereIsNull(`price_addition_types.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PriceAdditionType")
	}

	var resultSlice []*PriceAdditionType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PriceAdditionType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for price_addition_types")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for price_addition_types")
	}

	if len(priceAdditionTypeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PriceAdditionType = foreign
		if foreign.R == nil {
			foreign.R = &priceAdditionTypeR{}
		}
		foreign.R.ProductItemPriceAdditions = append(foreign.R.ProductItemPriceAdditions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PriceAdditionTypeID == foreign.ID {
				local.R.PriceAdditionType = foreign
				if foreign.R == nil {
					foreign.R = &priceAdditionTypeR{}
				}
				foreign.R.ProductItemPriceAdditions = append(foreign.R.ProductItemPriceAdditions, local)
				break
			}
		}
	}

	return nil
}

// LoadProductItemPrice allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productItemPriceAdditionL) LoadProductItemPrice(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductItemPriceAddition interface{}, mods queries.Applicator) error {
	var slice []*ProductItemPriceAddition
	var object *ProductItemPriceAddition

	if singular {
		var ok bool
		object, ok = maybeProductItemPriceAddition.(*ProductItemPriceAddition)
		if !ok {
			object = new(ProductItemPriceAddition)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductItemPriceAddition)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductItemPriceAddition))
			}
		}
	} else {
		s, ok := maybeProductItemPriceAddition.(*[]*ProductItemPriceAddition)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductItemPriceAddition)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductItemPriceAddition))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productItemPriceAdditionR{}
		}
		args = append(args, object.ProductItemPriceID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productItemPriceAdditionR{}
			}

			for _, a := range args {
				if a == obj.ProductItemPriceID {
					continue Outer
				}
			}

			args = append(args, obj.ProductItemPriceID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_item_prices`),
		qm.WhereIn(`product_item_prices.id in ?`, args...),
		qmhelper.WhereIsNull(`product_item_prices.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ProductItemPrice")
	}

	var resultSlice []*ProductItemPrice
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ProductItemPrice")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for product_item_prices")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_item_prices")
	}

	if len(productItemPriceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductItemPrice = foreign
		if foreign.R == nil {
			foreign.R = &productItemPriceR{}
		}
		foreign.R.ProductItemPriceAdditions = append(foreign.R.ProductItemPriceAdditions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductItemPriceID == foreign.ID {
				local.R.ProductItemPrice = foreign
				if foreign.R == nil {
					foreign.R = &productItemPriceR{}
				}
				foreign.R.ProductItemPriceAdditions = append(foreign.R.ProductItemPriceAdditions, local)
				break
			}
		}
	}

	return nil
}

// SetPriceAdditionType of the productItemPriceAddition to the related item.
// Sets o.R.PriceAdditionType to related.
// Adds o to related.R.ProductItemPriceAdditions.
func (o *ProductItemPriceAddition) SetPriceAdditionType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *PriceAdditionType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"product_item_price_additions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"price_addition_type_id"}),
		strmangle.WhereClause("\"", "\"", 2, productItemPriceAdditionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PriceAdditionTypeID = related.ID
	if o.R == nil {
		o.R = &productItemPriceAdditionR{
			PriceAdditionType: related,
		}
	} else {
		o.R.PriceAdditionType = related
	}

	if related.R == nil {
		related.R = &priceAdditionTypeR{
			ProductItemPriceAdditions: ProductItemPriceAdditionSlice{o},
		}
	} else {
		related.R.ProductItemPriceAdditions = append(related.R.ProductItemPriceAdditions, o)
	}

	return nil
}

// SetProductItemPrice of the productItemPriceAddition to the related item.
// Sets o.R.ProductItemPrice to related.
// Adds o to related.R.ProductItemPriceAdditions.
func (o *ProductItemPriceAddition) SetProductItemPrice(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ProductItemPrice) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"product_item_price_additions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"product_item_price_id"}),
		strmangle.WhereClause("\"", "\"", 2, productItemPriceAdditionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductItemPriceID = related.ID
	if o.R == nil {
		o.R = &productItemPriceAdditionR{
			ProductItemPrice: related,
		}
	} else {
		o.R.ProductItemPrice = related
	}

	if related.R == nil {
		related.R = &productItemPriceR{
			ProductItemPriceAdditions: ProductItemPriceAdditionSlice{o},
		}
	} else {
		related.R.ProductItemPriceAdditions = append(related.R.ProductItemPriceAdditions, o)
	}

	return nil
}

// ProductItemPriceAdditions retrieves all the records using an executor.
func ProductItemPriceAdditions(mods ...qm.QueryMod) productItemPriceAdditionQuery {
	mods = append(mods, qm.From("\"product_item_price_additions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"product_item_price_additions\".*"})
	}

	return productItemPriceAdditionQuery{q}
}

// FindProductItemPriceAddition retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProductItemPriceAddition(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ProductItemPriceAddition, error) {
	productItemPriceAdditionObj := &ProductItemPriceAddition{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"product_item_price_additions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, productItemPriceAdditionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from product_item_price_additions")
	}

	if err = productItemPriceAdditionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return productItemPriceAdditionObj, err
	}

	return productItemPriceAdditionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProductItemPriceAddition) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no product_item_price_additions provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productItemPriceAdditionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productItemPriceAdditionInsertCacheMut.RLock()
	cache, cached := productItemPriceAdditionInsertCache[key]
	productItemPriceAdditionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productItemPriceAdditionAllColumns,
			productItemPriceAdditionColumnsWithDefault,
			productItemPriceAdditionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(productItemPriceAdditionType, productItemPriceAdditionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productItemPriceAdditionType, productItemPriceAdditionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"product_item_price_additions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"product_item_price_additions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into product_item_price_additions")
	}

	if !cached {
		productItemPriceAdditionInsertCacheMut.Lock()
		productItemPriceAdditionInsertCache[key] = cache
		productItemPriceAdditionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ProductItemPriceAddition.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProductItemPriceAddition) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	productItemPriceAdditionUpdateCacheMut.RLock()
	cache, cached := productItemPriceAdditionUpdateCache[key]
	productItemPriceAdditionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productItemPriceAdditionAllColumns,
			productItemPriceAdditionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update product_item_price_additions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"product_item_price_additions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, productItemPriceAdditionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productItemPriceAdditionType, productItemPriceAdditionMapping, append(wl, productItemPriceAdditionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update product_item_price_additions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for product_item_price_additions")
	}

	if !cached {
		productItemPriceAdditionUpdateCacheMut.Lock()
		productItemPriceAdditionUpdateCache[key] = cache
		productItemPriceAdditionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q productItemPriceAdditionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for product_item_price_additions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for product_item_price_additions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductItemPriceAdditionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productItemPriceAdditionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"product_item_price_additions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, productItemPriceAdditionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in productItemPriceAddition slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all productItemPriceAddition")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProductItemPriceAddition) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no product_item_price_additions provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productItemPriceAdditionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productItemPriceAdditionUpsertCacheMut.RLock()
	cache, cached := productItemPriceAdditionUpsertCache[key]
	productItemPriceAdditionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			productItemPriceAdditionAllColumns,
			productItemPriceAdditionColumnsWithDefault,
			productItemPriceAdditionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			productItemPriceAdditionAllColumns,
			productItemPriceAdditionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert product_item_price_additions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(productItemPriceAdditionPrimaryKeyColumns))
			copy(conflict, productItemPriceAdditionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"product_item_price_additions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(productItemPriceAdditionType, productItemPriceAdditionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productItemPriceAdditionType, productItemPriceAdditionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert product_item_price_additions")
	}

	if !cached {
		productItemPriceAdditionUpsertCacheMut.Lock()
		productItemPriceAdditionUpsertCache[key] = cache
		productItemPriceAdditionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ProductItemPriceAddition record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProductItemPriceAddition) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ProductItemPriceAddition provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productItemPriceAdditionPrimaryKeyMapping)
	sql := "DELETE FROM \"product_item_price_additions\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from product_item_price_additions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for product_item_price_additions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q productItemPriceAdditionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no productItemPriceAdditionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from product_item_price_additions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for product_item_price_additions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductItemPriceAdditionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(productItemPriceAdditionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productItemPriceAdditionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"product_item_price_additions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productItemPriceAdditionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from productItemPriceAddition slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for product_item_price_additions")
	}

	if len(productItemPriceAdditionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProductItemPriceAddition) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProductItemPriceAddition(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductItemPriceAdditionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductItemPriceAdditionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productItemPriceAdditionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"product_item_price_additions\".* FROM \"product_item_price_additions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productItemPriceAdditionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProductItemPriceAdditionSlice")
	}

	*o = slice

	return nil
}

// ProductItemPriceAdditionExists checks if the ProductItemPriceAddition row exists.
func ProductItemPriceAdditionExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"product_item_price_additions\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if product_item_price_additions exists")
	}

	return exists, nil
}

// Exists checks if the ProductItemPriceAddition row exists.
func (o *ProductItemPriceAddition) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ProductItemPriceAdditionExists(ctx, exec, o.ID)
}
