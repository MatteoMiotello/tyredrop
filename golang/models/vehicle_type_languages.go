// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// VehicleTypeLanguage is an object representing the database table.
type VehicleTypeLanguage struct {
	ID            int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	VehicleTypeID int64     `boil:"vehicle_type_id" json:"vehicle_type_id" toml:"vehicle_type_id" yaml:"vehicle_type_id"`
	LanguageID    int64     `boil:"language_id" json:"language_id" toml:"language_id" yaml:"language_id"`
	Name          string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	UpdatedAt     time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt     time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *vehicleTypeLanguageR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L vehicleTypeLanguageL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VehicleTypeLanguageColumns = struct {
	ID            string
	VehicleTypeID string
	LanguageID    string
	Name          string
	UpdatedAt     string
	CreatedAt     string
}{
	ID:            "id",
	VehicleTypeID: "vehicle_type_id",
	LanguageID:    "language_id",
	Name:          "name",
	UpdatedAt:     "updated_at",
	CreatedAt:     "created_at",
}

var VehicleTypeLanguageTableColumns = struct {
	ID            string
	VehicleTypeID string
	LanguageID    string
	Name          string
	UpdatedAt     string
	CreatedAt     string
}{
	ID:            "vehicle_type_languages.id",
	VehicleTypeID: "vehicle_type_languages.vehicle_type_id",
	LanguageID:    "vehicle_type_languages.language_id",
	Name:          "vehicle_type_languages.name",
	UpdatedAt:     "vehicle_type_languages.updated_at",
	CreatedAt:     "vehicle_type_languages.created_at",
}

// Generated where

var VehicleTypeLanguageWhere = struct {
	ID            whereHelperint64
	VehicleTypeID whereHelperint64
	LanguageID    whereHelperint64
	Name          whereHelperstring
	UpdatedAt     whereHelpertime_Time
	CreatedAt     whereHelpertime_Time
}{
	ID:            whereHelperint64{field: "\"vehicle_type_languages\".\"id\""},
	VehicleTypeID: whereHelperint64{field: "\"vehicle_type_languages\".\"vehicle_type_id\""},
	LanguageID:    whereHelperint64{field: "\"vehicle_type_languages\".\"language_id\""},
	Name:          whereHelperstring{field: "\"vehicle_type_languages\".\"name\""},
	UpdatedAt:     whereHelpertime_Time{field: "\"vehicle_type_languages\".\"updated_at\""},
	CreatedAt:     whereHelpertime_Time{field: "\"vehicle_type_languages\".\"created_at\""},
}

// VehicleTypeLanguageRels is where relationship names are stored.
var VehicleTypeLanguageRels = struct {
	Language    string
	VehicleType string
}{
	Language:    "Language",
	VehicleType: "VehicleType",
}

// vehicleTypeLanguageR is where relationships are stored.
type vehicleTypeLanguageR struct {
	Language    *Language    `boil:"Language" json:"Language" toml:"Language" yaml:"Language"`
	VehicleType *VehicleType `boil:"VehicleType" json:"VehicleType" toml:"VehicleType" yaml:"VehicleType"`
}

// NewStruct creates a new relationship struct
func (*vehicleTypeLanguageR) NewStruct() *vehicleTypeLanguageR {
	return &vehicleTypeLanguageR{}
}

func (r *vehicleTypeLanguageR) GetLanguage() *Language {
	if r == nil {
		return nil
	}
	return r.Language
}

func (r *vehicleTypeLanguageR) GetVehicleType() *VehicleType {
	if r == nil {
		return nil
	}
	return r.VehicleType
}

// vehicleTypeLanguageL is where Load methods for each relationship are stored.
type vehicleTypeLanguageL struct{}

var (
	vehicleTypeLanguageAllColumns            = []string{"id", "vehicle_type_id", "language_id", "name", "updated_at", "created_at"}
	vehicleTypeLanguageColumnsWithoutDefault = []string{"vehicle_type_id", "language_id", "name"}
	vehicleTypeLanguageColumnsWithDefault    = []string{"id", "updated_at", "created_at"}
	vehicleTypeLanguagePrimaryKeyColumns     = []string{"id"}
	vehicleTypeLanguageGeneratedColumns      = []string{}
)

type (
	// VehicleTypeLanguageSlice is an alias for a slice of pointers to VehicleTypeLanguage.
	// This should almost always be used instead of []VehicleTypeLanguage.
	VehicleTypeLanguageSlice []*VehicleTypeLanguage
	// VehicleTypeLanguageHook is the signature for custom VehicleTypeLanguage hook methods
	VehicleTypeLanguageHook func(context.Context, boil.ContextExecutor, *VehicleTypeLanguage) error

	vehicleTypeLanguageQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	vehicleTypeLanguageType                 = reflect.TypeOf(&VehicleTypeLanguage{})
	vehicleTypeLanguageMapping              = queries.MakeStructMapping(vehicleTypeLanguageType)
	vehicleTypeLanguagePrimaryKeyMapping, _ = queries.BindMapping(vehicleTypeLanguageType, vehicleTypeLanguageMapping, vehicleTypeLanguagePrimaryKeyColumns)
	vehicleTypeLanguageInsertCacheMut       sync.RWMutex
	vehicleTypeLanguageInsertCache          = make(map[string]insertCache)
	vehicleTypeLanguageUpdateCacheMut       sync.RWMutex
	vehicleTypeLanguageUpdateCache          = make(map[string]updateCache)
	vehicleTypeLanguageUpsertCacheMut       sync.RWMutex
	vehicleTypeLanguageUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var vehicleTypeLanguageAfterSelectHooks []VehicleTypeLanguageHook

var vehicleTypeLanguageBeforeInsertHooks []VehicleTypeLanguageHook
var vehicleTypeLanguageAfterInsertHooks []VehicleTypeLanguageHook

var vehicleTypeLanguageBeforeUpdateHooks []VehicleTypeLanguageHook
var vehicleTypeLanguageAfterUpdateHooks []VehicleTypeLanguageHook

var vehicleTypeLanguageBeforeDeleteHooks []VehicleTypeLanguageHook
var vehicleTypeLanguageAfterDeleteHooks []VehicleTypeLanguageHook

var vehicleTypeLanguageBeforeUpsertHooks []VehicleTypeLanguageHook
var vehicleTypeLanguageAfterUpsertHooks []VehicleTypeLanguageHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *VehicleTypeLanguage) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleTypeLanguageAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *VehicleTypeLanguage) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleTypeLanguageBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *VehicleTypeLanguage) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleTypeLanguageAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *VehicleTypeLanguage) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleTypeLanguageBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *VehicleTypeLanguage) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleTypeLanguageAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *VehicleTypeLanguage) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleTypeLanguageBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *VehicleTypeLanguage) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleTypeLanguageAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *VehicleTypeLanguage) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleTypeLanguageBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *VehicleTypeLanguage) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleTypeLanguageAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVehicleTypeLanguageHook registers your hook function for all future operations.
func AddVehicleTypeLanguageHook(hookPoint boil.HookPoint, vehicleTypeLanguageHook VehicleTypeLanguageHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		vehicleTypeLanguageAfterSelectHooks = append(vehicleTypeLanguageAfterSelectHooks, vehicleTypeLanguageHook)
	case boil.BeforeInsertHook:
		vehicleTypeLanguageBeforeInsertHooks = append(vehicleTypeLanguageBeforeInsertHooks, vehicleTypeLanguageHook)
	case boil.AfterInsertHook:
		vehicleTypeLanguageAfterInsertHooks = append(vehicleTypeLanguageAfterInsertHooks, vehicleTypeLanguageHook)
	case boil.BeforeUpdateHook:
		vehicleTypeLanguageBeforeUpdateHooks = append(vehicleTypeLanguageBeforeUpdateHooks, vehicleTypeLanguageHook)
	case boil.AfterUpdateHook:
		vehicleTypeLanguageAfterUpdateHooks = append(vehicleTypeLanguageAfterUpdateHooks, vehicleTypeLanguageHook)
	case boil.BeforeDeleteHook:
		vehicleTypeLanguageBeforeDeleteHooks = append(vehicleTypeLanguageBeforeDeleteHooks, vehicleTypeLanguageHook)
	case boil.AfterDeleteHook:
		vehicleTypeLanguageAfterDeleteHooks = append(vehicleTypeLanguageAfterDeleteHooks, vehicleTypeLanguageHook)
	case boil.BeforeUpsertHook:
		vehicleTypeLanguageBeforeUpsertHooks = append(vehicleTypeLanguageBeforeUpsertHooks, vehicleTypeLanguageHook)
	case boil.AfterUpsertHook:
		vehicleTypeLanguageAfterUpsertHooks = append(vehicleTypeLanguageAfterUpsertHooks, vehicleTypeLanguageHook)
	}
}

// One returns a single vehicleTypeLanguage record from the query.
func (q vehicleTypeLanguageQuery) One(ctx context.Context, exec boil.ContextExecutor) (*VehicleTypeLanguage, error) {
	o := &VehicleTypeLanguage{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for vehicle_type_languages")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all VehicleTypeLanguage records from the query.
func (q vehicleTypeLanguageQuery) All(ctx context.Context, exec boil.ContextExecutor) (VehicleTypeLanguageSlice, error) {
	var o []*VehicleTypeLanguage

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to VehicleTypeLanguage slice")
	}

	if len(vehicleTypeLanguageAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all VehicleTypeLanguage records in the query.
func (q vehicleTypeLanguageQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count vehicle_type_languages rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q vehicleTypeLanguageQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if vehicle_type_languages exists")
	}

	return count > 0, nil
}

// Language pointed to by the foreign key.
func (o *VehicleTypeLanguage) Language(mods ...qm.QueryMod) languageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.LanguageID),
	}

	queryMods = append(queryMods, mods...)

	return Languages(queryMods...)
}

// VehicleType pointed to by the foreign key.
func (o *VehicleTypeLanguage) VehicleType(mods ...qm.QueryMod) vehicleTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.VehicleTypeID),
	}

	queryMods = append(queryMods, mods...)

	return VehicleTypes(queryMods...)
}

// LoadLanguage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (vehicleTypeLanguageL) LoadLanguage(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVehicleTypeLanguage interface{}, mods queries.Applicator) error {
	var slice []*VehicleTypeLanguage
	var object *VehicleTypeLanguage

	if singular {
		var ok bool
		object, ok = maybeVehicleTypeLanguage.(*VehicleTypeLanguage)
		if !ok {
			object = new(VehicleTypeLanguage)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVehicleTypeLanguage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVehicleTypeLanguage))
			}
		}
	} else {
		s, ok := maybeVehicleTypeLanguage.(*[]*VehicleTypeLanguage)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVehicleTypeLanguage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVehicleTypeLanguage))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &vehicleTypeLanguageR{}
		}
		args = append(args, object.LanguageID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &vehicleTypeLanguageR{}
			}

			for _, a := range args {
				if a == obj.LanguageID {
					continue Outer
				}
			}

			args = append(args, obj.LanguageID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`languages`),
		qm.WhereIn(`languages.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Language")
	}

	var resultSlice []*Language
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Language")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for languages")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for languages")
	}

	if len(languageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Language = foreign
		if foreign.R == nil {
			foreign.R = &languageR{}
		}
		foreign.R.VehicleTypeLanguages = append(foreign.R.VehicleTypeLanguages, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LanguageID == foreign.ID {
				local.R.Language = foreign
				if foreign.R == nil {
					foreign.R = &languageR{}
				}
				foreign.R.VehicleTypeLanguages = append(foreign.R.VehicleTypeLanguages, local)
				break
			}
		}
	}

	return nil
}

// LoadVehicleType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (vehicleTypeLanguageL) LoadVehicleType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVehicleTypeLanguage interface{}, mods queries.Applicator) error {
	var slice []*VehicleTypeLanguage
	var object *VehicleTypeLanguage

	if singular {
		var ok bool
		object, ok = maybeVehicleTypeLanguage.(*VehicleTypeLanguage)
		if !ok {
			object = new(VehicleTypeLanguage)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVehicleTypeLanguage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVehicleTypeLanguage))
			}
		}
	} else {
		s, ok := maybeVehicleTypeLanguage.(*[]*VehicleTypeLanguage)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVehicleTypeLanguage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVehicleTypeLanguage))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &vehicleTypeLanguageR{}
		}
		args = append(args, object.VehicleTypeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &vehicleTypeLanguageR{}
			}

			for _, a := range args {
				if a == obj.VehicleTypeID {
					continue Outer
				}
			}

			args = append(args, obj.VehicleTypeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`vehicle_types`),
		qm.WhereIn(`vehicle_types.id in ?`, args...),
		qmhelper.WhereIsNull(`vehicle_types.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load VehicleType")
	}

	var resultSlice []*VehicleType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice VehicleType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for vehicle_types")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for vehicle_types")
	}

	if len(vehicleTypeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.VehicleType = foreign
		if foreign.R == nil {
			foreign.R = &vehicleTypeR{}
		}
		foreign.R.VehicleTypeLanguages = append(foreign.R.VehicleTypeLanguages, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.VehicleTypeID == foreign.ID {
				local.R.VehicleType = foreign
				if foreign.R == nil {
					foreign.R = &vehicleTypeR{}
				}
				foreign.R.VehicleTypeLanguages = append(foreign.R.VehicleTypeLanguages, local)
				break
			}
		}
	}

	return nil
}

// SetLanguage of the vehicleTypeLanguage to the related item.
// Sets o.R.Language to related.
// Adds o to related.R.VehicleTypeLanguages.
func (o *VehicleTypeLanguage) SetLanguage(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Language) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"vehicle_type_languages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"language_id"}),
		strmangle.WhereClause("\"", "\"", 2, vehicleTypeLanguagePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LanguageID = related.ID
	if o.R == nil {
		o.R = &vehicleTypeLanguageR{
			Language: related,
		}
	} else {
		o.R.Language = related
	}

	if related.R == nil {
		related.R = &languageR{
			VehicleTypeLanguages: VehicleTypeLanguageSlice{o},
		}
	} else {
		related.R.VehicleTypeLanguages = append(related.R.VehicleTypeLanguages, o)
	}

	return nil
}

// SetVehicleType of the vehicleTypeLanguage to the related item.
// Sets o.R.VehicleType to related.
// Adds o to related.R.VehicleTypeLanguages.
func (o *VehicleTypeLanguage) SetVehicleType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *VehicleType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"vehicle_type_languages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"vehicle_type_id"}),
		strmangle.WhereClause("\"", "\"", 2, vehicleTypeLanguagePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.VehicleTypeID = related.ID
	if o.R == nil {
		o.R = &vehicleTypeLanguageR{
			VehicleType: related,
		}
	} else {
		o.R.VehicleType = related
	}

	if related.R == nil {
		related.R = &vehicleTypeR{
			VehicleTypeLanguages: VehicleTypeLanguageSlice{o},
		}
	} else {
		related.R.VehicleTypeLanguages = append(related.R.VehicleTypeLanguages, o)
	}

	return nil
}

// VehicleTypeLanguages retrieves all the records using an executor.
func VehicleTypeLanguages(mods ...qm.QueryMod) vehicleTypeLanguageQuery {
	mods = append(mods, qm.From("\"vehicle_type_languages\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"vehicle_type_languages\".*"})
	}

	return vehicleTypeLanguageQuery{q}
}

// FindVehicleTypeLanguage retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVehicleTypeLanguage(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*VehicleTypeLanguage, error) {
	vehicleTypeLanguageObj := &VehicleTypeLanguage{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"vehicle_type_languages\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, vehicleTypeLanguageObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from vehicle_type_languages")
	}

	if err = vehicleTypeLanguageObj.doAfterSelectHooks(ctx, exec); err != nil {
		return vehicleTypeLanguageObj, err
	}

	return vehicleTypeLanguageObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *VehicleTypeLanguage) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no vehicle_type_languages provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(vehicleTypeLanguageColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	vehicleTypeLanguageInsertCacheMut.RLock()
	cache, cached := vehicleTypeLanguageInsertCache[key]
	vehicleTypeLanguageInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			vehicleTypeLanguageAllColumns,
			vehicleTypeLanguageColumnsWithDefault,
			vehicleTypeLanguageColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(vehicleTypeLanguageType, vehicleTypeLanguageMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(vehicleTypeLanguageType, vehicleTypeLanguageMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"vehicle_type_languages\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"vehicle_type_languages\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into vehicle_type_languages")
	}

	if !cached {
		vehicleTypeLanguageInsertCacheMut.Lock()
		vehicleTypeLanguageInsertCache[key] = cache
		vehicleTypeLanguageInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the VehicleTypeLanguage.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *VehicleTypeLanguage) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	vehicleTypeLanguageUpdateCacheMut.RLock()
	cache, cached := vehicleTypeLanguageUpdateCache[key]
	vehicleTypeLanguageUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			vehicleTypeLanguageAllColumns,
			vehicleTypeLanguagePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update vehicle_type_languages, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"vehicle_type_languages\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, vehicleTypeLanguagePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(vehicleTypeLanguageType, vehicleTypeLanguageMapping, append(wl, vehicleTypeLanguagePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update vehicle_type_languages row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for vehicle_type_languages")
	}

	if !cached {
		vehicleTypeLanguageUpdateCacheMut.Lock()
		vehicleTypeLanguageUpdateCache[key] = cache
		vehicleTypeLanguageUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q vehicleTypeLanguageQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for vehicle_type_languages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for vehicle_type_languages")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VehicleTypeLanguageSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vehicleTypeLanguagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"vehicle_type_languages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, vehicleTypeLanguagePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in vehicleTypeLanguage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all vehicleTypeLanguage")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *VehicleTypeLanguage) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no vehicle_type_languages provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(vehicleTypeLanguageColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	vehicleTypeLanguageUpsertCacheMut.RLock()
	cache, cached := vehicleTypeLanguageUpsertCache[key]
	vehicleTypeLanguageUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			vehicleTypeLanguageAllColumns,
			vehicleTypeLanguageColumnsWithDefault,
			vehicleTypeLanguageColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			vehicleTypeLanguageAllColumns,
			vehicleTypeLanguagePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert vehicle_type_languages, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(vehicleTypeLanguagePrimaryKeyColumns))
			copy(conflict, vehicleTypeLanguagePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"vehicle_type_languages\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(vehicleTypeLanguageType, vehicleTypeLanguageMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(vehicleTypeLanguageType, vehicleTypeLanguageMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert vehicle_type_languages")
	}

	if !cached {
		vehicleTypeLanguageUpsertCacheMut.Lock()
		vehicleTypeLanguageUpsertCache[key] = cache
		vehicleTypeLanguageUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single VehicleTypeLanguage record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *VehicleTypeLanguage) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no VehicleTypeLanguage provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), vehicleTypeLanguagePrimaryKeyMapping)
	sql := "DELETE FROM \"vehicle_type_languages\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from vehicle_type_languages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for vehicle_type_languages")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q vehicleTypeLanguageQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no vehicleTypeLanguageQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from vehicle_type_languages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for vehicle_type_languages")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VehicleTypeLanguageSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(vehicleTypeLanguageBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vehicleTypeLanguagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"vehicle_type_languages\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vehicleTypeLanguagePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from vehicleTypeLanguage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for vehicle_type_languages")
	}

	if len(vehicleTypeLanguageAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *VehicleTypeLanguage) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVehicleTypeLanguage(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VehicleTypeLanguageSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VehicleTypeLanguageSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vehicleTypeLanguagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"vehicle_type_languages\".* FROM \"vehicle_type_languages\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vehicleTypeLanguagePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in VehicleTypeLanguageSlice")
	}

	*o = slice

	return nil
}

// VehicleTypeLanguageExists checks if the VehicleTypeLanguage row exists.
func VehicleTypeLanguageExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"vehicle_type_languages\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if vehicle_type_languages exists")
	}

	return exists, nil
}

// Exists checks if the VehicleTypeLanguage row exists.
func (o *VehicleTypeLanguage) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return VehicleTypeLanguageExists(ctx, exec, o.ID)
}
