// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserBilling is an object representing the database table.
type UserBilling struct {
	ID                int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID            int64       `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	DefaultTaxRateID  int64       `boil:"default_tax_rate_id" json:"default_tax_rate_id" toml:"default_tax_rate_id" yaml:"default_tax_rate_id"`
	LegalEntityTypeID int64       `boil:"legal_entity_type_id" json:"legal_entity_type_id" toml:"legal_entity_type_id" yaml:"legal_entity_type_id"`
	Name              string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Surname           string      `boil:"surname" json:"surname" toml:"surname" yaml:"surname"`
	FiscalCode        string      `boil:"fiscal_code" json:"fiscal_code" toml:"fiscal_code" yaml:"fiscal_code"`
	VatNumber         string      `boil:"vat_number" json:"vat_number" toml:"vat_number" yaml:"vat_number"`
	AddressLine1      string      `boil:"address_line_1" json:"address_line_1" toml:"address_line_1" yaml:"address_line_1"`
	AddressLine2      null.String `boil:"address_line_2" json:"address_line_2,omitempty" toml:"address_line_2" yaml:"address_line_2,omitempty"`
	City              string      `boil:"city" json:"city" toml:"city" yaml:"city"`
	Province          string      `boil:"province" json:"province" toml:"province" yaml:"province"`
	Cap               string      `boil:"cap" json:"cap" toml:"cap" yaml:"cap"`
	Country           string      `boil:"country" json:"country" toml:"country" yaml:"country"`
	DeletedAt         null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	UpdatedAt         time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt         time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *userBillingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userBillingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserBillingColumns = struct {
	ID                string
	UserID            string
	DefaultTaxRateID  string
	LegalEntityTypeID string
	Name              string
	Surname           string
	FiscalCode        string
	VatNumber         string
	AddressLine1      string
	AddressLine2      string
	City              string
	Province          string
	Cap               string
	Country           string
	DeletedAt         string
	UpdatedAt         string
	CreatedAt         string
}{
	ID:                "id",
	UserID:            "user_id",
	DefaultTaxRateID:  "default_tax_rate_id",
	LegalEntityTypeID: "legal_entity_type_id",
	Name:              "name",
	Surname:           "surname",
	FiscalCode:        "fiscal_code",
	VatNumber:         "vat_number",
	AddressLine1:      "address_line_1",
	AddressLine2:      "address_line_2",
	City:              "city",
	Province:          "province",
	Cap:               "cap",
	Country:           "country",
	DeletedAt:         "deleted_at",
	UpdatedAt:         "updated_at",
	CreatedAt:         "created_at",
}

var UserBillingTableColumns = struct {
	ID                string
	UserID            string
	DefaultTaxRateID  string
	LegalEntityTypeID string
	Name              string
	Surname           string
	FiscalCode        string
	VatNumber         string
	AddressLine1      string
	AddressLine2      string
	City              string
	Province          string
	Cap               string
	Country           string
	DeletedAt         string
	UpdatedAt         string
	CreatedAt         string
}{
	ID:                "user_billings.id",
	UserID:            "user_billings.user_id",
	DefaultTaxRateID:  "user_billings.default_tax_rate_id",
	LegalEntityTypeID: "user_billings.legal_entity_type_id",
	Name:              "user_billings.name",
	Surname:           "user_billings.surname",
	FiscalCode:        "user_billings.fiscal_code",
	VatNumber:         "user_billings.vat_number",
	AddressLine1:      "user_billings.address_line_1",
	AddressLine2:      "user_billings.address_line_2",
	City:              "user_billings.city",
	Province:          "user_billings.province",
	Cap:               "user_billings.cap",
	Country:           "user_billings.country",
	DeletedAt:         "user_billings.deleted_at",
	UpdatedAt:         "user_billings.updated_at",
	CreatedAt:         "user_billings.created_at",
}

// Generated where

var UserBillingWhere = struct {
	ID                whereHelperint64
	UserID            whereHelperint64
	DefaultTaxRateID  whereHelperint64
	LegalEntityTypeID whereHelperint64
	Name              whereHelperstring
	Surname           whereHelperstring
	FiscalCode        whereHelperstring
	VatNumber         whereHelperstring
	AddressLine1      whereHelperstring
	AddressLine2      whereHelpernull_String
	City              whereHelperstring
	Province          whereHelperstring
	Cap               whereHelperstring
	Country           whereHelperstring
	DeletedAt         whereHelpernull_Time
	UpdatedAt         whereHelpertime_Time
	CreatedAt         whereHelpertime_Time
}{
	ID:                whereHelperint64{field: "\"user_billings\".\"id\""},
	UserID:            whereHelperint64{field: "\"user_billings\".\"user_id\""},
	DefaultTaxRateID:  whereHelperint64{field: "\"user_billings\".\"default_tax_rate_id\""},
	LegalEntityTypeID: whereHelperint64{field: "\"user_billings\".\"legal_entity_type_id\""},
	Name:              whereHelperstring{field: "\"user_billings\".\"name\""},
	Surname:           whereHelperstring{field: "\"user_billings\".\"surname\""},
	FiscalCode:        whereHelperstring{field: "\"user_billings\".\"fiscal_code\""},
	VatNumber:         whereHelperstring{field: "\"user_billings\".\"vat_number\""},
	AddressLine1:      whereHelperstring{field: "\"user_billings\".\"address_line_1\""},
	AddressLine2:      whereHelpernull_String{field: "\"user_billings\".\"address_line_2\""},
	City:              whereHelperstring{field: "\"user_billings\".\"city\""},
	Province:          whereHelperstring{field: "\"user_billings\".\"province\""},
	Cap:               whereHelperstring{field: "\"user_billings\".\"cap\""},
	Country:           whereHelperstring{field: "\"user_billings\".\"country\""},
	DeletedAt:         whereHelpernull_Time{field: "\"user_billings\".\"deleted_at\""},
	UpdatedAt:         whereHelpertime_Time{field: "\"user_billings\".\"updated_at\""},
	CreatedAt:         whereHelpertime_Time{field: "\"user_billings\".\"created_at\""},
}

// UserBillingRels is where relationship names are stored.
var UserBillingRels = struct {
	LegalEntityType string
	DefaultTaxRate  string
	User            string
	Orders          string
}{
	LegalEntityType: "LegalEntityType",
	DefaultTaxRate:  "DefaultTaxRate",
	User:            "User",
	Orders:          "Orders",
}

// userBillingR is where relationships are stored.
type userBillingR struct {
	LegalEntityType *LegalEntityType `boil:"LegalEntityType" json:"LegalEntityType" toml:"LegalEntityType" yaml:"LegalEntityType"`
	DefaultTaxRate  *TaxRate         `boil:"DefaultTaxRate" json:"DefaultTaxRate" toml:"DefaultTaxRate" yaml:"DefaultTaxRate"`
	User            *User            `boil:"User" json:"User" toml:"User" yaml:"User"`
	Orders          OrderSlice       `boil:"Orders" json:"Orders" toml:"Orders" yaml:"Orders"`
}

// NewStruct creates a new relationship struct
func (*userBillingR) NewStruct() *userBillingR {
	return &userBillingR{}
}

func (r *userBillingR) GetLegalEntityType() *LegalEntityType {
	if r == nil {
		return nil
	}
	return r.LegalEntityType
}

func (r *userBillingR) GetDefaultTaxRate() *TaxRate {
	if r == nil {
		return nil
	}
	return r.DefaultTaxRate
}

func (r *userBillingR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *userBillingR) GetOrders() OrderSlice {
	if r == nil {
		return nil
	}
	return r.Orders
}

// userBillingL is where Load methods for each relationship are stored.
type userBillingL struct{}

var (
	userBillingAllColumns            = []string{"id", "user_id", "default_tax_rate_id", "legal_entity_type_id", "name", "surname", "fiscal_code", "vat_number", "address_line_1", "address_line_2", "city", "province", "cap", "country", "deleted_at", "updated_at", "created_at"}
	userBillingColumnsWithoutDefault = []string{"user_id", "default_tax_rate_id", "legal_entity_type_id", "name", "surname", "fiscal_code", "vat_number", "address_line_1", "city", "province", "cap", "country"}
	userBillingColumnsWithDefault    = []string{"id", "address_line_2", "deleted_at", "updated_at", "created_at"}
	userBillingPrimaryKeyColumns     = []string{"id"}
	userBillingGeneratedColumns      = []string{}
)

type (
	// UserBillingSlice is an alias for a slice of pointers to UserBilling.
	// This should almost always be used instead of []UserBilling.
	UserBillingSlice []*UserBilling
	// UserBillingHook is the signature for custom UserBilling hook methods
	UserBillingHook func(context.Context, boil.ContextExecutor, *UserBilling) error

	userBillingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userBillingType                 = reflect.TypeOf(&UserBilling{})
	userBillingMapping              = queries.MakeStructMapping(userBillingType)
	userBillingPrimaryKeyMapping, _ = queries.BindMapping(userBillingType, userBillingMapping, userBillingPrimaryKeyColumns)
	userBillingInsertCacheMut       sync.RWMutex
	userBillingInsertCache          = make(map[string]insertCache)
	userBillingUpdateCacheMut       sync.RWMutex
	userBillingUpdateCache          = make(map[string]updateCache)
	userBillingUpsertCacheMut       sync.RWMutex
	userBillingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userBillingAfterSelectHooks []UserBillingHook

var userBillingBeforeInsertHooks []UserBillingHook
var userBillingAfterInsertHooks []UserBillingHook

var userBillingBeforeUpdateHooks []UserBillingHook
var userBillingAfterUpdateHooks []UserBillingHook

var userBillingBeforeDeleteHooks []UserBillingHook
var userBillingAfterDeleteHooks []UserBillingHook

var userBillingBeforeUpsertHooks []UserBillingHook
var userBillingAfterUpsertHooks []UserBillingHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserBilling) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBillingAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserBilling) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBillingBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserBilling) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBillingAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserBilling) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBillingBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserBilling) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBillingAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserBilling) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBillingBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserBilling) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBillingAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserBilling) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBillingBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserBilling) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBillingAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserBillingHook registers your hook function for all future operations.
func AddUserBillingHook(hookPoint boil.HookPoint, userBillingHook UserBillingHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userBillingAfterSelectHooks = append(userBillingAfterSelectHooks, userBillingHook)
	case boil.BeforeInsertHook:
		userBillingBeforeInsertHooks = append(userBillingBeforeInsertHooks, userBillingHook)
	case boil.AfterInsertHook:
		userBillingAfterInsertHooks = append(userBillingAfterInsertHooks, userBillingHook)
	case boil.BeforeUpdateHook:
		userBillingBeforeUpdateHooks = append(userBillingBeforeUpdateHooks, userBillingHook)
	case boil.AfterUpdateHook:
		userBillingAfterUpdateHooks = append(userBillingAfterUpdateHooks, userBillingHook)
	case boil.BeforeDeleteHook:
		userBillingBeforeDeleteHooks = append(userBillingBeforeDeleteHooks, userBillingHook)
	case boil.AfterDeleteHook:
		userBillingAfterDeleteHooks = append(userBillingAfterDeleteHooks, userBillingHook)
	case boil.BeforeUpsertHook:
		userBillingBeforeUpsertHooks = append(userBillingBeforeUpsertHooks, userBillingHook)
	case boil.AfterUpsertHook:
		userBillingAfterUpsertHooks = append(userBillingAfterUpsertHooks, userBillingHook)
	}
}

// One returns a single userBilling record from the query.
func (q userBillingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserBilling, error) {
	o := &UserBilling{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_billings")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserBilling records from the query.
func (q userBillingQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserBillingSlice, error) {
	var o []*UserBilling

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserBilling slice")
	}

	if len(userBillingAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserBilling records in the query.
func (q userBillingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_billings rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userBillingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_billings exists")
	}

	return count > 0, nil
}

// LegalEntityType pointed to by the foreign key.
func (o *UserBilling) LegalEntityType(mods ...qm.QueryMod) legalEntityTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.LegalEntityTypeID),
	}

	queryMods = append(queryMods, mods...)

	return LegalEntityTypes(queryMods...)
}

// DefaultTaxRate pointed to by the foreign key.
func (o *UserBilling) DefaultTaxRate(mods ...qm.QueryMod) taxRateQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DefaultTaxRateID),
	}

	queryMods = append(queryMods, mods...)

	return TaxRates(queryMods...)
}

// User pointed to by the foreign key.
func (o *UserBilling) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Orders retrieves all the order's Orders with an executor.
func (o *UserBilling) Orders(mods ...qm.QueryMod) orderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"orders\".\"user_billing_id\"=?", o.ID),
	)

	return Orders(queryMods...)
}

// LoadLegalEntityType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userBillingL) LoadLegalEntityType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserBilling interface{}, mods queries.Applicator) error {
	var slice []*UserBilling
	var object *UserBilling

	if singular {
		var ok bool
		object, ok = maybeUserBilling.(*UserBilling)
		if !ok {
			object = new(UserBilling)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserBilling)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserBilling))
			}
		}
	} else {
		s, ok := maybeUserBilling.(*[]*UserBilling)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserBilling)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserBilling))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userBillingR{}
		}
		args = append(args, object.LegalEntityTypeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userBillingR{}
			}

			for _, a := range args {
				if a == obj.LegalEntityTypeID {
					continue Outer
				}
			}

			args = append(args, obj.LegalEntityTypeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`legal_entity_types`),
		qm.WhereIn(`legal_entity_types.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load LegalEntityType")
	}

	var resultSlice []*LegalEntityType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice LegalEntityType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for legal_entity_types")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for legal_entity_types")
	}

	if len(legalEntityTypeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.LegalEntityType = foreign
		if foreign.R == nil {
			foreign.R = &legalEntityTypeR{}
		}
		foreign.R.UserBillings = append(foreign.R.UserBillings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LegalEntityTypeID == foreign.ID {
				local.R.LegalEntityType = foreign
				if foreign.R == nil {
					foreign.R = &legalEntityTypeR{}
				}
				foreign.R.UserBillings = append(foreign.R.UserBillings, local)
				break
			}
		}
	}

	return nil
}

// LoadDefaultTaxRate allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userBillingL) LoadDefaultTaxRate(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserBilling interface{}, mods queries.Applicator) error {
	var slice []*UserBilling
	var object *UserBilling

	if singular {
		var ok bool
		object, ok = maybeUserBilling.(*UserBilling)
		if !ok {
			object = new(UserBilling)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserBilling)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserBilling))
			}
		}
	} else {
		s, ok := maybeUserBilling.(*[]*UserBilling)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserBilling)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserBilling))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userBillingR{}
		}
		args = append(args, object.DefaultTaxRateID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userBillingR{}
			}

			for _, a := range args {
				if a == obj.DefaultTaxRateID {
					continue Outer
				}
			}

			args = append(args, obj.DefaultTaxRateID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`tax_rates`),
		qm.WhereIn(`tax_rates.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TaxRate")
	}

	var resultSlice []*TaxRate
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TaxRate")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tax_rates")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tax_rates")
	}

	if len(taxRateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DefaultTaxRate = foreign
		if foreign.R == nil {
			foreign.R = &taxRateR{}
		}
		foreign.R.DefaultTaxRateUserBillings = append(foreign.R.DefaultTaxRateUserBillings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DefaultTaxRateID == foreign.ID {
				local.R.DefaultTaxRate = foreign
				if foreign.R == nil {
					foreign.R = &taxRateR{}
				}
				foreign.R.DefaultTaxRateUserBillings = append(foreign.R.DefaultTaxRateUserBillings, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userBillingL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserBilling interface{}, mods queries.Applicator) error {
	var slice []*UserBilling
	var object *UserBilling

	if singular {
		var ok bool
		object, ok = maybeUserBilling.(*UserBilling)
		if !ok {
			object = new(UserBilling)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserBilling)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserBilling))
			}
		}
	} else {
		s, ok := maybeUserBilling.(*[]*UserBilling)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserBilling)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserBilling))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userBillingR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userBillingR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserBillings = append(foreign.R.UserBillings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserBillings = append(foreign.R.UserBillings, local)
				break
			}
		}
	}

	return nil
}

// LoadOrders allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userBillingL) LoadOrders(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserBilling interface{}, mods queries.Applicator) error {
	var slice []*UserBilling
	var object *UserBilling

	if singular {
		var ok bool
		object, ok = maybeUserBilling.(*UserBilling)
		if !ok {
			object = new(UserBilling)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserBilling)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserBilling))
			}
		}
	} else {
		s, ok := maybeUserBilling.(*[]*UserBilling)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserBilling)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserBilling))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userBillingR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userBillingR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`orders`),
		qm.WhereIn(`orders.user_billing_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load orders")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice orders")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if len(orderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Orders = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderR{}
			}
			foreign.R.UserBilling = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserBillingID {
				local.R.Orders = append(local.R.Orders, foreign)
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.UserBilling = local
				break
			}
		}
	}

	return nil
}

// SetLegalEntityType of the userBilling to the related item.
// Sets o.R.LegalEntityType to related.
// Adds o to related.R.UserBillings.
func (o *UserBilling) SetLegalEntityType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *LegalEntityType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_billings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"legal_entity_type_id"}),
		strmangle.WhereClause("\"", "\"", 2, userBillingPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LegalEntityTypeID = related.ID
	if o.R == nil {
		o.R = &userBillingR{
			LegalEntityType: related,
		}
	} else {
		o.R.LegalEntityType = related
	}

	if related.R == nil {
		related.R = &legalEntityTypeR{
			UserBillings: UserBillingSlice{o},
		}
	} else {
		related.R.UserBillings = append(related.R.UserBillings, o)
	}

	return nil
}

// SetDefaultTaxRate of the userBilling to the related item.
// Sets o.R.DefaultTaxRate to related.
// Adds o to related.R.DefaultTaxRateUserBillings.
func (o *UserBilling) SetDefaultTaxRate(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TaxRate) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_billings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"default_tax_rate_id"}),
		strmangle.WhereClause("\"", "\"", 2, userBillingPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DefaultTaxRateID = related.ID
	if o.R == nil {
		o.R = &userBillingR{
			DefaultTaxRate: related,
		}
	} else {
		o.R.DefaultTaxRate = related
	}

	if related.R == nil {
		related.R = &taxRateR{
			DefaultTaxRateUserBillings: UserBillingSlice{o},
		}
	} else {
		related.R.DefaultTaxRateUserBillings = append(related.R.DefaultTaxRateUserBillings, o)
	}

	return nil
}

// SetUser of the userBilling to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserBillings.
func (o *UserBilling) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_billings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userBillingPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userBillingR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserBillings: UserBillingSlice{o},
		}
	} else {
		related.R.UserBillings = append(related.R.UserBillings, o)
	}

	return nil
}

// AddOrders adds the given related objects to the existing relationships
// of the user_billing, optionally inserting them as new records.
// Appends related to o.R.Orders.
// Sets related.R.UserBilling appropriately.
func (o *UserBilling) AddOrders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Order) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserBillingID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"orders\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_billing_id"}),
				strmangle.WhereClause("\"", "\"", 2, orderPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserBillingID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userBillingR{
			Orders: related,
		}
	} else {
		o.R.Orders = append(o.R.Orders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderR{
				UserBilling: o,
			}
		} else {
			rel.R.UserBilling = o
		}
	}
	return nil
}

// UserBillings retrieves all the records using an executor.
func UserBillings(mods ...qm.QueryMod) userBillingQuery {
	mods = append(mods, qm.From("\"user_billings\""), qmhelper.WhereIsNull("\"user_billings\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"user_billings\".*"})
	}

	return userBillingQuery{q}
}

// FindUserBilling retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserBilling(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*UserBilling, error) {
	userBillingObj := &UserBilling{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_billings\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userBillingObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_billings")
	}

	if err = userBillingObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userBillingObj, err
	}

	return userBillingObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserBilling) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_billings provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userBillingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userBillingInsertCacheMut.RLock()
	cache, cached := userBillingInsertCache[key]
	userBillingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userBillingAllColumns,
			userBillingColumnsWithDefault,
			userBillingColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userBillingType, userBillingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userBillingType, userBillingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_billings\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_billings\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_billings")
	}

	if !cached {
		userBillingInsertCacheMut.Lock()
		userBillingInsertCache[key] = cache
		userBillingInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserBilling.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserBilling) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userBillingUpdateCacheMut.RLock()
	cache, cached := userBillingUpdateCache[key]
	userBillingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userBillingAllColumns,
			userBillingPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_billings, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_billings\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userBillingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userBillingType, userBillingMapping, append(wl, userBillingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_billings row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_billings")
	}

	if !cached {
		userBillingUpdateCacheMut.Lock()
		userBillingUpdateCache[key] = cache
		userBillingUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userBillingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_billings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_billings")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserBillingSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userBillingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_billings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userBillingPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userBilling slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userBilling")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserBilling) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_billings provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userBillingColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userBillingUpsertCacheMut.RLock()
	cache, cached := userBillingUpsertCache[key]
	userBillingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userBillingAllColumns,
			userBillingColumnsWithDefault,
			userBillingColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userBillingAllColumns,
			userBillingPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert user_billings, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userBillingPrimaryKeyColumns))
			copy(conflict, userBillingPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_billings\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userBillingType, userBillingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userBillingType, userBillingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_billings")
	}

	if !cached {
		userBillingUpsertCacheMut.Lock()
		userBillingUpsertCache[key] = cache
		userBillingUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserBilling record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserBilling) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserBilling provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userBillingPrimaryKeyMapping)
		sql = "DELETE FROM \"user_billings\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"user_billings\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(userBillingType, userBillingMapping, append(wl, userBillingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_billings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_billings")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userBillingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userBillingQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_billings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_billings")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserBillingSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userBillingBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userBillingPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"user_billings\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userBillingPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userBillingPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"user_billings\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, userBillingPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userBilling slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_billings")
	}

	if len(userBillingAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserBilling) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserBilling(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserBillingSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserBillingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userBillingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_billings\".* FROM \"user_billings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userBillingPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserBillingSlice")
	}

	*o = slice

	return nil
}

// UserBillingExists checks if the UserBilling row exists.
func UserBillingExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_billings\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_billings exists")
	}

	return exists, nil
}

// Exists checks if the UserBilling row exists.
func (o *UserBilling) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserBillingExists(ctx, exec, o.ID)
}
