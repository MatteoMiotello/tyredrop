// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PriceAdditionType is an object representing the database table.
type PriceAdditionType struct {
	ID            int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	CurrencyID    int64     `boil:"currency_id" json:"currency_id" toml:"currency_id" yaml:"currency_id"`
	AdditionType  string    `boil:"addition_type" json:"addition_type" toml:"addition_type" yaml:"addition_type"`
	AdditionName  string    `boil:"addition_name" json:"addition_name" toml:"addition_name" yaml:"addition_name"`
	AdditionCode  string    `boil:"addition_code" json:"addition_code" toml:"addition_code" yaml:"addition_code"`
	AdditionValue int       `boil:"addition_value" json:"addition_value" toml:"addition_value" yaml:"addition_value"`
	DeletedAt     null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	UpdatedAt     time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt     time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *priceAdditionTypeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L priceAdditionTypeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PriceAdditionTypeColumns = struct {
	ID            string
	CurrencyID    string
	AdditionType  string
	AdditionName  string
	AdditionCode  string
	AdditionValue string
	DeletedAt     string
	UpdatedAt     string
	CreatedAt     string
}{
	ID:            "id",
	CurrencyID:    "currency_id",
	AdditionType:  "addition_type",
	AdditionName:  "addition_name",
	AdditionCode:  "addition_code",
	AdditionValue: "addition_value",
	DeletedAt:     "deleted_at",
	UpdatedAt:     "updated_at",
	CreatedAt:     "created_at",
}

var PriceAdditionTypeTableColumns = struct {
	ID            string
	CurrencyID    string
	AdditionType  string
	AdditionName  string
	AdditionCode  string
	AdditionValue string
	DeletedAt     string
	UpdatedAt     string
	CreatedAt     string
}{
	ID:            "price_addition_types.id",
	CurrencyID:    "price_addition_types.currency_id",
	AdditionType:  "price_addition_types.addition_type",
	AdditionName:  "price_addition_types.addition_name",
	AdditionCode:  "price_addition_types.addition_code",
	AdditionValue: "price_addition_types.addition_value",
	DeletedAt:     "price_addition_types.deleted_at",
	UpdatedAt:     "price_addition_types.updated_at",
	CreatedAt:     "price_addition_types.created_at",
}

// Generated where

var PriceAdditionTypeWhere = struct {
	ID            whereHelperint64
	CurrencyID    whereHelperint64
	AdditionType  whereHelperstring
	AdditionName  whereHelperstring
	AdditionCode  whereHelperstring
	AdditionValue whereHelperint
	DeletedAt     whereHelpernull_Time
	UpdatedAt     whereHelpertime_Time
	CreatedAt     whereHelpertime_Time
}{
	ID:            whereHelperint64{field: "\"price_addition_types\".\"id\""},
	CurrencyID:    whereHelperint64{field: "\"price_addition_types\".\"currency_id\""},
	AdditionType:  whereHelperstring{field: "\"price_addition_types\".\"addition_type\""},
	AdditionName:  whereHelperstring{field: "\"price_addition_types\".\"addition_name\""},
	AdditionCode:  whereHelperstring{field: "\"price_addition_types\".\"addition_code\""},
	AdditionValue: whereHelperint{field: "\"price_addition_types\".\"addition_value\""},
	DeletedAt:     whereHelpernull_Time{field: "\"price_addition_types\".\"deleted_at\""},
	UpdatedAt:     whereHelpertime_Time{field: "\"price_addition_types\".\"updated_at\""},
	CreatedAt:     whereHelpertime_Time{field: "\"price_addition_types\".\"created_at\""},
}

// PriceAdditionTypeRels is where relationship names are stored.
var PriceAdditionTypeRels = struct {
	Currency                  string
	ProductItemPriceAdditions string
}{
	Currency:                  "Currency",
	ProductItemPriceAdditions: "ProductItemPriceAdditions",
}

// priceAdditionTypeR is where relationships are stored.
type priceAdditionTypeR struct {
	Currency                  *Currency                     `boil:"Currency" json:"Currency" toml:"Currency" yaml:"Currency"`
	ProductItemPriceAdditions ProductItemPriceAdditionSlice `boil:"ProductItemPriceAdditions" json:"ProductItemPriceAdditions" toml:"ProductItemPriceAdditions" yaml:"ProductItemPriceAdditions"`
}

// NewStruct creates a new relationship struct
func (*priceAdditionTypeR) NewStruct() *priceAdditionTypeR {
	return &priceAdditionTypeR{}
}

func (r *priceAdditionTypeR) GetCurrency() *Currency {
	if r == nil {
		return nil
	}
	return r.Currency
}

func (r *priceAdditionTypeR) GetProductItemPriceAdditions() ProductItemPriceAdditionSlice {
	if r == nil {
		return nil
	}
	return r.ProductItemPriceAdditions
}

// priceAdditionTypeL is where Load methods for each relationship are stored.
type priceAdditionTypeL struct{}

var (
	priceAdditionTypeAllColumns            = []string{"id", "currency_id", "addition_type", "addition_name", "addition_code", "addition_value", "deleted_at", "updated_at", "created_at"}
	priceAdditionTypeColumnsWithoutDefault = []string{"currency_id", "addition_type", "addition_name", "addition_code", "addition_value"}
	priceAdditionTypeColumnsWithDefault    = []string{"id", "deleted_at", "updated_at", "created_at"}
	priceAdditionTypePrimaryKeyColumns     = []string{"id"}
	priceAdditionTypeGeneratedColumns      = []string{}
)

type (
	// PriceAdditionTypeSlice is an alias for a slice of pointers to PriceAdditionType.
	// This should almost always be used instead of []PriceAdditionType.
	PriceAdditionTypeSlice []*PriceAdditionType
	// PriceAdditionTypeHook is the signature for custom PriceAdditionType hook methods
	PriceAdditionTypeHook func(context.Context, boil.ContextExecutor, *PriceAdditionType) error

	priceAdditionTypeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	priceAdditionTypeType                 = reflect.TypeOf(&PriceAdditionType{})
	priceAdditionTypeMapping              = queries.MakeStructMapping(priceAdditionTypeType)
	priceAdditionTypePrimaryKeyMapping, _ = queries.BindMapping(priceAdditionTypeType, priceAdditionTypeMapping, priceAdditionTypePrimaryKeyColumns)
	priceAdditionTypeInsertCacheMut       sync.RWMutex
	priceAdditionTypeInsertCache          = make(map[string]insertCache)
	priceAdditionTypeUpdateCacheMut       sync.RWMutex
	priceAdditionTypeUpdateCache          = make(map[string]updateCache)
	priceAdditionTypeUpsertCacheMut       sync.RWMutex
	priceAdditionTypeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var priceAdditionTypeAfterSelectHooks []PriceAdditionTypeHook

var priceAdditionTypeBeforeInsertHooks []PriceAdditionTypeHook
var priceAdditionTypeAfterInsertHooks []PriceAdditionTypeHook

var priceAdditionTypeBeforeUpdateHooks []PriceAdditionTypeHook
var priceAdditionTypeAfterUpdateHooks []PriceAdditionTypeHook

var priceAdditionTypeBeforeDeleteHooks []PriceAdditionTypeHook
var priceAdditionTypeAfterDeleteHooks []PriceAdditionTypeHook

var priceAdditionTypeBeforeUpsertHooks []PriceAdditionTypeHook
var priceAdditionTypeAfterUpsertHooks []PriceAdditionTypeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PriceAdditionType) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range priceAdditionTypeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PriceAdditionType) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range priceAdditionTypeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PriceAdditionType) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range priceAdditionTypeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PriceAdditionType) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range priceAdditionTypeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PriceAdditionType) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range priceAdditionTypeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PriceAdditionType) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range priceAdditionTypeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PriceAdditionType) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range priceAdditionTypeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PriceAdditionType) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range priceAdditionTypeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PriceAdditionType) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range priceAdditionTypeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPriceAdditionTypeHook registers your hook function for all future operations.
func AddPriceAdditionTypeHook(hookPoint boil.HookPoint, priceAdditionTypeHook PriceAdditionTypeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		priceAdditionTypeAfterSelectHooks = append(priceAdditionTypeAfterSelectHooks, priceAdditionTypeHook)
	case boil.BeforeInsertHook:
		priceAdditionTypeBeforeInsertHooks = append(priceAdditionTypeBeforeInsertHooks, priceAdditionTypeHook)
	case boil.AfterInsertHook:
		priceAdditionTypeAfterInsertHooks = append(priceAdditionTypeAfterInsertHooks, priceAdditionTypeHook)
	case boil.BeforeUpdateHook:
		priceAdditionTypeBeforeUpdateHooks = append(priceAdditionTypeBeforeUpdateHooks, priceAdditionTypeHook)
	case boil.AfterUpdateHook:
		priceAdditionTypeAfterUpdateHooks = append(priceAdditionTypeAfterUpdateHooks, priceAdditionTypeHook)
	case boil.BeforeDeleteHook:
		priceAdditionTypeBeforeDeleteHooks = append(priceAdditionTypeBeforeDeleteHooks, priceAdditionTypeHook)
	case boil.AfterDeleteHook:
		priceAdditionTypeAfterDeleteHooks = append(priceAdditionTypeAfterDeleteHooks, priceAdditionTypeHook)
	case boil.BeforeUpsertHook:
		priceAdditionTypeBeforeUpsertHooks = append(priceAdditionTypeBeforeUpsertHooks, priceAdditionTypeHook)
	case boil.AfterUpsertHook:
		priceAdditionTypeAfterUpsertHooks = append(priceAdditionTypeAfterUpsertHooks, priceAdditionTypeHook)
	}
}

// One returns a single priceAdditionType record from the query.
func (q priceAdditionTypeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PriceAdditionType, error) {
	o := &PriceAdditionType{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for price_addition_types")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PriceAdditionType records from the query.
func (q priceAdditionTypeQuery) All(ctx context.Context, exec boil.ContextExecutor) (PriceAdditionTypeSlice, error) {
	var o []*PriceAdditionType

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PriceAdditionType slice")
	}

	if len(priceAdditionTypeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PriceAdditionType records in the query.
func (q priceAdditionTypeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count price_addition_types rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q priceAdditionTypeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if price_addition_types exists")
	}

	return count > 0, nil
}

// Currency pointed to by the foreign key.
func (o *PriceAdditionType) Currency(mods ...qm.QueryMod) currencyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CurrencyID),
	}

	queryMods = append(queryMods, mods...)

	return Currencies(queryMods...)
}

// ProductItemPriceAdditions retrieves all the product_item_price_addition's ProductItemPriceAdditions with an executor.
func (o *PriceAdditionType) ProductItemPriceAdditions(mods ...qm.QueryMod) productItemPriceAdditionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"product_item_price_additions\".\"price_addition_type_id\"=?", o.ID),
	)

	return ProductItemPriceAdditions(queryMods...)
}

// LoadCurrency allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (priceAdditionTypeL) LoadCurrency(ctx context.Context, e boil.ContextExecutor, singular bool, maybePriceAdditionType interface{}, mods queries.Applicator) error {
	var slice []*PriceAdditionType
	var object *PriceAdditionType

	if singular {
		var ok bool
		object, ok = maybePriceAdditionType.(*PriceAdditionType)
		if !ok {
			object = new(PriceAdditionType)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePriceAdditionType)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePriceAdditionType))
			}
		}
	} else {
		s, ok := maybePriceAdditionType.(*[]*PriceAdditionType)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePriceAdditionType)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePriceAdditionType))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &priceAdditionTypeR{}
		}
		args = append(args, object.CurrencyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &priceAdditionTypeR{}
			}

			for _, a := range args {
				if a == obj.CurrencyID {
					continue Outer
				}
			}

			args = append(args, obj.CurrencyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`currencies`),
		qm.WhereIn(`currencies.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Currency")
	}

	var resultSlice []*Currency
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Currency")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for currencies")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for currencies")
	}

	if len(currencyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Currency = foreign
		if foreign.R == nil {
			foreign.R = &currencyR{}
		}
		foreign.R.PriceAdditionTypes = append(foreign.R.PriceAdditionTypes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CurrencyID == foreign.ID {
				local.R.Currency = foreign
				if foreign.R == nil {
					foreign.R = &currencyR{}
				}
				foreign.R.PriceAdditionTypes = append(foreign.R.PriceAdditionTypes, local)
				break
			}
		}
	}

	return nil
}

// LoadProductItemPriceAdditions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (priceAdditionTypeL) LoadProductItemPriceAdditions(ctx context.Context, e boil.ContextExecutor, singular bool, maybePriceAdditionType interface{}, mods queries.Applicator) error {
	var slice []*PriceAdditionType
	var object *PriceAdditionType

	if singular {
		var ok bool
		object, ok = maybePriceAdditionType.(*PriceAdditionType)
		if !ok {
			object = new(PriceAdditionType)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePriceAdditionType)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePriceAdditionType))
			}
		}
	} else {
		s, ok := maybePriceAdditionType.(*[]*PriceAdditionType)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePriceAdditionType)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePriceAdditionType))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &priceAdditionTypeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &priceAdditionTypeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_item_price_additions`),
		qm.WhereIn(`product_item_price_additions.price_addition_type_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load product_item_price_additions")
	}

	var resultSlice []*ProductItemPriceAddition
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice product_item_price_additions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on product_item_price_additions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_item_price_additions")
	}

	if len(productItemPriceAdditionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductItemPriceAdditions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &productItemPriceAdditionR{}
			}
			foreign.R.PriceAdditionType = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PriceAdditionTypeID {
				local.R.ProductItemPriceAdditions = append(local.R.ProductItemPriceAdditions, foreign)
				if foreign.R == nil {
					foreign.R = &productItemPriceAdditionR{}
				}
				foreign.R.PriceAdditionType = local
				break
			}
		}
	}

	return nil
}

// SetCurrency of the priceAdditionType to the related item.
// Sets o.R.Currency to related.
// Adds o to related.R.PriceAdditionTypes.
func (o *PriceAdditionType) SetCurrency(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Currency) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"price_addition_types\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"currency_id"}),
		strmangle.WhereClause("\"", "\"", 2, priceAdditionTypePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CurrencyID = related.ID
	if o.R == nil {
		o.R = &priceAdditionTypeR{
			Currency: related,
		}
	} else {
		o.R.Currency = related
	}

	if related.R == nil {
		related.R = &currencyR{
			PriceAdditionTypes: PriceAdditionTypeSlice{o},
		}
	} else {
		related.R.PriceAdditionTypes = append(related.R.PriceAdditionTypes, o)
	}

	return nil
}

// AddProductItemPriceAdditions adds the given related objects to the existing relationships
// of the price_addition_type, optionally inserting them as new records.
// Appends related to o.R.ProductItemPriceAdditions.
// Sets related.R.PriceAdditionType appropriately.
func (o *PriceAdditionType) AddProductItemPriceAdditions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProductItemPriceAddition) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PriceAdditionTypeID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"product_item_price_additions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"price_addition_type_id"}),
				strmangle.WhereClause("\"", "\"", 2, productItemPriceAdditionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PriceAdditionTypeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &priceAdditionTypeR{
			ProductItemPriceAdditions: related,
		}
	} else {
		o.R.ProductItemPriceAdditions = append(o.R.ProductItemPriceAdditions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productItemPriceAdditionR{
				PriceAdditionType: o,
			}
		} else {
			rel.R.PriceAdditionType = o
		}
	}
	return nil
}

// PriceAdditionTypes retrieves all the records using an executor.
func PriceAdditionTypes(mods ...qm.QueryMod) priceAdditionTypeQuery {
	mods = append(mods, qm.From("\"price_addition_types\""), qmhelper.WhereIsNull("\"price_addition_types\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"price_addition_types\".*"})
	}

	return priceAdditionTypeQuery{q}
}

// FindPriceAdditionType retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPriceAdditionType(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*PriceAdditionType, error) {
	priceAdditionTypeObj := &PriceAdditionType{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"price_addition_types\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, priceAdditionTypeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from price_addition_types")
	}

	if err = priceAdditionTypeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return priceAdditionTypeObj, err
	}

	return priceAdditionTypeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PriceAdditionType) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no price_addition_types provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(priceAdditionTypeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	priceAdditionTypeInsertCacheMut.RLock()
	cache, cached := priceAdditionTypeInsertCache[key]
	priceAdditionTypeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			priceAdditionTypeAllColumns,
			priceAdditionTypeColumnsWithDefault,
			priceAdditionTypeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(priceAdditionTypeType, priceAdditionTypeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(priceAdditionTypeType, priceAdditionTypeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"price_addition_types\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"price_addition_types\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into price_addition_types")
	}

	if !cached {
		priceAdditionTypeInsertCacheMut.Lock()
		priceAdditionTypeInsertCache[key] = cache
		priceAdditionTypeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PriceAdditionType.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PriceAdditionType) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	priceAdditionTypeUpdateCacheMut.RLock()
	cache, cached := priceAdditionTypeUpdateCache[key]
	priceAdditionTypeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			priceAdditionTypeAllColumns,
			priceAdditionTypePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update price_addition_types, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"price_addition_types\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, priceAdditionTypePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(priceAdditionTypeType, priceAdditionTypeMapping, append(wl, priceAdditionTypePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update price_addition_types row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for price_addition_types")
	}

	if !cached {
		priceAdditionTypeUpdateCacheMut.Lock()
		priceAdditionTypeUpdateCache[key] = cache
		priceAdditionTypeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q priceAdditionTypeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for price_addition_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for price_addition_types")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PriceAdditionTypeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), priceAdditionTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"price_addition_types\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, priceAdditionTypePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in priceAdditionType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all priceAdditionType")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PriceAdditionType) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no price_addition_types provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(priceAdditionTypeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	priceAdditionTypeUpsertCacheMut.RLock()
	cache, cached := priceAdditionTypeUpsertCache[key]
	priceAdditionTypeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			priceAdditionTypeAllColumns,
			priceAdditionTypeColumnsWithDefault,
			priceAdditionTypeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			priceAdditionTypeAllColumns,
			priceAdditionTypePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert price_addition_types, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(priceAdditionTypePrimaryKeyColumns))
			copy(conflict, priceAdditionTypePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"price_addition_types\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(priceAdditionTypeType, priceAdditionTypeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(priceAdditionTypeType, priceAdditionTypeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert price_addition_types")
	}

	if !cached {
		priceAdditionTypeUpsertCacheMut.Lock()
		priceAdditionTypeUpsertCache[key] = cache
		priceAdditionTypeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PriceAdditionType record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PriceAdditionType) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PriceAdditionType provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), priceAdditionTypePrimaryKeyMapping)
		sql = "DELETE FROM \"price_addition_types\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"price_addition_types\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(priceAdditionTypeType, priceAdditionTypeMapping, append(wl, priceAdditionTypePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from price_addition_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for price_addition_types")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q priceAdditionTypeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no priceAdditionTypeQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from price_addition_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for price_addition_types")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PriceAdditionTypeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(priceAdditionTypeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), priceAdditionTypePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"price_addition_types\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, priceAdditionTypePrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), priceAdditionTypePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"price_addition_types\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, priceAdditionTypePrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from priceAdditionType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for price_addition_types")
	}

	if len(priceAdditionTypeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PriceAdditionType) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPriceAdditionType(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PriceAdditionTypeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PriceAdditionTypeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), priceAdditionTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"price_addition_types\".* FROM \"price_addition_types\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, priceAdditionTypePrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PriceAdditionTypeSlice")
	}

	*o = slice

	return nil
}

// PriceAdditionTypeExists checks if the PriceAdditionType row exists.
func PriceAdditionTypeExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"price_addition_types\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if price_addition_types exists")
	}

	return exists, nil
}

// Exists checks if the PriceAdditionType row exists.
func (o *PriceAdditionType) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PriceAdditionTypeExists(ctx, exec, o.ID)
}
