// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProductSpecificationValue is an object representing the database table.
type ProductSpecificationValue struct {
	ID                     int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	ProductSpecificationID int64     `boil:"product_specification_id" json:"product_specification_id" toml:"product_specification_id" yaml:"product_specification_id"`
	SpecificationValue     string    `boil:"specification_value" json:"specification_value" toml:"specification_value" yaml:"specification_value"`
	DeletedAt              null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	UpdatedAt              time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt              time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *productSpecificationValueR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productSpecificationValueL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductSpecificationValueColumns = struct {
	ID                     string
	ProductSpecificationID string
	SpecificationValue     string
	DeletedAt              string
	UpdatedAt              string
	CreatedAt              string
}{
	ID:                     "id",
	ProductSpecificationID: "product_specification_id",
	SpecificationValue:     "specification_value",
	DeletedAt:              "deleted_at",
	UpdatedAt:              "updated_at",
	CreatedAt:              "created_at",
}

var ProductSpecificationValueTableColumns = struct {
	ID                     string
	ProductSpecificationID string
	SpecificationValue     string
	DeletedAt              string
	UpdatedAt              string
	CreatedAt              string
}{
	ID:                     "product_specification_values.id",
	ProductSpecificationID: "product_specification_values.product_specification_id",
	SpecificationValue:     "product_specification_values.specification_value",
	DeletedAt:              "product_specification_values.deleted_at",
	UpdatedAt:              "product_specification_values.updated_at",
	CreatedAt:              "product_specification_values.created_at",
}

// Generated where

var ProductSpecificationValueWhere = struct {
	ID                     whereHelperint64
	ProductSpecificationID whereHelperint64
	SpecificationValue     whereHelperstring
	DeletedAt              whereHelpernull_Time
	UpdatedAt              whereHelpertime_Time
	CreatedAt              whereHelpertime_Time
}{
	ID:                     whereHelperint64{field: "\"product_specification_values\".\"id\""},
	ProductSpecificationID: whereHelperint64{field: "\"product_specification_values\".\"product_specification_id\""},
	SpecificationValue:     whereHelperstring{field: "\"product_specification_values\".\"specification_value\""},
	DeletedAt:              whereHelpernull_Time{field: "\"product_specification_values\".\"deleted_at\""},
	UpdatedAt:              whereHelpertime_Time{field: "\"product_specification_values\".\"updated_at\""},
	CreatedAt:              whereHelpertime_Time{field: "\"product_specification_values\".\"created_at\""},
}

// ProductSpecificationValueRels is where relationship names are stored.
var ProductSpecificationValueRels = struct {
	ProductSpecification              string
	ProductPriceMarkups               string
	ProductProductSpecificationValues string
}{
	ProductSpecification:              "ProductSpecification",
	ProductPriceMarkups:               "ProductPriceMarkups",
	ProductProductSpecificationValues: "ProductProductSpecificationValues",
}

// productSpecificationValueR is where relationships are stored.
type productSpecificationValueR struct {
	ProductSpecification              *ProductSpecification                 `boil:"ProductSpecification" json:"ProductSpecification" toml:"ProductSpecification" yaml:"ProductSpecification"`
	ProductPriceMarkups               ProductPriceMarkupSlice               `boil:"ProductPriceMarkups" json:"ProductPriceMarkups" toml:"ProductPriceMarkups" yaml:"ProductPriceMarkups"`
	ProductProductSpecificationValues ProductProductSpecificationValueSlice `boil:"ProductProductSpecificationValues" json:"ProductProductSpecificationValues" toml:"ProductProductSpecificationValues" yaml:"ProductProductSpecificationValues"`
}

// NewStruct creates a new relationship struct
func (*productSpecificationValueR) NewStruct() *productSpecificationValueR {
	return &productSpecificationValueR{}
}

func (r *productSpecificationValueR) GetProductSpecification() *ProductSpecification {
	if r == nil {
		return nil
	}
	return r.ProductSpecification
}

func (r *productSpecificationValueR) GetProductPriceMarkups() ProductPriceMarkupSlice {
	if r == nil {
		return nil
	}
	return r.ProductPriceMarkups
}

func (r *productSpecificationValueR) GetProductProductSpecificationValues() ProductProductSpecificationValueSlice {
	if r == nil {
		return nil
	}
	return r.ProductProductSpecificationValues
}

// productSpecificationValueL is where Load methods for each relationship are stored.
type productSpecificationValueL struct{}

var (
	productSpecificationValueAllColumns            = []string{"id", "product_specification_id", "specification_value", "deleted_at", "updated_at", "created_at"}
	productSpecificationValueColumnsWithoutDefault = []string{"product_specification_id", "specification_value"}
	productSpecificationValueColumnsWithDefault    = []string{"id", "deleted_at", "updated_at", "created_at"}
	productSpecificationValuePrimaryKeyColumns     = []string{"id"}
	productSpecificationValueGeneratedColumns      = []string{}
)

type (
	// ProductSpecificationValueSlice is an alias for a slice of pointers to ProductSpecificationValue.
	// This should almost always be used instead of []ProductSpecificationValue.
	ProductSpecificationValueSlice []*ProductSpecificationValue
	// ProductSpecificationValueHook is the signature for custom ProductSpecificationValue hook methods
	ProductSpecificationValueHook func(context.Context, boil.ContextExecutor, *ProductSpecificationValue) error

	productSpecificationValueQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productSpecificationValueType                 = reflect.TypeOf(&ProductSpecificationValue{})
	productSpecificationValueMapping              = queries.MakeStructMapping(productSpecificationValueType)
	productSpecificationValuePrimaryKeyMapping, _ = queries.BindMapping(productSpecificationValueType, productSpecificationValueMapping, productSpecificationValuePrimaryKeyColumns)
	productSpecificationValueInsertCacheMut       sync.RWMutex
	productSpecificationValueInsertCache          = make(map[string]insertCache)
	productSpecificationValueUpdateCacheMut       sync.RWMutex
	productSpecificationValueUpdateCache          = make(map[string]updateCache)
	productSpecificationValueUpsertCacheMut       sync.RWMutex
	productSpecificationValueUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var productSpecificationValueAfterSelectHooks []ProductSpecificationValueHook

var productSpecificationValueBeforeInsertHooks []ProductSpecificationValueHook
var productSpecificationValueAfterInsertHooks []ProductSpecificationValueHook

var productSpecificationValueBeforeUpdateHooks []ProductSpecificationValueHook
var productSpecificationValueAfterUpdateHooks []ProductSpecificationValueHook

var productSpecificationValueBeforeDeleteHooks []ProductSpecificationValueHook
var productSpecificationValueAfterDeleteHooks []ProductSpecificationValueHook

var productSpecificationValueBeforeUpsertHooks []ProductSpecificationValueHook
var productSpecificationValueAfterUpsertHooks []ProductSpecificationValueHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProductSpecificationValue) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productSpecificationValueAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProductSpecificationValue) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productSpecificationValueBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProductSpecificationValue) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productSpecificationValueAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProductSpecificationValue) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productSpecificationValueBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProductSpecificationValue) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productSpecificationValueAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProductSpecificationValue) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productSpecificationValueBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProductSpecificationValue) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productSpecificationValueAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProductSpecificationValue) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productSpecificationValueBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProductSpecificationValue) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productSpecificationValueAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProductSpecificationValueHook registers your hook function for all future operations.
func AddProductSpecificationValueHook(hookPoint boil.HookPoint, productSpecificationValueHook ProductSpecificationValueHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		productSpecificationValueAfterSelectHooks = append(productSpecificationValueAfterSelectHooks, productSpecificationValueHook)
	case boil.BeforeInsertHook:
		productSpecificationValueBeforeInsertHooks = append(productSpecificationValueBeforeInsertHooks, productSpecificationValueHook)
	case boil.AfterInsertHook:
		productSpecificationValueAfterInsertHooks = append(productSpecificationValueAfterInsertHooks, productSpecificationValueHook)
	case boil.BeforeUpdateHook:
		productSpecificationValueBeforeUpdateHooks = append(productSpecificationValueBeforeUpdateHooks, productSpecificationValueHook)
	case boil.AfterUpdateHook:
		productSpecificationValueAfterUpdateHooks = append(productSpecificationValueAfterUpdateHooks, productSpecificationValueHook)
	case boil.BeforeDeleteHook:
		productSpecificationValueBeforeDeleteHooks = append(productSpecificationValueBeforeDeleteHooks, productSpecificationValueHook)
	case boil.AfterDeleteHook:
		productSpecificationValueAfterDeleteHooks = append(productSpecificationValueAfterDeleteHooks, productSpecificationValueHook)
	case boil.BeforeUpsertHook:
		productSpecificationValueBeforeUpsertHooks = append(productSpecificationValueBeforeUpsertHooks, productSpecificationValueHook)
	case boil.AfterUpsertHook:
		productSpecificationValueAfterUpsertHooks = append(productSpecificationValueAfterUpsertHooks, productSpecificationValueHook)
	}
}

// One returns a single productSpecificationValue record from the query.
func (q productSpecificationValueQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProductSpecificationValue, error) {
	o := &ProductSpecificationValue{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for product_specification_values")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ProductSpecificationValue records from the query.
func (q productSpecificationValueQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProductSpecificationValueSlice, error) {
	var o []*ProductSpecificationValue

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ProductSpecificationValue slice")
	}

	if len(productSpecificationValueAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ProductSpecificationValue records in the query.
func (q productSpecificationValueQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count product_specification_values rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q productSpecificationValueQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if product_specification_values exists")
	}

	return count > 0, nil
}

// ProductSpecification pointed to by the foreign key.
func (o *ProductSpecificationValue) ProductSpecification(mods ...qm.QueryMod) productSpecificationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProductSpecificationID),
	}

	queryMods = append(queryMods, mods...)

	return ProductSpecifications(queryMods...)
}

// ProductPriceMarkups retrieves all the product_price_markup's ProductPriceMarkups with an executor.
func (o *ProductSpecificationValue) ProductPriceMarkups(mods ...qm.QueryMod) productPriceMarkupQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"product_price_markup\".\"product_specification_value_id\"=?", o.ID),
	)

	return ProductPriceMarkups(queryMods...)
}

// ProductProductSpecificationValues retrieves all the product_product_specification_value's ProductProductSpecificationValues with an executor.
func (o *ProductSpecificationValue) ProductProductSpecificationValues(mods ...qm.QueryMod) productProductSpecificationValueQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"product_product_specification_values\".\"product_specification_value_id\"=?", o.ID),
	)

	return ProductProductSpecificationValues(queryMods...)
}

// LoadProductSpecification allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productSpecificationValueL) LoadProductSpecification(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductSpecificationValue interface{}, mods queries.Applicator) error {
	var slice []*ProductSpecificationValue
	var object *ProductSpecificationValue

	if singular {
		var ok bool
		object, ok = maybeProductSpecificationValue.(*ProductSpecificationValue)
		if !ok {
			object = new(ProductSpecificationValue)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductSpecificationValue)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductSpecificationValue))
			}
		}
	} else {
		s, ok := maybeProductSpecificationValue.(*[]*ProductSpecificationValue)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductSpecificationValue)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductSpecificationValue))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productSpecificationValueR{}
		}
		args = append(args, object.ProductSpecificationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productSpecificationValueR{}
			}

			for _, a := range args {
				if a == obj.ProductSpecificationID {
					continue Outer
				}
			}

			args = append(args, obj.ProductSpecificationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_specifications`),
		qm.WhereIn(`product_specifications.id in ?`, args...),
		qmhelper.WhereIsNull(`product_specifications.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ProductSpecification")
	}

	var resultSlice []*ProductSpecification
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ProductSpecification")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for product_specifications")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_specifications")
	}

	if len(productSpecificationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductSpecification = foreign
		if foreign.R == nil {
			foreign.R = &productSpecificationR{}
		}
		foreign.R.ProductSpecificationValues = append(foreign.R.ProductSpecificationValues, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductSpecificationID == foreign.ID {
				local.R.ProductSpecification = foreign
				if foreign.R == nil {
					foreign.R = &productSpecificationR{}
				}
				foreign.R.ProductSpecificationValues = append(foreign.R.ProductSpecificationValues, local)
				break
			}
		}
	}

	return nil
}

// LoadProductPriceMarkups allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productSpecificationValueL) LoadProductPriceMarkups(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductSpecificationValue interface{}, mods queries.Applicator) error {
	var slice []*ProductSpecificationValue
	var object *ProductSpecificationValue

	if singular {
		var ok bool
		object, ok = maybeProductSpecificationValue.(*ProductSpecificationValue)
		if !ok {
			object = new(ProductSpecificationValue)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductSpecificationValue)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductSpecificationValue))
			}
		}
	} else {
		s, ok := maybeProductSpecificationValue.(*[]*ProductSpecificationValue)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductSpecificationValue)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductSpecificationValue))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productSpecificationValueR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productSpecificationValueR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_price_markup`),
		qm.WhereIn(`product_price_markup.product_specification_value_id in ?`, args...),
		qmhelper.WhereIsNull(`product_price_markup.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load product_price_markup")
	}

	var resultSlice []*ProductPriceMarkup
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice product_price_markup")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on product_price_markup")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_price_markup")
	}

	if len(productPriceMarkupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductPriceMarkups = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &productPriceMarkupR{}
			}
			foreign.R.ProductSpecificationValue = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ProductSpecificationValueID) {
				local.R.ProductPriceMarkups = append(local.R.ProductPriceMarkups, foreign)
				if foreign.R == nil {
					foreign.R = &productPriceMarkupR{}
				}
				foreign.R.ProductSpecificationValue = local
				break
			}
		}
	}

	return nil
}

// LoadProductProductSpecificationValues allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productSpecificationValueL) LoadProductProductSpecificationValues(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductSpecificationValue interface{}, mods queries.Applicator) error {
	var slice []*ProductSpecificationValue
	var object *ProductSpecificationValue

	if singular {
		var ok bool
		object, ok = maybeProductSpecificationValue.(*ProductSpecificationValue)
		if !ok {
			object = new(ProductSpecificationValue)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductSpecificationValue)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductSpecificationValue))
			}
		}
	} else {
		s, ok := maybeProductSpecificationValue.(*[]*ProductSpecificationValue)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductSpecificationValue)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductSpecificationValue))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productSpecificationValueR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productSpecificationValueR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_product_specification_values`),
		qm.WhereIn(`product_product_specification_values.product_specification_value_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load product_product_specification_values")
	}

	var resultSlice []*ProductProductSpecificationValue
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice product_product_specification_values")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on product_product_specification_values")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_product_specification_values")
	}

	if len(productProductSpecificationValueAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductProductSpecificationValues = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &productProductSpecificationValueR{}
			}
			foreign.R.ProductSpecificationValue = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ProductSpecificationValueID {
				local.R.ProductProductSpecificationValues = append(local.R.ProductProductSpecificationValues, foreign)
				if foreign.R == nil {
					foreign.R = &productProductSpecificationValueR{}
				}
				foreign.R.ProductSpecificationValue = local
				break
			}
		}
	}

	return nil
}

// SetProductSpecification of the productSpecificationValue to the related item.
// Sets o.R.ProductSpecification to related.
// Adds o to related.R.ProductSpecificationValues.
func (o *ProductSpecificationValue) SetProductSpecification(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ProductSpecification) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"product_specification_values\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"product_specification_id"}),
		strmangle.WhereClause("\"", "\"", 2, productSpecificationValuePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductSpecificationID = related.ID
	if o.R == nil {
		o.R = &productSpecificationValueR{
			ProductSpecification: related,
		}
	} else {
		o.R.ProductSpecification = related
	}

	if related.R == nil {
		related.R = &productSpecificationR{
			ProductSpecificationValues: ProductSpecificationValueSlice{o},
		}
	} else {
		related.R.ProductSpecificationValues = append(related.R.ProductSpecificationValues, o)
	}

	return nil
}

// AddProductPriceMarkups adds the given related objects to the existing relationships
// of the product_specification_value, optionally inserting them as new records.
// Appends related to o.R.ProductPriceMarkups.
// Sets related.R.ProductSpecificationValue appropriately.
func (o *ProductSpecificationValue) AddProductPriceMarkups(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProductPriceMarkup) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ProductSpecificationValueID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"product_price_markup\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"product_specification_value_id"}),
				strmangle.WhereClause("\"", "\"", 2, productPriceMarkupPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ProductSpecificationValueID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &productSpecificationValueR{
			ProductPriceMarkups: related,
		}
	} else {
		o.R.ProductPriceMarkups = append(o.R.ProductPriceMarkups, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productPriceMarkupR{
				ProductSpecificationValue: o,
			}
		} else {
			rel.R.ProductSpecificationValue = o
		}
	}
	return nil
}

// SetProductPriceMarkups removes all previously related items of the
// product_specification_value replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProductSpecificationValue's ProductPriceMarkups accordingly.
// Replaces o.R.ProductPriceMarkups with related.
// Sets related.R.ProductSpecificationValue's ProductPriceMarkups accordingly.
func (o *ProductSpecificationValue) SetProductPriceMarkups(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProductPriceMarkup) error {
	query := "update \"product_price_markup\" set \"product_specification_value_id\" = null where \"product_specification_value_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ProductPriceMarkups {
			queries.SetScanner(&rel.ProductSpecificationValueID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ProductSpecificationValue = nil
		}
		o.R.ProductPriceMarkups = nil
	}

	return o.AddProductPriceMarkups(ctx, exec, insert, related...)
}

// RemoveProductPriceMarkups relationships from objects passed in.
// Removes related items from R.ProductPriceMarkups (uses pointer comparison, removal does not keep order)
// Sets related.R.ProductSpecificationValue.
func (o *ProductSpecificationValue) RemoveProductPriceMarkups(ctx context.Context, exec boil.ContextExecutor, related ...*ProductPriceMarkup) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ProductSpecificationValueID, nil)
		if rel.R != nil {
			rel.R.ProductSpecificationValue = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("product_specification_value_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductPriceMarkups {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductPriceMarkups)
			if ln > 1 && i < ln-1 {
				o.R.ProductPriceMarkups[i] = o.R.ProductPriceMarkups[ln-1]
			}
			o.R.ProductPriceMarkups = o.R.ProductPriceMarkups[:ln-1]
			break
		}
	}

	return nil
}

// AddProductProductSpecificationValues adds the given related objects to the existing relationships
// of the product_specification_value, optionally inserting them as new records.
// Appends related to o.R.ProductProductSpecificationValues.
// Sets related.R.ProductSpecificationValue appropriately.
func (o *ProductSpecificationValue) AddProductProductSpecificationValues(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProductProductSpecificationValue) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductSpecificationValueID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"product_product_specification_values\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"product_specification_value_id"}),
				strmangle.WhereClause("\"", "\"", 2, productProductSpecificationValuePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductSpecificationValueID = o.ID
		}
	}

	if o.R == nil {
		o.R = &productSpecificationValueR{
			ProductProductSpecificationValues: related,
		}
	} else {
		o.R.ProductProductSpecificationValues = append(o.R.ProductProductSpecificationValues, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productProductSpecificationValueR{
				ProductSpecificationValue: o,
			}
		} else {
			rel.R.ProductSpecificationValue = o
		}
	}
	return nil
}

// ProductSpecificationValues retrieves all the records using an executor.
func ProductSpecificationValues(mods ...qm.QueryMod) productSpecificationValueQuery {
	mods = append(mods, qm.From("\"product_specification_values\""), qmhelper.WhereIsNull("\"product_specification_values\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"product_specification_values\".*"})
	}

	return productSpecificationValueQuery{q}
}

// FindProductSpecificationValue retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProductSpecificationValue(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ProductSpecificationValue, error) {
	productSpecificationValueObj := &ProductSpecificationValue{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"product_specification_values\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, productSpecificationValueObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from product_specification_values")
	}

	if err = productSpecificationValueObj.doAfterSelectHooks(ctx, exec); err != nil {
		return productSpecificationValueObj, err
	}

	return productSpecificationValueObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProductSpecificationValue) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no product_specification_values provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productSpecificationValueColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productSpecificationValueInsertCacheMut.RLock()
	cache, cached := productSpecificationValueInsertCache[key]
	productSpecificationValueInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productSpecificationValueAllColumns,
			productSpecificationValueColumnsWithDefault,
			productSpecificationValueColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(productSpecificationValueType, productSpecificationValueMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productSpecificationValueType, productSpecificationValueMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"product_specification_values\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"product_specification_values\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into product_specification_values")
	}

	if !cached {
		productSpecificationValueInsertCacheMut.Lock()
		productSpecificationValueInsertCache[key] = cache
		productSpecificationValueInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ProductSpecificationValue.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProductSpecificationValue) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	productSpecificationValueUpdateCacheMut.RLock()
	cache, cached := productSpecificationValueUpdateCache[key]
	productSpecificationValueUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productSpecificationValueAllColumns,
			productSpecificationValuePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update product_specification_values, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"product_specification_values\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, productSpecificationValuePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productSpecificationValueType, productSpecificationValueMapping, append(wl, productSpecificationValuePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update product_specification_values row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for product_specification_values")
	}

	if !cached {
		productSpecificationValueUpdateCacheMut.Lock()
		productSpecificationValueUpdateCache[key] = cache
		productSpecificationValueUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q productSpecificationValueQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for product_specification_values")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for product_specification_values")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductSpecificationValueSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productSpecificationValuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"product_specification_values\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, productSpecificationValuePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in productSpecificationValue slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all productSpecificationValue")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProductSpecificationValue) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no product_specification_values provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productSpecificationValueColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productSpecificationValueUpsertCacheMut.RLock()
	cache, cached := productSpecificationValueUpsertCache[key]
	productSpecificationValueUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			productSpecificationValueAllColumns,
			productSpecificationValueColumnsWithDefault,
			productSpecificationValueColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			productSpecificationValueAllColumns,
			productSpecificationValuePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert product_specification_values, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(productSpecificationValuePrimaryKeyColumns))
			copy(conflict, productSpecificationValuePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"product_specification_values\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(productSpecificationValueType, productSpecificationValueMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productSpecificationValueType, productSpecificationValueMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert product_specification_values")
	}

	if !cached {
		productSpecificationValueUpsertCacheMut.Lock()
		productSpecificationValueUpsertCache[key] = cache
		productSpecificationValueUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ProductSpecificationValue record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProductSpecificationValue) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ProductSpecificationValue provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productSpecificationValuePrimaryKeyMapping)
		sql = "DELETE FROM \"product_specification_values\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"product_specification_values\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(productSpecificationValueType, productSpecificationValueMapping, append(wl, productSpecificationValuePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from product_specification_values")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for product_specification_values")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q productSpecificationValueQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no productSpecificationValueQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from product_specification_values")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for product_specification_values")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductSpecificationValueSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(productSpecificationValueBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productSpecificationValuePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"product_specification_values\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productSpecificationValuePrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productSpecificationValuePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"product_specification_values\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, productSpecificationValuePrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from productSpecificationValue slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for product_specification_values")
	}

	if len(productSpecificationValueAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProductSpecificationValue) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProductSpecificationValue(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductSpecificationValueSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductSpecificationValueSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productSpecificationValuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"product_specification_values\".* FROM \"product_specification_values\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productSpecificationValuePrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProductSpecificationValueSlice")
	}

	*o = slice

	return nil
}

// ProductSpecificationValueExists checks if the ProductSpecificationValue row exists.
func ProductSpecificationValueExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"product_specification_values\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if product_specification_values exists")
	}

	return exists, nil
}

// Exists checks if the ProductSpecificationValue row exists.
func (o *ProductSpecificationValue) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ProductSpecificationValueExists(ctx, exec, o.ID)
}
