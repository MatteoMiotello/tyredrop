// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// VehicleType is an object representing the database table.
type VehicleType struct {
	ID        int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	Code      string    `boil:"code" json:"code" toml:"code" yaml:"code"`
	DeletedAt null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *vehicleTypeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L vehicleTypeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VehicleTypeColumns = struct {
	ID        string
	Code      string
	DeletedAt string
	UpdatedAt string
	CreatedAt string
}{
	ID:        "id",
	Code:      "code",
	DeletedAt: "deleted_at",
	UpdatedAt: "updated_at",
	CreatedAt: "created_at",
}

var VehicleTypeTableColumns = struct {
	ID        string
	Code      string
	DeletedAt string
	UpdatedAt string
	CreatedAt string
}{
	ID:        "vehicle_types.id",
	Code:      "vehicle_types.code",
	DeletedAt: "vehicle_types.deleted_at",
	UpdatedAt: "vehicle_types.updated_at",
	CreatedAt: "vehicle_types.created_at",
}

// Generated where

var VehicleTypeWhere = struct {
	ID        whereHelperint64
	Code      whereHelperstring
	DeletedAt whereHelpernull_Time
	UpdatedAt whereHelpertime_Time
	CreatedAt whereHelpertime_Time
}{
	ID:        whereHelperint64{field: "\"vehicle_types\".\"id\""},
	Code:      whereHelperstring{field: "\"vehicle_types\".\"code\""},
	DeletedAt: whereHelpernull_Time{field: "\"vehicle_types\".\"deleted_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"vehicle_types\".\"updated_at\""},
	CreatedAt: whereHelpertime_Time{field: "\"vehicle_types\".\"created_at\""},
}

// VehicleTypeRels is where relationship names are stored.
var VehicleTypeRels = struct {
	Products             string
	VehicleTypeLanguages string
}{
	Products:             "Products",
	VehicleTypeLanguages: "VehicleTypeLanguages",
}

// vehicleTypeR is where relationships are stored.
type vehicleTypeR struct {
	Products             ProductSlice             `boil:"Products" json:"Products" toml:"Products" yaml:"Products"`
	VehicleTypeLanguages VehicleTypeLanguageSlice `boil:"VehicleTypeLanguages" json:"VehicleTypeLanguages" toml:"VehicleTypeLanguages" yaml:"VehicleTypeLanguages"`
}

// NewStruct creates a new relationship struct
func (*vehicleTypeR) NewStruct() *vehicleTypeR {
	return &vehicleTypeR{}
}

func (r *vehicleTypeR) GetProducts() ProductSlice {
	if r == nil {
		return nil
	}
	return r.Products
}

func (r *vehicleTypeR) GetVehicleTypeLanguages() VehicleTypeLanguageSlice {
	if r == nil {
		return nil
	}
	return r.VehicleTypeLanguages
}

// vehicleTypeL is where Load methods for each relationship are stored.
type vehicleTypeL struct{}

var (
	vehicleTypeAllColumns            = []string{"id", "code", "deleted_at", "updated_at", "created_at"}
	vehicleTypeColumnsWithoutDefault = []string{"code"}
	vehicleTypeColumnsWithDefault    = []string{"id", "deleted_at", "updated_at", "created_at"}
	vehicleTypePrimaryKeyColumns     = []string{"id"}
	vehicleTypeGeneratedColumns      = []string{}
)

type (
	// VehicleTypeSlice is an alias for a slice of pointers to VehicleType.
	// This should almost always be used instead of []VehicleType.
	VehicleTypeSlice []*VehicleType
	// VehicleTypeHook is the signature for custom VehicleType hook methods
	VehicleTypeHook func(context.Context, boil.ContextExecutor, *VehicleType) error

	vehicleTypeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	vehicleTypeType                 = reflect.TypeOf(&VehicleType{})
	vehicleTypeMapping              = queries.MakeStructMapping(vehicleTypeType)
	vehicleTypePrimaryKeyMapping, _ = queries.BindMapping(vehicleTypeType, vehicleTypeMapping, vehicleTypePrimaryKeyColumns)
	vehicleTypeInsertCacheMut       sync.RWMutex
	vehicleTypeInsertCache          = make(map[string]insertCache)
	vehicleTypeUpdateCacheMut       sync.RWMutex
	vehicleTypeUpdateCache          = make(map[string]updateCache)
	vehicleTypeUpsertCacheMut       sync.RWMutex
	vehicleTypeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var vehicleTypeAfterSelectHooks []VehicleTypeHook

var vehicleTypeBeforeInsertHooks []VehicleTypeHook
var vehicleTypeAfterInsertHooks []VehicleTypeHook

var vehicleTypeBeforeUpdateHooks []VehicleTypeHook
var vehicleTypeAfterUpdateHooks []VehicleTypeHook

var vehicleTypeBeforeDeleteHooks []VehicleTypeHook
var vehicleTypeAfterDeleteHooks []VehicleTypeHook

var vehicleTypeBeforeUpsertHooks []VehicleTypeHook
var vehicleTypeAfterUpsertHooks []VehicleTypeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *VehicleType) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleTypeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *VehicleType) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleTypeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *VehicleType) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleTypeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *VehicleType) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleTypeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *VehicleType) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleTypeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *VehicleType) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleTypeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *VehicleType) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleTypeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *VehicleType) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleTypeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *VehicleType) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vehicleTypeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVehicleTypeHook registers your hook function for all future operations.
func AddVehicleTypeHook(hookPoint boil.HookPoint, vehicleTypeHook VehicleTypeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		vehicleTypeAfterSelectHooks = append(vehicleTypeAfterSelectHooks, vehicleTypeHook)
	case boil.BeforeInsertHook:
		vehicleTypeBeforeInsertHooks = append(vehicleTypeBeforeInsertHooks, vehicleTypeHook)
	case boil.AfterInsertHook:
		vehicleTypeAfterInsertHooks = append(vehicleTypeAfterInsertHooks, vehicleTypeHook)
	case boil.BeforeUpdateHook:
		vehicleTypeBeforeUpdateHooks = append(vehicleTypeBeforeUpdateHooks, vehicleTypeHook)
	case boil.AfterUpdateHook:
		vehicleTypeAfterUpdateHooks = append(vehicleTypeAfterUpdateHooks, vehicleTypeHook)
	case boil.BeforeDeleteHook:
		vehicleTypeBeforeDeleteHooks = append(vehicleTypeBeforeDeleteHooks, vehicleTypeHook)
	case boil.AfterDeleteHook:
		vehicleTypeAfterDeleteHooks = append(vehicleTypeAfterDeleteHooks, vehicleTypeHook)
	case boil.BeforeUpsertHook:
		vehicleTypeBeforeUpsertHooks = append(vehicleTypeBeforeUpsertHooks, vehicleTypeHook)
	case boil.AfterUpsertHook:
		vehicleTypeAfterUpsertHooks = append(vehicleTypeAfterUpsertHooks, vehicleTypeHook)
	}
}

// One returns a single vehicleType record from the query.
func (q vehicleTypeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*VehicleType, error) {
	o := &VehicleType{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for vehicle_types")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all VehicleType records from the query.
func (q vehicleTypeQuery) All(ctx context.Context, exec boil.ContextExecutor) (VehicleTypeSlice, error) {
	var o []*VehicleType

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to VehicleType slice")
	}

	if len(vehicleTypeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all VehicleType records in the query.
func (q vehicleTypeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count vehicle_types rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q vehicleTypeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if vehicle_types exists")
	}

	return count > 0, nil
}

// Products retrieves all the product's Products with an executor.
func (o *VehicleType) Products(mods ...qm.QueryMod) productQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"products\".\"vehicle_type_id\"=?", o.ID),
	)

	return Products(queryMods...)
}

// VehicleTypeLanguages retrieves all the vehicle_type_language's VehicleTypeLanguages with an executor.
func (o *VehicleType) VehicleTypeLanguages(mods ...qm.QueryMod) vehicleTypeLanguageQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"vehicle_type_languages\".\"vehicle_type_id\"=?", o.ID),
	)

	return VehicleTypeLanguages(queryMods...)
}

// LoadProducts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (vehicleTypeL) LoadProducts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVehicleType interface{}, mods queries.Applicator) error {
	var slice []*VehicleType
	var object *VehicleType

	if singular {
		var ok bool
		object, ok = maybeVehicleType.(*VehicleType)
		if !ok {
			object = new(VehicleType)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVehicleType)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVehicleType))
			}
		}
	} else {
		s, ok := maybeVehicleType.(*[]*VehicleType)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVehicleType)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVehicleType))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &vehicleTypeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &vehicleTypeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`products`),
		qm.WhereIn(`products.vehicle_type_id in ?`, args...),
		qmhelper.WhereIsNull(`products.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load products")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice products")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Products = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &productR{}
			}
			foreign.R.VehicleType = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.VehicleTypeID {
				local.R.Products = append(local.R.Products, foreign)
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.VehicleType = local
				break
			}
		}
	}

	return nil
}

// LoadVehicleTypeLanguages allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (vehicleTypeL) LoadVehicleTypeLanguages(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVehicleType interface{}, mods queries.Applicator) error {
	var slice []*VehicleType
	var object *VehicleType

	if singular {
		var ok bool
		object, ok = maybeVehicleType.(*VehicleType)
		if !ok {
			object = new(VehicleType)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVehicleType)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVehicleType))
			}
		}
	} else {
		s, ok := maybeVehicleType.(*[]*VehicleType)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVehicleType)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVehicleType))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &vehicleTypeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &vehicleTypeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`vehicle_type_languages`),
		qm.WhereIn(`vehicle_type_languages.vehicle_type_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load vehicle_type_languages")
	}

	var resultSlice []*VehicleTypeLanguage
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice vehicle_type_languages")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on vehicle_type_languages")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for vehicle_type_languages")
	}

	if len(vehicleTypeLanguageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.VehicleTypeLanguages = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &vehicleTypeLanguageR{}
			}
			foreign.R.VehicleType = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.VehicleTypeID {
				local.R.VehicleTypeLanguages = append(local.R.VehicleTypeLanguages, foreign)
				if foreign.R == nil {
					foreign.R = &vehicleTypeLanguageR{}
				}
				foreign.R.VehicleType = local
				break
			}
		}
	}

	return nil
}

// AddProducts adds the given related objects to the existing relationships
// of the vehicle_type, optionally inserting them as new records.
// Appends related to o.R.Products.
// Sets related.R.VehicleType appropriately.
func (o *VehicleType) AddProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Product) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.VehicleTypeID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"products\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"vehicle_type_id"}),
				strmangle.WhereClause("\"", "\"", 2, productPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.VehicleTypeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &vehicleTypeR{
			Products: related,
		}
	} else {
		o.R.Products = append(o.R.Products, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productR{
				VehicleType: o,
			}
		} else {
			rel.R.VehicleType = o
		}
	}
	return nil
}

// AddVehicleTypeLanguages adds the given related objects to the existing relationships
// of the vehicle_type, optionally inserting them as new records.
// Appends related to o.R.VehicleTypeLanguages.
// Sets related.R.VehicleType appropriately.
func (o *VehicleType) AddVehicleTypeLanguages(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*VehicleTypeLanguage) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.VehicleTypeID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"vehicle_type_languages\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"vehicle_type_id"}),
				strmangle.WhereClause("\"", "\"", 2, vehicleTypeLanguagePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.VehicleTypeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &vehicleTypeR{
			VehicleTypeLanguages: related,
		}
	} else {
		o.R.VehicleTypeLanguages = append(o.R.VehicleTypeLanguages, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &vehicleTypeLanguageR{
				VehicleType: o,
			}
		} else {
			rel.R.VehicleType = o
		}
	}
	return nil
}

// VehicleTypes retrieves all the records using an executor.
func VehicleTypes(mods ...qm.QueryMod) vehicleTypeQuery {
	mods = append(mods, qm.From("\"vehicle_types\""), qmhelper.WhereIsNull("\"vehicle_types\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"vehicle_types\".*"})
	}

	return vehicleTypeQuery{q}
}

// FindVehicleType retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVehicleType(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*VehicleType, error) {
	vehicleTypeObj := &VehicleType{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"vehicle_types\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, vehicleTypeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from vehicle_types")
	}

	if err = vehicleTypeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return vehicleTypeObj, err
	}

	return vehicleTypeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *VehicleType) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no vehicle_types provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(vehicleTypeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	vehicleTypeInsertCacheMut.RLock()
	cache, cached := vehicleTypeInsertCache[key]
	vehicleTypeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			vehicleTypeAllColumns,
			vehicleTypeColumnsWithDefault,
			vehicleTypeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(vehicleTypeType, vehicleTypeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(vehicleTypeType, vehicleTypeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"vehicle_types\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"vehicle_types\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into vehicle_types")
	}

	if !cached {
		vehicleTypeInsertCacheMut.Lock()
		vehicleTypeInsertCache[key] = cache
		vehicleTypeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the VehicleType.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *VehicleType) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	vehicleTypeUpdateCacheMut.RLock()
	cache, cached := vehicleTypeUpdateCache[key]
	vehicleTypeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			vehicleTypeAllColumns,
			vehicleTypePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update vehicle_types, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"vehicle_types\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, vehicleTypePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(vehicleTypeType, vehicleTypeMapping, append(wl, vehicleTypePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update vehicle_types row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for vehicle_types")
	}

	if !cached {
		vehicleTypeUpdateCacheMut.Lock()
		vehicleTypeUpdateCache[key] = cache
		vehicleTypeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q vehicleTypeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for vehicle_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for vehicle_types")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VehicleTypeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vehicleTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"vehicle_types\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, vehicleTypePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in vehicleType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all vehicleType")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *VehicleType) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no vehicle_types provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(vehicleTypeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	vehicleTypeUpsertCacheMut.RLock()
	cache, cached := vehicleTypeUpsertCache[key]
	vehicleTypeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			vehicleTypeAllColumns,
			vehicleTypeColumnsWithDefault,
			vehicleTypeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			vehicleTypeAllColumns,
			vehicleTypePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert vehicle_types, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(vehicleTypePrimaryKeyColumns))
			copy(conflict, vehicleTypePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"vehicle_types\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(vehicleTypeType, vehicleTypeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(vehicleTypeType, vehicleTypeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert vehicle_types")
	}

	if !cached {
		vehicleTypeUpsertCacheMut.Lock()
		vehicleTypeUpsertCache[key] = cache
		vehicleTypeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single VehicleType record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *VehicleType) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no VehicleType provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), vehicleTypePrimaryKeyMapping)
		sql = "DELETE FROM \"vehicle_types\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"vehicle_types\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(vehicleTypeType, vehicleTypeMapping, append(wl, vehicleTypePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from vehicle_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for vehicle_types")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q vehicleTypeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no vehicleTypeQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from vehicle_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for vehicle_types")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VehicleTypeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(vehicleTypeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vehicleTypePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"vehicle_types\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vehicleTypePrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vehicleTypePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"vehicle_types\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, vehicleTypePrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from vehicleType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for vehicle_types")
	}

	if len(vehicleTypeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *VehicleType) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVehicleType(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VehicleTypeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VehicleTypeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vehicleTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"vehicle_types\".* FROM \"vehicle_types\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vehicleTypePrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in VehicleTypeSlice")
	}

	*o = slice

	return nil
}

// VehicleTypeExists checks if the VehicleType row exists.
func VehicleTypeExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"vehicle_types\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if vehicle_types exists")
	}

	return exists, nil
}

// Exists checks if the VehicleType row exists.
func (o *VehicleType) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return VehicleTypeExists(ctx, exec, o.ID)
}
