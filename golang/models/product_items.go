// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProductItem is an object representing the database table.
type ProductItem struct {
	ID               int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	ProductID        int64     `boil:"product_id" json:"product_id" toml:"product_id" yaml:"product_id"`
	SupplierID       int64     `boil:"supplier_id" json:"supplier_id" toml:"supplier_id" yaml:"supplier_id"`
	SupplierPrice    int       `boil:"supplier_price" json:"supplier_price" toml:"supplier_price" yaml:"supplier_price"`
	SupplierQuantity int       `boil:"supplier_quantity" json:"supplier_quantity" toml:"supplier_quantity" yaml:"supplier_quantity"`
	DeletedAt        null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	UpdatedAt        time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt        time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *productItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductItemColumns = struct {
	ID               string
	ProductID        string
	SupplierID       string
	SupplierPrice    string
	SupplierQuantity string
	DeletedAt        string
	UpdatedAt        string
	CreatedAt        string
}{
	ID:               "id",
	ProductID:        "product_id",
	SupplierID:       "supplier_id",
	SupplierPrice:    "supplier_price",
	SupplierQuantity: "supplier_quantity",
	DeletedAt:        "deleted_at",
	UpdatedAt:        "updated_at",
	CreatedAt:        "created_at",
}

var ProductItemTableColumns = struct {
	ID               string
	ProductID        string
	SupplierID       string
	SupplierPrice    string
	SupplierQuantity string
	DeletedAt        string
	UpdatedAt        string
	CreatedAt        string
}{
	ID:               "product_items.id",
	ProductID:        "product_items.product_id",
	SupplierID:       "product_items.supplier_id",
	SupplierPrice:    "product_items.supplier_price",
	SupplierQuantity: "product_items.supplier_quantity",
	DeletedAt:        "product_items.deleted_at",
	UpdatedAt:        "product_items.updated_at",
	CreatedAt:        "product_items.created_at",
}

// Generated where

var ProductItemWhere = struct {
	ID               whereHelperint64
	ProductID        whereHelperint64
	SupplierID       whereHelperint64
	SupplierPrice    whereHelperint
	SupplierQuantity whereHelperint
	DeletedAt        whereHelpernull_Time
	UpdatedAt        whereHelpertime_Time
	CreatedAt        whereHelpertime_Time
}{
	ID:               whereHelperint64{field: "\"product_items\".\"id\""},
	ProductID:        whereHelperint64{field: "\"product_items\".\"product_id\""},
	SupplierID:       whereHelperint64{field: "\"product_items\".\"supplier_id\""},
	SupplierPrice:    whereHelperint{field: "\"product_items\".\"supplier_price\""},
	SupplierQuantity: whereHelperint{field: "\"product_items\".\"supplier_quantity\""},
	DeletedAt:        whereHelpernull_Time{field: "\"product_items\".\"deleted_at\""},
	UpdatedAt:        whereHelpertime_Time{field: "\"product_items\".\"updated_at\""},
	CreatedAt:        whereHelpertime_Time{field: "\"product_items\".\"created_at\""},
}

// ProductItemRels is where relationship names are stored.
var ProductItemRels = struct {
	Product           string
	Supplier          string
	ProductItemPrices string
}{
	Product:           "Product",
	Supplier:          "Supplier",
	ProductItemPrices: "ProductItemPrices",
}

// productItemR is where relationships are stored.
type productItemR struct {
	Product           *Product              `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	Supplier          *Supplier             `boil:"Supplier" json:"Supplier" toml:"Supplier" yaml:"Supplier"`
	ProductItemPrices ProductItemPriceSlice `boil:"ProductItemPrices" json:"ProductItemPrices" toml:"ProductItemPrices" yaml:"ProductItemPrices"`
}

// NewStruct creates a new relationship struct
func (*productItemR) NewStruct() *productItemR {
	return &productItemR{}
}

func (r *productItemR) GetProduct() *Product {
	if r == nil {
		return nil
	}
	return r.Product
}

func (r *productItemR) GetSupplier() *Supplier {
	if r == nil {
		return nil
	}
	return r.Supplier
}

func (r *productItemR) GetProductItemPrices() ProductItemPriceSlice {
	if r == nil {
		return nil
	}
	return r.ProductItemPrices
}

// productItemL is where Load methods for each relationship are stored.
type productItemL struct{}

var (
	productItemAllColumns            = []string{"id", "product_id", "supplier_id", "supplier_price", "supplier_quantity", "deleted_at", "updated_at", "created_at"}
	productItemColumnsWithoutDefault = []string{"product_id", "supplier_id", "supplier_price", "supplier_quantity"}
	productItemColumnsWithDefault    = []string{"id", "deleted_at", "updated_at", "created_at"}
	productItemPrimaryKeyColumns     = []string{"id"}
	productItemGeneratedColumns      = []string{}
)

type (
	// ProductItemSlice is an alias for a slice of pointers to ProductItem.
	// This should almost always be used instead of []ProductItem.
	ProductItemSlice []*ProductItem
	// ProductItemHook is the signature for custom ProductItem hook methods
	ProductItemHook func(context.Context, boil.ContextExecutor, *ProductItem) error

	productItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productItemType                 = reflect.TypeOf(&ProductItem{})
	productItemMapping              = queries.MakeStructMapping(productItemType)
	productItemPrimaryKeyMapping, _ = queries.BindMapping(productItemType, productItemMapping, productItemPrimaryKeyColumns)
	productItemInsertCacheMut       sync.RWMutex
	productItemInsertCache          = make(map[string]insertCache)
	productItemUpdateCacheMut       sync.RWMutex
	productItemUpdateCache          = make(map[string]updateCache)
	productItemUpsertCacheMut       sync.RWMutex
	productItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var productItemAfterSelectHooks []ProductItemHook

var productItemBeforeInsertHooks []ProductItemHook
var productItemAfterInsertHooks []ProductItemHook

var productItemBeforeUpdateHooks []ProductItemHook
var productItemAfterUpdateHooks []ProductItemHook

var productItemBeforeDeleteHooks []ProductItemHook
var productItemAfterDeleteHooks []ProductItemHook

var productItemBeforeUpsertHooks []ProductItemHook
var productItemAfterUpsertHooks []ProductItemHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProductItem) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productItemAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProductItem) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productItemBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProductItem) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productItemAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProductItem) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productItemBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProductItem) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productItemAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProductItem) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productItemBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProductItem) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productItemAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProductItem) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productItemBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProductItem) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productItemAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProductItemHook registers your hook function for all future operations.
func AddProductItemHook(hookPoint boil.HookPoint, productItemHook ProductItemHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		productItemAfterSelectHooks = append(productItemAfterSelectHooks, productItemHook)
	case boil.BeforeInsertHook:
		productItemBeforeInsertHooks = append(productItemBeforeInsertHooks, productItemHook)
	case boil.AfterInsertHook:
		productItemAfterInsertHooks = append(productItemAfterInsertHooks, productItemHook)
	case boil.BeforeUpdateHook:
		productItemBeforeUpdateHooks = append(productItemBeforeUpdateHooks, productItemHook)
	case boil.AfterUpdateHook:
		productItemAfterUpdateHooks = append(productItemAfterUpdateHooks, productItemHook)
	case boil.BeforeDeleteHook:
		productItemBeforeDeleteHooks = append(productItemBeforeDeleteHooks, productItemHook)
	case boil.AfterDeleteHook:
		productItemAfterDeleteHooks = append(productItemAfterDeleteHooks, productItemHook)
	case boil.BeforeUpsertHook:
		productItemBeforeUpsertHooks = append(productItemBeforeUpsertHooks, productItemHook)
	case boil.AfterUpsertHook:
		productItemAfterUpsertHooks = append(productItemAfterUpsertHooks, productItemHook)
	}
}

// One returns a single productItem record from the query.
func (q productItemQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProductItem, error) {
	o := &ProductItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for product_items")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ProductItem records from the query.
func (q productItemQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProductItemSlice, error) {
	var o []*ProductItem

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ProductItem slice")
	}

	if len(productItemAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ProductItem records in the query.
func (q productItemQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count product_items rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q productItemQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if product_items exists")
	}

	return count > 0, nil
}

// Product pointed to by the foreign key.
func (o *ProductItem) Product(mods ...qm.QueryMod) productQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProductID),
	}

	queryMods = append(queryMods, mods...)

	return Products(queryMods...)
}

// Supplier pointed to by the foreign key.
func (o *ProductItem) Supplier(mods ...qm.QueryMod) supplierQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SupplierID),
	}

	queryMods = append(queryMods, mods...)

	return Suppliers(queryMods...)
}

// ProductItemPrices retrieves all the product_item_price's ProductItemPrices with an executor.
func (o *ProductItem) ProductItemPrices(mods ...qm.QueryMod) productItemPriceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"product_item_prices\".\"product_item_id\"=?", o.ID),
	)

	return ProductItemPrices(queryMods...)
}

// LoadProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productItemL) LoadProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductItem interface{}, mods queries.Applicator) error {
	var slice []*ProductItem
	var object *ProductItem

	if singular {
		var ok bool
		object, ok = maybeProductItem.(*ProductItem)
		if !ok {
			object = new(ProductItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductItem))
			}
		}
	} else {
		s, ok := maybeProductItem.(*[]*ProductItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductItem))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productItemR{}
		}
		args = append(args, object.ProductID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productItemR{}
			}

			for _, a := range args {
				if a == obj.ProductID {
					continue Outer
				}
			}

			args = append(args, obj.ProductID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`products`),
		qm.WhereIn(`products.id in ?`, args...),
		qmhelper.WhereIsNull(`products.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Product")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Product")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Product = foreign
		if foreign.R == nil {
			foreign.R = &productR{}
		}
		foreign.R.ProductItems = append(foreign.R.ProductItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductID == foreign.ID {
				local.R.Product = foreign
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.ProductItems = append(foreign.R.ProductItems, local)
				break
			}
		}
	}

	return nil
}

// LoadSupplier allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productItemL) LoadSupplier(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductItem interface{}, mods queries.Applicator) error {
	var slice []*ProductItem
	var object *ProductItem

	if singular {
		var ok bool
		object, ok = maybeProductItem.(*ProductItem)
		if !ok {
			object = new(ProductItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductItem))
			}
		}
	} else {
		s, ok := maybeProductItem.(*[]*ProductItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductItem))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productItemR{}
		}
		args = append(args, object.SupplierID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productItemR{}
			}

			for _, a := range args {
				if a == obj.SupplierID {
					continue Outer
				}
			}

			args = append(args, obj.SupplierID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`suppliers`),
		qm.WhereIn(`suppliers.id in ?`, args...),
		qmhelper.WhereIsNull(`suppliers.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Supplier")
	}

	var resultSlice []*Supplier
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Supplier")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for suppliers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for suppliers")
	}

	if len(supplierAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Supplier = foreign
		if foreign.R == nil {
			foreign.R = &supplierR{}
		}
		foreign.R.ProductItems = append(foreign.R.ProductItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SupplierID == foreign.ID {
				local.R.Supplier = foreign
				if foreign.R == nil {
					foreign.R = &supplierR{}
				}
				foreign.R.ProductItems = append(foreign.R.ProductItems, local)
				break
			}
		}
	}

	return nil
}

// LoadProductItemPrices allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productItemL) LoadProductItemPrices(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductItem interface{}, mods queries.Applicator) error {
	var slice []*ProductItem
	var object *ProductItem

	if singular {
		var ok bool
		object, ok = maybeProductItem.(*ProductItem)
		if !ok {
			object = new(ProductItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductItem))
			}
		}
	} else {
		s, ok := maybeProductItem.(*[]*ProductItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductItem))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productItemR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productItemR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_item_prices`),
		qm.WhereIn(`product_item_prices.product_item_id in ?`, args...),
		qmhelper.WhereIsNull(`product_item_prices.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load product_item_prices")
	}

	var resultSlice []*ProductItemPrice
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice product_item_prices")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on product_item_prices")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_item_prices")
	}

	if len(productItemPriceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductItemPrices = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &productItemPriceR{}
			}
			foreign.R.ProductItem = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ProductItemID {
				local.R.ProductItemPrices = append(local.R.ProductItemPrices, foreign)
				if foreign.R == nil {
					foreign.R = &productItemPriceR{}
				}
				foreign.R.ProductItem = local
				break
			}
		}
	}

	return nil
}

// SetProduct of the productItem to the related item.
// Sets o.R.Product to related.
// Adds o to related.R.ProductItems.
func (o *ProductItem) SetProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Product) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"product_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"product_id"}),
		strmangle.WhereClause("\"", "\"", 2, productItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductID = related.ID
	if o.R == nil {
		o.R = &productItemR{
			Product: related,
		}
	} else {
		o.R.Product = related
	}

	if related.R == nil {
		related.R = &productR{
			ProductItems: ProductItemSlice{o},
		}
	} else {
		related.R.ProductItems = append(related.R.ProductItems, o)
	}

	return nil
}

// SetSupplier of the productItem to the related item.
// Sets o.R.Supplier to related.
// Adds o to related.R.ProductItems.
func (o *ProductItem) SetSupplier(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Supplier) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"product_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"supplier_id"}),
		strmangle.WhereClause("\"", "\"", 2, productItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SupplierID = related.ID
	if o.R == nil {
		o.R = &productItemR{
			Supplier: related,
		}
	} else {
		o.R.Supplier = related
	}

	if related.R == nil {
		related.R = &supplierR{
			ProductItems: ProductItemSlice{o},
		}
	} else {
		related.R.ProductItems = append(related.R.ProductItems, o)
	}

	return nil
}

// AddProductItemPrices adds the given related objects to the existing relationships
// of the product_item, optionally inserting them as new records.
// Appends related to o.R.ProductItemPrices.
// Sets related.R.ProductItem appropriately.
func (o *ProductItem) AddProductItemPrices(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProductItemPrice) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductItemID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"product_item_prices\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"product_item_id"}),
				strmangle.WhereClause("\"", "\"", 2, productItemPricePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductItemID = o.ID
		}
	}

	if o.R == nil {
		o.R = &productItemR{
			ProductItemPrices: related,
		}
	} else {
		o.R.ProductItemPrices = append(o.R.ProductItemPrices, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productItemPriceR{
				ProductItem: o,
			}
		} else {
			rel.R.ProductItem = o
		}
	}
	return nil
}

// ProductItems retrieves all the records using an executor.
func ProductItems(mods ...qm.QueryMod) productItemQuery {
	mods = append(mods, qm.From("\"product_items\""), qmhelper.WhereIsNull("\"product_items\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"product_items\".*"})
	}

	return productItemQuery{q}
}

// FindProductItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProductItem(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ProductItem, error) {
	productItemObj := &ProductItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"product_items\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, productItemObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from product_items")
	}

	if err = productItemObj.doAfterSelectHooks(ctx, exec); err != nil {
		return productItemObj, err
	}

	return productItemObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProductItem) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no product_items provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productItemInsertCacheMut.RLock()
	cache, cached := productItemInsertCache[key]
	productItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productItemAllColumns,
			productItemColumnsWithDefault,
			productItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(productItemType, productItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productItemType, productItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"product_items\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"product_items\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into product_items")
	}

	if !cached {
		productItemInsertCacheMut.Lock()
		productItemInsertCache[key] = cache
		productItemInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ProductItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProductItem) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	productItemUpdateCacheMut.RLock()
	cache, cached := productItemUpdateCache[key]
	productItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productItemAllColumns,
			productItemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update product_items, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"product_items\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, productItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productItemType, productItemMapping, append(wl, productItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update product_items row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for product_items")
	}

	if !cached {
		productItemUpdateCacheMut.Lock()
		productItemUpdateCache[key] = cache
		productItemUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q productItemQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for product_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for product_items")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductItemSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"product_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, productItemPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in productItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all productItem")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProductItem) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no product_items provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productItemColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productItemUpsertCacheMut.RLock()
	cache, cached := productItemUpsertCache[key]
	productItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			productItemAllColumns,
			productItemColumnsWithDefault,
			productItemColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			productItemAllColumns,
			productItemPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert product_items, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(productItemPrimaryKeyColumns))
			copy(conflict, productItemPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"product_items\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(productItemType, productItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productItemType, productItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert product_items")
	}

	if !cached {
		productItemUpsertCacheMut.Lock()
		productItemUpsertCache[key] = cache
		productItemUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ProductItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProductItem) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ProductItem provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productItemPrimaryKeyMapping)
		sql = "DELETE FROM \"product_items\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"product_items\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(productItemType, productItemMapping, append(wl, productItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from product_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for product_items")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q productItemQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no productItemQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from product_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for product_items")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductItemSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(productItemBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productItemPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"product_items\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productItemPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productItemPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"product_items\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, productItemPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from productItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for product_items")
	}

	if len(productItemAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProductItem) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProductItem(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductItemSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"product_items\".* FROM \"product_items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productItemPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProductItemSlice")
	}

	*o = slice

	return nil
}

// ProductItemExists checks if the ProductItem row exists.
func ProductItemExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"product_items\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if product_items exists")
	}

	return exists, nil
}

// Exists checks if the ProductItem row exists.
func (o *ProductItem) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ProductItemExists(ctx, exec, o.ID)
}
