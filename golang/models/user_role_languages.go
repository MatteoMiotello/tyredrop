// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserRoleLanguage is an object representing the database table.
type UserRoleLanguage struct {
	ID         int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	LanguageID int64     `boil:"language_id" json:"language_id" toml:"language_id" yaml:"language_id"`
	UserRoleID int64     `boil:"user_role_id" json:"user_role_id" toml:"user_role_id" yaml:"user_role_id"`
	Name       string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	CreatedAt  time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *userRoleLanguageR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userRoleLanguageL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserRoleLanguageColumns = struct {
	ID         string
	LanguageID string
	UserRoleID string
	Name       string
	CreatedAt  string
}{
	ID:         "id",
	LanguageID: "language_id",
	UserRoleID: "user_role_id",
	Name:       "name",
	CreatedAt:  "created_at",
}

var UserRoleLanguageTableColumns = struct {
	ID         string
	LanguageID string
	UserRoleID string
	Name       string
	CreatedAt  string
}{
	ID:         "user_role_languages.id",
	LanguageID: "user_role_languages.language_id",
	UserRoleID: "user_role_languages.user_role_id",
	Name:       "user_role_languages.name",
	CreatedAt:  "user_role_languages.created_at",
}

// Generated where

var UserRoleLanguageWhere = struct {
	ID         whereHelperint64
	LanguageID whereHelperint64
	UserRoleID whereHelperint64
	Name       whereHelperstring
	CreatedAt  whereHelpertime_Time
}{
	ID:         whereHelperint64{field: "\"user_role_languages\".\"id\""},
	LanguageID: whereHelperint64{field: "\"user_role_languages\".\"language_id\""},
	UserRoleID: whereHelperint64{field: "\"user_role_languages\".\"user_role_id\""},
	Name:       whereHelperstring{field: "\"user_role_languages\".\"name\""},
	CreatedAt:  whereHelpertime_Time{field: "\"user_role_languages\".\"created_at\""},
}

// UserRoleLanguageRels is where relationship names are stored.
var UserRoleLanguageRels = struct {
	Language string
	UserRole string
}{
	Language: "Language",
	UserRole: "UserRole",
}

// userRoleLanguageR is where relationships are stored.
type userRoleLanguageR struct {
	Language *Language `boil:"Language" json:"Language" toml:"Language" yaml:"Language"`
	UserRole *UserRole `boil:"UserRole" json:"UserRole" toml:"UserRole" yaml:"UserRole"`
}

// NewStruct creates a new relationship struct
func (*userRoleLanguageR) NewStruct() *userRoleLanguageR {
	return &userRoleLanguageR{}
}

func (r *userRoleLanguageR) GetLanguage() *Language {
	if r == nil {
		return nil
	}
	return r.Language
}

func (r *userRoleLanguageR) GetUserRole() *UserRole {
	if r == nil {
		return nil
	}
	return r.UserRole
}

// userRoleLanguageL is where Load methods for each relationship are stored.
type userRoleLanguageL struct{}

var (
	userRoleLanguageAllColumns            = []string{"id", "language_id", "user_role_id", "name", "created_at"}
	userRoleLanguageColumnsWithoutDefault = []string{"language_id", "user_role_id", "name"}
	userRoleLanguageColumnsWithDefault    = []string{"id", "created_at"}
	userRoleLanguagePrimaryKeyColumns     = []string{"id"}
	userRoleLanguageGeneratedColumns      = []string{}
)

type (
	// UserRoleLanguageSlice is an alias for a slice of pointers to UserRoleLanguage.
	// This should almost always be used instead of []UserRoleLanguage.
	UserRoleLanguageSlice []*UserRoleLanguage
	// UserRoleLanguageHook is the signature for custom UserRoleLanguage hook methods
	UserRoleLanguageHook func(context.Context, boil.ContextExecutor, *UserRoleLanguage) error

	userRoleLanguageQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userRoleLanguageType                 = reflect.TypeOf(&UserRoleLanguage{})
	userRoleLanguageMapping              = queries.MakeStructMapping(userRoleLanguageType)
	userRoleLanguagePrimaryKeyMapping, _ = queries.BindMapping(userRoleLanguageType, userRoleLanguageMapping, userRoleLanguagePrimaryKeyColumns)
	userRoleLanguageInsertCacheMut       sync.RWMutex
	userRoleLanguageInsertCache          = make(map[string]insertCache)
	userRoleLanguageUpdateCacheMut       sync.RWMutex
	userRoleLanguageUpdateCache          = make(map[string]updateCache)
	userRoleLanguageUpsertCacheMut       sync.RWMutex
	userRoleLanguageUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userRoleLanguageAfterSelectHooks []UserRoleLanguageHook

var userRoleLanguageBeforeInsertHooks []UserRoleLanguageHook
var userRoleLanguageAfterInsertHooks []UserRoleLanguageHook

var userRoleLanguageBeforeUpdateHooks []UserRoleLanguageHook
var userRoleLanguageAfterUpdateHooks []UserRoleLanguageHook

var userRoleLanguageBeforeDeleteHooks []UserRoleLanguageHook
var userRoleLanguageAfterDeleteHooks []UserRoleLanguageHook

var userRoleLanguageBeforeUpsertHooks []UserRoleLanguageHook
var userRoleLanguageAfterUpsertHooks []UserRoleLanguageHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserRoleLanguage) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userRoleLanguageAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserRoleLanguage) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userRoleLanguageBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserRoleLanguage) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userRoleLanguageAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserRoleLanguage) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userRoleLanguageBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserRoleLanguage) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userRoleLanguageAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserRoleLanguage) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userRoleLanguageBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserRoleLanguage) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userRoleLanguageAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserRoleLanguage) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userRoleLanguageBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserRoleLanguage) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userRoleLanguageAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserRoleLanguageHook registers your hook function for all future operations.
func AddUserRoleLanguageHook(hookPoint boil.HookPoint, userRoleLanguageHook UserRoleLanguageHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userRoleLanguageAfterSelectHooks = append(userRoleLanguageAfterSelectHooks, userRoleLanguageHook)
	case boil.BeforeInsertHook:
		userRoleLanguageBeforeInsertHooks = append(userRoleLanguageBeforeInsertHooks, userRoleLanguageHook)
	case boil.AfterInsertHook:
		userRoleLanguageAfterInsertHooks = append(userRoleLanguageAfterInsertHooks, userRoleLanguageHook)
	case boil.BeforeUpdateHook:
		userRoleLanguageBeforeUpdateHooks = append(userRoleLanguageBeforeUpdateHooks, userRoleLanguageHook)
	case boil.AfterUpdateHook:
		userRoleLanguageAfterUpdateHooks = append(userRoleLanguageAfterUpdateHooks, userRoleLanguageHook)
	case boil.BeforeDeleteHook:
		userRoleLanguageBeforeDeleteHooks = append(userRoleLanguageBeforeDeleteHooks, userRoleLanguageHook)
	case boil.AfterDeleteHook:
		userRoleLanguageAfterDeleteHooks = append(userRoleLanguageAfterDeleteHooks, userRoleLanguageHook)
	case boil.BeforeUpsertHook:
		userRoleLanguageBeforeUpsertHooks = append(userRoleLanguageBeforeUpsertHooks, userRoleLanguageHook)
	case boil.AfterUpsertHook:
		userRoleLanguageAfterUpsertHooks = append(userRoleLanguageAfterUpsertHooks, userRoleLanguageHook)
	}
}

// One returns a single userRoleLanguage record from the query.
func (q userRoleLanguageQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserRoleLanguage, error) {
	o := &UserRoleLanguage{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_role_languages")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserRoleLanguage records from the query.
func (q userRoleLanguageQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserRoleLanguageSlice, error) {
	var o []*UserRoleLanguage

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserRoleLanguage slice")
	}

	if len(userRoleLanguageAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserRoleLanguage records in the query.
func (q userRoleLanguageQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_role_languages rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userRoleLanguageQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_role_languages exists")
	}

	return count > 0, nil
}

// Language pointed to by the foreign key.
func (o *UserRoleLanguage) Language(mods ...qm.QueryMod) languageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.LanguageID),
	}

	queryMods = append(queryMods, mods...)

	return Languages(queryMods...)
}

// UserRole pointed to by the foreign key.
func (o *UserRoleLanguage) UserRole(mods ...qm.QueryMod) userRoleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserRoleID),
	}

	queryMods = append(queryMods, mods...)

	return UserRoles(queryMods...)
}

// LoadLanguage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userRoleLanguageL) LoadLanguage(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserRoleLanguage interface{}, mods queries.Applicator) error {
	var slice []*UserRoleLanguage
	var object *UserRoleLanguage

	if singular {
		var ok bool
		object, ok = maybeUserRoleLanguage.(*UserRoleLanguage)
		if !ok {
			object = new(UserRoleLanguage)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserRoleLanguage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserRoleLanguage))
			}
		}
	} else {
		s, ok := maybeUserRoleLanguage.(*[]*UserRoleLanguage)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserRoleLanguage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserRoleLanguage))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userRoleLanguageR{}
		}
		args = append(args, object.LanguageID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userRoleLanguageR{}
			}

			for _, a := range args {
				if a == obj.LanguageID {
					continue Outer
				}
			}

			args = append(args, obj.LanguageID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`languages`),
		qm.WhereIn(`languages.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Language")
	}

	var resultSlice []*Language
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Language")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for languages")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for languages")
	}

	if len(languageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Language = foreign
		if foreign.R == nil {
			foreign.R = &languageR{}
		}
		foreign.R.UserRoleLanguages = append(foreign.R.UserRoleLanguages, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LanguageID == foreign.ID {
				local.R.Language = foreign
				if foreign.R == nil {
					foreign.R = &languageR{}
				}
				foreign.R.UserRoleLanguages = append(foreign.R.UserRoleLanguages, local)
				break
			}
		}
	}

	return nil
}

// LoadUserRole allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userRoleLanguageL) LoadUserRole(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserRoleLanguage interface{}, mods queries.Applicator) error {
	var slice []*UserRoleLanguage
	var object *UserRoleLanguage

	if singular {
		var ok bool
		object, ok = maybeUserRoleLanguage.(*UserRoleLanguage)
		if !ok {
			object = new(UserRoleLanguage)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserRoleLanguage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserRoleLanguage))
			}
		}
	} else {
		s, ok := maybeUserRoleLanguage.(*[]*UserRoleLanguage)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserRoleLanguage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserRoleLanguage))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userRoleLanguageR{}
		}
		args = append(args, object.UserRoleID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userRoleLanguageR{}
			}

			for _, a := range args {
				if a == obj.UserRoleID {
					continue Outer
				}
			}

			args = append(args, obj.UserRoleID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_roles`),
		qm.WhereIn(`user_roles.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserRole")
	}

	var resultSlice []*UserRole
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserRole")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_roles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_roles")
	}

	if len(userRoleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserRole = foreign
		if foreign.R == nil {
			foreign.R = &userRoleR{}
		}
		foreign.R.UserRoleLanguages = append(foreign.R.UserRoleLanguages, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserRoleID == foreign.ID {
				local.R.UserRole = foreign
				if foreign.R == nil {
					foreign.R = &userRoleR{}
				}
				foreign.R.UserRoleLanguages = append(foreign.R.UserRoleLanguages, local)
				break
			}
		}
	}

	return nil
}

// SetLanguage of the userRoleLanguage to the related item.
// Sets o.R.Language to related.
// Adds o to related.R.UserRoleLanguages.
func (o *UserRoleLanguage) SetLanguage(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Language) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_role_languages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"language_id"}),
		strmangle.WhereClause("\"", "\"", 2, userRoleLanguagePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LanguageID = related.ID
	if o.R == nil {
		o.R = &userRoleLanguageR{
			Language: related,
		}
	} else {
		o.R.Language = related
	}

	if related.R == nil {
		related.R = &languageR{
			UserRoleLanguages: UserRoleLanguageSlice{o},
		}
	} else {
		related.R.UserRoleLanguages = append(related.R.UserRoleLanguages, o)
	}

	return nil
}

// SetUserRole of the userRoleLanguage to the related item.
// Sets o.R.UserRole to related.
// Adds o to related.R.UserRoleLanguages.
func (o *UserRoleLanguage) SetUserRole(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserRole) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_role_languages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_role_id"}),
		strmangle.WhereClause("\"", "\"", 2, userRoleLanguagePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserRoleID = related.ID
	if o.R == nil {
		o.R = &userRoleLanguageR{
			UserRole: related,
		}
	} else {
		o.R.UserRole = related
	}

	if related.R == nil {
		related.R = &userRoleR{
			UserRoleLanguages: UserRoleLanguageSlice{o},
		}
	} else {
		related.R.UserRoleLanguages = append(related.R.UserRoleLanguages, o)
	}

	return nil
}

// UserRoleLanguages retrieves all the records using an executor.
func UserRoleLanguages(mods ...qm.QueryMod) userRoleLanguageQuery {
	mods = append(mods, qm.From("\"user_role_languages\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"user_role_languages\".*"})
	}

	return userRoleLanguageQuery{q}
}

// FindUserRoleLanguage retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserRoleLanguage(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*UserRoleLanguage, error) {
	userRoleLanguageObj := &UserRoleLanguage{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_role_languages\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userRoleLanguageObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_role_languages")
	}

	if err = userRoleLanguageObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userRoleLanguageObj, err
	}

	return userRoleLanguageObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserRoleLanguage) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_role_languages provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userRoleLanguageColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userRoleLanguageInsertCacheMut.RLock()
	cache, cached := userRoleLanguageInsertCache[key]
	userRoleLanguageInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userRoleLanguageAllColumns,
			userRoleLanguageColumnsWithDefault,
			userRoleLanguageColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userRoleLanguageType, userRoleLanguageMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userRoleLanguageType, userRoleLanguageMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_role_languages\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_role_languages\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_role_languages")
	}

	if !cached {
		userRoleLanguageInsertCacheMut.Lock()
		userRoleLanguageInsertCache[key] = cache
		userRoleLanguageInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserRoleLanguage.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserRoleLanguage) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userRoleLanguageUpdateCacheMut.RLock()
	cache, cached := userRoleLanguageUpdateCache[key]
	userRoleLanguageUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userRoleLanguageAllColumns,
			userRoleLanguagePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_role_languages, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_role_languages\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userRoleLanguagePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userRoleLanguageType, userRoleLanguageMapping, append(wl, userRoleLanguagePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_role_languages row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_role_languages")
	}

	if !cached {
		userRoleLanguageUpdateCacheMut.Lock()
		userRoleLanguageUpdateCache[key] = cache
		userRoleLanguageUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userRoleLanguageQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_role_languages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_role_languages")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserRoleLanguageSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userRoleLanguagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_role_languages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userRoleLanguagePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userRoleLanguage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userRoleLanguage")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserRoleLanguage) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_role_languages provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userRoleLanguageColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userRoleLanguageUpsertCacheMut.RLock()
	cache, cached := userRoleLanguageUpsertCache[key]
	userRoleLanguageUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userRoleLanguageAllColumns,
			userRoleLanguageColumnsWithDefault,
			userRoleLanguageColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userRoleLanguageAllColumns,
			userRoleLanguagePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert user_role_languages, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userRoleLanguagePrimaryKeyColumns))
			copy(conflict, userRoleLanguagePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_role_languages\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userRoleLanguageType, userRoleLanguageMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userRoleLanguageType, userRoleLanguageMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_role_languages")
	}

	if !cached {
		userRoleLanguageUpsertCacheMut.Lock()
		userRoleLanguageUpsertCache[key] = cache
		userRoleLanguageUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserRoleLanguage record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserRoleLanguage) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserRoleLanguage provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userRoleLanguagePrimaryKeyMapping)
	sql := "DELETE FROM \"user_role_languages\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_role_languages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_role_languages")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userRoleLanguageQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userRoleLanguageQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_role_languages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_role_languages")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserRoleLanguageSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userRoleLanguageBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userRoleLanguagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_role_languages\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userRoleLanguagePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userRoleLanguage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_role_languages")
	}

	if len(userRoleLanguageAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserRoleLanguage) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserRoleLanguage(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserRoleLanguageSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserRoleLanguageSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userRoleLanguagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_role_languages\".* FROM \"user_role_languages\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userRoleLanguagePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserRoleLanguageSlice")
	}

	*o = slice

	return nil
}

// UserRoleLanguageExists checks if the UserRoleLanguage row exists.
func UserRoleLanguageExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_role_languages\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_role_languages exists")
	}

	return exists, nil
}

// Exists checks if the UserRoleLanguage row exists.
func (o *UserRoleLanguage) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserRoleLanguageExists(ctx, exec, o.ID)
}
