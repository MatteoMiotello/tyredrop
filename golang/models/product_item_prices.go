// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProductItemPrice is an object representing the database table.
type ProductItemPrice struct {
	ID            int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	ProductItemID int64     `boil:"product_item_id" json:"product_item_id" toml:"product_item_id" yaml:"product_item_id"`
	CurrencyID    int64     `boil:"currency_id" json:"currency_id" toml:"currency_id" yaml:"currency_id"`
	Price         int       `boil:"price" json:"price" toml:"price" yaml:"price"`
	DeletedAt     null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	UpdatedAt     time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt     time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *productItemPriceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productItemPriceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductItemPriceColumns = struct {
	ID            string
	ProductItemID string
	CurrencyID    string
	Price         string
	DeletedAt     string
	UpdatedAt     string
	CreatedAt     string
}{
	ID:            "id",
	ProductItemID: "product_item_id",
	CurrencyID:    "currency_id",
	Price:         "price",
	DeletedAt:     "deleted_at",
	UpdatedAt:     "updated_at",
	CreatedAt:     "created_at",
}

var ProductItemPriceTableColumns = struct {
	ID            string
	ProductItemID string
	CurrencyID    string
	Price         string
	DeletedAt     string
	UpdatedAt     string
	CreatedAt     string
}{
	ID:            "product_item_prices.id",
	ProductItemID: "product_item_prices.product_item_id",
	CurrencyID:    "product_item_prices.currency_id",
	Price:         "product_item_prices.price",
	DeletedAt:     "product_item_prices.deleted_at",
	UpdatedAt:     "product_item_prices.updated_at",
	CreatedAt:     "product_item_prices.created_at",
}

// Generated where

var ProductItemPriceWhere = struct {
	ID            whereHelperint64
	ProductItemID whereHelperint64
	CurrencyID    whereHelperint64
	Price         whereHelperint
	DeletedAt     whereHelpernull_Time
	UpdatedAt     whereHelpertime_Time
	CreatedAt     whereHelpertime_Time
}{
	ID:            whereHelperint64{field: "\"product_item_prices\".\"id\""},
	ProductItemID: whereHelperint64{field: "\"product_item_prices\".\"product_item_id\""},
	CurrencyID:    whereHelperint64{field: "\"product_item_prices\".\"currency_id\""},
	Price:         whereHelperint{field: "\"product_item_prices\".\"price\""},
	DeletedAt:     whereHelpernull_Time{field: "\"product_item_prices\".\"deleted_at\""},
	UpdatedAt:     whereHelpertime_Time{field: "\"product_item_prices\".\"updated_at\""},
	CreatedAt:     whereHelpertime_Time{field: "\"product_item_prices\".\"created_at\""},
}

// ProductItemPriceRels is where relationship names are stored.
var ProductItemPriceRels = struct {
	Currency                  string
	ProductItem               string
	Carts                     string
	OrderRows                 string
	ProductItemPriceAdditions string
}{
	Currency:                  "Currency",
	ProductItem:               "ProductItem",
	Carts:                     "Carts",
	OrderRows:                 "OrderRows",
	ProductItemPriceAdditions: "ProductItemPriceAdditions",
}

// productItemPriceR is where relationships are stored.
type productItemPriceR struct {
	Currency                  *Currency                     `boil:"Currency" json:"Currency" toml:"Currency" yaml:"Currency"`
	ProductItem               *ProductItem                  `boil:"ProductItem" json:"ProductItem" toml:"ProductItem" yaml:"ProductItem"`
	Carts                     CartSlice                     `boil:"Carts" json:"Carts" toml:"Carts" yaml:"Carts"`
	OrderRows                 OrderRowSlice                 `boil:"OrderRows" json:"OrderRows" toml:"OrderRows" yaml:"OrderRows"`
	ProductItemPriceAdditions ProductItemPriceAdditionSlice `boil:"ProductItemPriceAdditions" json:"ProductItemPriceAdditions" toml:"ProductItemPriceAdditions" yaml:"ProductItemPriceAdditions"`
}

// NewStruct creates a new relationship struct
func (*productItemPriceR) NewStruct() *productItemPriceR {
	return &productItemPriceR{}
}

func (r *productItemPriceR) GetCurrency() *Currency {
	if r == nil {
		return nil
	}
	return r.Currency
}

func (r *productItemPriceR) GetProductItem() *ProductItem {
	if r == nil {
		return nil
	}
	return r.ProductItem
}

func (r *productItemPriceR) GetCarts() CartSlice {
	if r == nil {
		return nil
	}
	return r.Carts
}

func (r *productItemPriceR) GetOrderRows() OrderRowSlice {
	if r == nil {
		return nil
	}
	return r.OrderRows
}

func (r *productItemPriceR) GetProductItemPriceAdditions() ProductItemPriceAdditionSlice {
	if r == nil {
		return nil
	}
	return r.ProductItemPriceAdditions
}

// productItemPriceL is where Load methods for each relationship are stored.
type productItemPriceL struct{}

var (
	productItemPriceAllColumns            = []string{"id", "product_item_id", "currency_id", "price", "deleted_at", "updated_at", "created_at"}
	productItemPriceColumnsWithoutDefault = []string{"product_item_id", "currency_id", "price"}
	productItemPriceColumnsWithDefault    = []string{"id", "deleted_at", "updated_at", "created_at"}
	productItemPricePrimaryKeyColumns     = []string{"id"}
	productItemPriceGeneratedColumns      = []string{}
)

type (
	// ProductItemPriceSlice is an alias for a slice of pointers to ProductItemPrice.
	// This should almost always be used instead of []ProductItemPrice.
	ProductItemPriceSlice []*ProductItemPrice
	// ProductItemPriceHook is the signature for custom ProductItemPrice hook methods
	ProductItemPriceHook func(context.Context, boil.ContextExecutor, *ProductItemPrice) error

	productItemPriceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productItemPriceType                 = reflect.TypeOf(&ProductItemPrice{})
	productItemPriceMapping              = queries.MakeStructMapping(productItemPriceType)
	productItemPricePrimaryKeyMapping, _ = queries.BindMapping(productItemPriceType, productItemPriceMapping, productItemPricePrimaryKeyColumns)
	productItemPriceInsertCacheMut       sync.RWMutex
	productItemPriceInsertCache          = make(map[string]insertCache)
	productItemPriceUpdateCacheMut       sync.RWMutex
	productItemPriceUpdateCache          = make(map[string]updateCache)
	productItemPriceUpsertCacheMut       sync.RWMutex
	productItemPriceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var productItemPriceAfterSelectHooks []ProductItemPriceHook

var productItemPriceBeforeInsertHooks []ProductItemPriceHook
var productItemPriceAfterInsertHooks []ProductItemPriceHook

var productItemPriceBeforeUpdateHooks []ProductItemPriceHook
var productItemPriceAfterUpdateHooks []ProductItemPriceHook

var productItemPriceBeforeDeleteHooks []ProductItemPriceHook
var productItemPriceAfterDeleteHooks []ProductItemPriceHook

var productItemPriceBeforeUpsertHooks []ProductItemPriceHook
var productItemPriceAfterUpsertHooks []ProductItemPriceHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProductItemPrice) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productItemPriceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProductItemPrice) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productItemPriceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProductItemPrice) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productItemPriceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProductItemPrice) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productItemPriceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProductItemPrice) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productItemPriceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProductItemPrice) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productItemPriceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProductItemPrice) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productItemPriceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProductItemPrice) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productItemPriceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProductItemPrice) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productItemPriceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProductItemPriceHook registers your hook function for all future operations.
func AddProductItemPriceHook(hookPoint boil.HookPoint, productItemPriceHook ProductItemPriceHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		productItemPriceAfterSelectHooks = append(productItemPriceAfterSelectHooks, productItemPriceHook)
	case boil.BeforeInsertHook:
		productItemPriceBeforeInsertHooks = append(productItemPriceBeforeInsertHooks, productItemPriceHook)
	case boil.AfterInsertHook:
		productItemPriceAfterInsertHooks = append(productItemPriceAfterInsertHooks, productItemPriceHook)
	case boil.BeforeUpdateHook:
		productItemPriceBeforeUpdateHooks = append(productItemPriceBeforeUpdateHooks, productItemPriceHook)
	case boil.AfterUpdateHook:
		productItemPriceAfterUpdateHooks = append(productItemPriceAfterUpdateHooks, productItemPriceHook)
	case boil.BeforeDeleteHook:
		productItemPriceBeforeDeleteHooks = append(productItemPriceBeforeDeleteHooks, productItemPriceHook)
	case boil.AfterDeleteHook:
		productItemPriceAfterDeleteHooks = append(productItemPriceAfterDeleteHooks, productItemPriceHook)
	case boil.BeforeUpsertHook:
		productItemPriceBeforeUpsertHooks = append(productItemPriceBeforeUpsertHooks, productItemPriceHook)
	case boil.AfterUpsertHook:
		productItemPriceAfterUpsertHooks = append(productItemPriceAfterUpsertHooks, productItemPriceHook)
	}
}

// One returns a single productItemPrice record from the query.
func (q productItemPriceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProductItemPrice, error) {
	o := &ProductItemPrice{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for product_item_prices")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ProductItemPrice records from the query.
func (q productItemPriceQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProductItemPriceSlice, error) {
	var o []*ProductItemPrice

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ProductItemPrice slice")
	}

	if len(productItemPriceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ProductItemPrice records in the query.
func (q productItemPriceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count product_item_prices rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q productItemPriceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if product_item_prices exists")
	}

	return count > 0, nil
}

// Currency pointed to by the foreign key.
func (o *ProductItemPrice) Currency(mods ...qm.QueryMod) currencyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CurrencyID),
	}

	queryMods = append(queryMods, mods...)

	return Currencies(queryMods...)
}

// ProductItem pointed to by the foreign key.
func (o *ProductItemPrice) ProductItem(mods ...qm.QueryMod) productItemQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProductItemID),
	}

	queryMods = append(queryMods, mods...)

	return ProductItems(queryMods...)
}

// Carts retrieves all the cart's Carts with an executor.
func (o *ProductItemPrice) Carts(mods ...qm.QueryMod) cartQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"carts\".\"product_item_price_id\"=?", o.ID),
	)

	return Carts(queryMods...)
}

// OrderRows retrieves all the order_row's OrderRows with an executor.
func (o *ProductItemPrice) OrderRows(mods ...qm.QueryMod) orderRowQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"order_rows\".\"product_item_price_id\"=?", o.ID),
	)

	return OrderRows(queryMods...)
}

// ProductItemPriceAdditions retrieves all the product_item_price_addition's ProductItemPriceAdditions with an executor.
func (o *ProductItemPrice) ProductItemPriceAdditions(mods ...qm.QueryMod) productItemPriceAdditionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"product_item_price_additions\".\"product_item_price_id\"=?", o.ID),
	)

	return ProductItemPriceAdditions(queryMods...)
}

// LoadCurrency allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productItemPriceL) LoadCurrency(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductItemPrice interface{}, mods queries.Applicator) error {
	var slice []*ProductItemPrice
	var object *ProductItemPrice

	if singular {
		var ok bool
		object, ok = maybeProductItemPrice.(*ProductItemPrice)
		if !ok {
			object = new(ProductItemPrice)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductItemPrice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductItemPrice))
			}
		}
	} else {
		s, ok := maybeProductItemPrice.(*[]*ProductItemPrice)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductItemPrice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductItemPrice))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productItemPriceR{}
		}
		args = append(args, object.CurrencyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productItemPriceR{}
			}

			for _, a := range args {
				if a == obj.CurrencyID {
					continue Outer
				}
			}

			args = append(args, obj.CurrencyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`currencies`),
		qm.WhereIn(`currencies.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Currency")
	}

	var resultSlice []*Currency
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Currency")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for currencies")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for currencies")
	}

	if len(currencyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Currency = foreign
		if foreign.R == nil {
			foreign.R = &currencyR{}
		}
		foreign.R.ProductItemPrices = append(foreign.R.ProductItemPrices, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CurrencyID == foreign.ID {
				local.R.Currency = foreign
				if foreign.R == nil {
					foreign.R = &currencyR{}
				}
				foreign.R.ProductItemPrices = append(foreign.R.ProductItemPrices, local)
				break
			}
		}
	}

	return nil
}

// LoadProductItem allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productItemPriceL) LoadProductItem(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductItemPrice interface{}, mods queries.Applicator) error {
	var slice []*ProductItemPrice
	var object *ProductItemPrice

	if singular {
		var ok bool
		object, ok = maybeProductItemPrice.(*ProductItemPrice)
		if !ok {
			object = new(ProductItemPrice)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductItemPrice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductItemPrice))
			}
		}
	} else {
		s, ok := maybeProductItemPrice.(*[]*ProductItemPrice)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductItemPrice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductItemPrice))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productItemPriceR{}
		}
		args = append(args, object.ProductItemID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productItemPriceR{}
			}

			for _, a := range args {
				if a == obj.ProductItemID {
					continue Outer
				}
			}

			args = append(args, obj.ProductItemID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_items`),
		qm.WhereIn(`product_items.id in ?`, args...),
		qmhelper.WhereIsNull(`product_items.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ProductItem")
	}

	var resultSlice []*ProductItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ProductItem")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for product_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_items")
	}

	if len(productItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductItem = foreign
		if foreign.R == nil {
			foreign.R = &productItemR{}
		}
		foreign.R.ProductItemPrices = append(foreign.R.ProductItemPrices, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductItemID == foreign.ID {
				local.R.ProductItem = foreign
				if foreign.R == nil {
					foreign.R = &productItemR{}
				}
				foreign.R.ProductItemPrices = append(foreign.R.ProductItemPrices, local)
				break
			}
		}
	}

	return nil
}

// LoadCarts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productItemPriceL) LoadCarts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductItemPrice interface{}, mods queries.Applicator) error {
	var slice []*ProductItemPrice
	var object *ProductItemPrice

	if singular {
		var ok bool
		object, ok = maybeProductItemPrice.(*ProductItemPrice)
		if !ok {
			object = new(ProductItemPrice)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductItemPrice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductItemPrice))
			}
		}
	} else {
		s, ok := maybeProductItemPrice.(*[]*ProductItemPrice)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductItemPrice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductItemPrice))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productItemPriceR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productItemPriceR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`carts`),
		qm.WhereIn(`carts.product_item_price_id in ?`, args...),
		qmhelper.WhereIsNull(`carts.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load carts")
	}

	var resultSlice []*Cart
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice carts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on carts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for carts")
	}

	if len(cartAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Carts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &cartR{}
			}
			foreign.R.ProductItemPrice = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ProductItemPriceID {
				local.R.Carts = append(local.R.Carts, foreign)
				if foreign.R == nil {
					foreign.R = &cartR{}
				}
				foreign.R.ProductItemPrice = local
				break
			}
		}
	}

	return nil
}

// LoadOrderRows allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productItemPriceL) LoadOrderRows(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductItemPrice interface{}, mods queries.Applicator) error {
	var slice []*ProductItemPrice
	var object *ProductItemPrice

	if singular {
		var ok bool
		object, ok = maybeProductItemPrice.(*ProductItemPrice)
		if !ok {
			object = new(ProductItemPrice)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductItemPrice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductItemPrice))
			}
		}
	} else {
		s, ok := maybeProductItemPrice.(*[]*ProductItemPrice)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductItemPrice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductItemPrice))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productItemPriceR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productItemPriceR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`order_rows`),
		qm.WhereIn(`order_rows.product_item_price_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load order_rows")
	}

	var resultSlice []*OrderRow
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice order_rows")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on order_rows")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for order_rows")
	}

	if len(orderRowAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OrderRows = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderRowR{}
			}
			foreign.R.ProductItemPrice = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ProductItemPriceID {
				local.R.OrderRows = append(local.R.OrderRows, foreign)
				if foreign.R == nil {
					foreign.R = &orderRowR{}
				}
				foreign.R.ProductItemPrice = local
				break
			}
		}
	}

	return nil
}

// LoadProductItemPriceAdditions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productItemPriceL) LoadProductItemPriceAdditions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductItemPrice interface{}, mods queries.Applicator) error {
	var slice []*ProductItemPrice
	var object *ProductItemPrice

	if singular {
		var ok bool
		object, ok = maybeProductItemPrice.(*ProductItemPrice)
		if !ok {
			object = new(ProductItemPrice)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductItemPrice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductItemPrice))
			}
		}
	} else {
		s, ok := maybeProductItemPrice.(*[]*ProductItemPrice)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductItemPrice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductItemPrice))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productItemPriceR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productItemPriceR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_item_price_additions`),
		qm.WhereIn(`product_item_price_additions.product_item_price_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load product_item_price_additions")
	}

	var resultSlice []*ProductItemPriceAddition
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice product_item_price_additions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on product_item_price_additions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_item_price_additions")
	}

	if len(productItemPriceAdditionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductItemPriceAdditions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &productItemPriceAdditionR{}
			}
			foreign.R.ProductItemPrice = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ProductItemPriceID {
				local.R.ProductItemPriceAdditions = append(local.R.ProductItemPriceAdditions, foreign)
				if foreign.R == nil {
					foreign.R = &productItemPriceAdditionR{}
				}
				foreign.R.ProductItemPrice = local
				break
			}
		}
	}

	return nil
}

// SetCurrency of the productItemPrice to the related item.
// Sets o.R.Currency to related.
// Adds o to related.R.ProductItemPrices.
func (o *ProductItemPrice) SetCurrency(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Currency) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"product_item_prices\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"currency_id"}),
		strmangle.WhereClause("\"", "\"", 2, productItemPricePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CurrencyID = related.ID
	if o.R == nil {
		o.R = &productItemPriceR{
			Currency: related,
		}
	} else {
		o.R.Currency = related
	}

	if related.R == nil {
		related.R = &currencyR{
			ProductItemPrices: ProductItemPriceSlice{o},
		}
	} else {
		related.R.ProductItemPrices = append(related.R.ProductItemPrices, o)
	}

	return nil
}

// SetProductItem of the productItemPrice to the related item.
// Sets o.R.ProductItem to related.
// Adds o to related.R.ProductItemPrices.
func (o *ProductItemPrice) SetProductItem(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ProductItem) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"product_item_prices\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"product_item_id"}),
		strmangle.WhereClause("\"", "\"", 2, productItemPricePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductItemID = related.ID
	if o.R == nil {
		o.R = &productItemPriceR{
			ProductItem: related,
		}
	} else {
		o.R.ProductItem = related
	}

	if related.R == nil {
		related.R = &productItemR{
			ProductItemPrices: ProductItemPriceSlice{o},
		}
	} else {
		related.R.ProductItemPrices = append(related.R.ProductItemPrices, o)
	}

	return nil
}

// AddCarts adds the given related objects to the existing relationships
// of the product_item_price, optionally inserting them as new records.
// Appends related to o.R.Carts.
// Sets related.R.ProductItemPrice appropriately.
func (o *ProductItemPrice) AddCarts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Cart) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductItemPriceID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"carts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"product_item_price_id"}),
				strmangle.WhereClause("\"", "\"", 2, cartPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductItemPriceID = o.ID
		}
	}

	if o.R == nil {
		o.R = &productItemPriceR{
			Carts: related,
		}
	} else {
		o.R.Carts = append(o.R.Carts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &cartR{
				ProductItemPrice: o,
			}
		} else {
			rel.R.ProductItemPrice = o
		}
	}
	return nil
}

// AddOrderRows adds the given related objects to the existing relationships
// of the product_item_price, optionally inserting them as new records.
// Appends related to o.R.OrderRows.
// Sets related.R.ProductItemPrice appropriately.
func (o *ProductItemPrice) AddOrderRows(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrderRow) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductItemPriceID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"order_rows\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"product_item_price_id"}),
				strmangle.WhereClause("\"", "\"", 2, orderRowPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductItemPriceID = o.ID
		}
	}

	if o.R == nil {
		o.R = &productItemPriceR{
			OrderRows: related,
		}
	} else {
		o.R.OrderRows = append(o.R.OrderRows, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderRowR{
				ProductItemPrice: o,
			}
		} else {
			rel.R.ProductItemPrice = o
		}
	}
	return nil
}

// AddProductItemPriceAdditions adds the given related objects to the existing relationships
// of the product_item_price, optionally inserting them as new records.
// Appends related to o.R.ProductItemPriceAdditions.
// Sets related.R.ProductItemPrice appropriately.
func (o *ProductItemPrice) AddProductItemPriceAdditions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProductItemPriceAddition) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductItemPriceID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"product_item_price_additions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"product_item_price_id"}),
				strmangle.WhereClause("\"", "\"", 2, productItemPriceAdditionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductItemPriceID = o.ID
		}
	}

	if o.R == nil {
		o.R = &productItemPriceR{
			ProductItemPriceAdditions: related,
		}
	} else {
		o.R.ProductItemPriceAdditions = append(o.R.ProductItemPriceAdditions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productItemPriceAdditionR{
				ProductItemPrice: o,
			}
		} else {
			rel.R.ProductItemPrice = o
		}
	}
	return nil
}

// ProductItemPrices retrieves all the records using an executor.
func ProductItemPrices(mods ...qm.QueryMod) productItemPriceQuery {
	mods = append(mods, qm.From("\"product_item_prices\""), qmhelper.WhereIsNull("\"product_item_prices\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"product_item_prices\".*"})
	}

	return productItemPriceQuery{q}
}

// FindProductItemPrice retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProductItemPrice(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ProductItemPrice, error) {
	productItemPriceObj := &ProductItemPrice{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"product_item_prices\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, productItemPriceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from product_item_prices")
	}

	if err = productItemPriceObj.doAfterSelectHooks(ctx, exec); err != nil {
		return productItemPriceObj, err
	}

	return productItemPriceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProductItemPrice) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no product_item_prices provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productItemPriceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productItemPriceInsertCacheMut.RLock()
	cache, cached := productItemPriceInsertCache[key]
	productItemPriceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productItemPriceAllColumns,
			productItemPriceColumnsWithDefault,
			productItemPriceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(productItemPriceType, productItemPriceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productItemPriceType, productItemPriceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"product_item_prices\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"product_item_prices\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into product_item_prices")
	}

	if !cached {
		productItemPriceInsertCacheMut.Lock()
		productItemPriceInsertCache[key] = cache
		productItemPriceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ProductItemPrice.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProductItemPrice) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	productItemPriceUpdateCacheMut.RLock()
	cache, cached := productItemPriceUpdateCache[key]
	productItemPriceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productItemPriceAllColumns,
			productItemPricePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update product_item_prices, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"product_item_prices\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, productItemPricePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productItemPriceType, productItemPriceMapping, append(wl, productItemPricePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update product_item_prices row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for product_item_prices")
	}

	if !cached {
		productItemPriceUpdateCacheMut.Lock()
		productItemPriceUpdateCache[key] = cache
		productItemPriceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q productItemPriceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for product_item_prices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for product_item_prices")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductItemPriceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productItemPricePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"product_item_prices\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, productItemPricePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in productItemPrice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all productItemPrice")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProductItemPrice) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no product_item_prices provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productItemPriceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productItemPriceUpsertCacheMut.RLock()
	cache, cached := productItemPriceUpsertCache[key]
	productItemPriceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			productItemPriceAllColumns,
			productItemPriceColumnsWithDefault,
			productItemPriceColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			productItemPriceAllColumns,
			productItemPricePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert product_item_prices, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(productItemPricePrimaryKeyColumns))
			copy(conflict, productItemPricePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"product_item_prices\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(productItemPriceType, productItemPriceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productItemPriceType, productItemPriceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert product_item_prices")
	}

	if !cached {
		productItemPriceUpsertCacheMut.Lock()
		productItemPriceUpsertCache[key] = cache
		productItemPriceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ProductItemPrice record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProductItemPrice) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ProductItemPrice provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productItemPricePrimaryKeyMapping)
		sql = "DELETE FROM \"product_item_prices\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"product_item_prices\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(productItemPriceType, productItemPriceMapping, append(wl, productItemPricePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from product_item_prices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for product_item_prices")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q productItemPriceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no productItemPriceQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from product_item_prices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for product_item_prices")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductItemPriceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(productItemPriceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productItemPricePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"product_item_prices\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productItemPricePrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productItemPricePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"product_item_prices\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, productItemPricePrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from productItemPrice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for product_item_prices")
	}

	if len(productItemPriceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProductItemPrice) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProductItemPrice(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductItemPriceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductItemPriceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productItemPricePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"product_item_prices\".* FROM \"product_item_prices\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productItemPricePrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProductItemPriceSlice")
	}

	*o = slice

	return nil
}

// ProductItemPriceExists checks if the ProductItemPrice row exists.
func ProductItemPriceExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"product_item_prices\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if product_item_prices exists")
	}

	return exists, nil
}

// Exists checks if the ProductItemPrice row exists.
func (o *ProductItemPrice) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ProductItemPriceExists(ctx, exec, o.ID)
}
