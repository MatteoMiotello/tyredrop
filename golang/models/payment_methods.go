// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PaymentMethod is an object representing the database table.
type PaymentMethod struct {
	ID        int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Code      string      `boil:"code" json:"code" toml:"code" yaml:"code"`
	Name      string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Receiver  null.String `boil:"receiver" json:"receiver,omitempty" toml:"receiver" yaml:"receiver,omitempty"`
	BankName  null.String `boil:"bank_name" json:"bank_name,omitempty" toml:"bank_name" yaml:"bank_name,omitempty"`
	Iban      null.String `boil:"iban" json:"iban,omitempty" toml:"iban" yaml:"iban,omitempty"`
	DeletedAt null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	UpdatedAt time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *paymentMethodR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L paymentMethodL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PaymentMethodColumns = struct {
	ID        string
	Code      string
	Name      string
	Receiver  string
	BankName  string
	Iban      string
	DeletedAt string
	UpdatedAt string
	CreatedAt string
}{
	ID:        "id",
	Code:      "code",
	Name:      "name",
	Receiver:  "receiver",
	BankName:  "bank_name",
	Iban:      "iban",
	DeletedAt: "deleted_at",
	UpdatedAt: "updated_at",
	CreatedAt: "created_at",
}

var PaymentMethodTableColumns = struct {
	ID        string
	Code      string
	Name      string
	Receiver  string
	BankName  string
	Iban      string
	DeletedAt string
	UpdatedAt string
	CreatedAt string
}{
	ID:        "payment_methods.id",
	Code:      "payment_methods.code",
	Name:      "payment_methods.name",
	Receiver:  "payment_methods.receiver",
	BankName:  "payment_methods.bank_name",
	Iban:      "payment_methods.iban",
	DeletedAt: "payment_methods.deleted_at",
	UpdatedAt: "payment_methods.updated_at",
	CreatedAt: "payment_methods.created_at",
}

// Generated where

var PaymentMethodWhere = struct {
	ID        whereHelperint64
	Code      whereHelperstring
	Name      whereHelperstring
	Receiver  whereHelpernull_String
	BankName  whereHelpernull_String
	Iban      whereHelpernull_String
	DeletedAt whereHelpernull_Time
	UpdatedAt whereHelpertime_Time
	CreatedAt whereHelpertime_Time
}{
	ID:        whereHelperint64{field: "\"payment_methods\".\"id\""},
	Code:      whereHelperstring{field: "\"payment_methods\".\"code\""},
	Name:      whereHelperstring{field: "\"payment_methods\".\"name\""},
	Receiver:  whereHelpernull_String{field: "\"payment_methods\".\"receiver\""},
	BankName:  whereHelpernull_String{field: "\"payment_methods\".\"bank_name\""},
	Iban:      whereHelpernull_String{field: "\"payment_methods\".\"iban\""},
	DeletedAt: whereHelpernull_Time{field: "\"payment_methods\".\"deleted_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"payment_methods\".\"updated_at\""},
	CreatedAt: whereHelpertime_Time{field: "\"payment_methods\".\"created_at\""},
}

// PaymentMethodRels is where relationship names are stored.
var PaymentMethodRels = struct {
	UserPaymentMethods string
}{
	UserPaymentMethods: "UserPaymentMethods",
}

// paymentMethodR is where relationships are stored.
type paymentMethodR struct {
	UserPaymentMethods UserPaymentMethodSlice `boil:"UserPaymentMethods" json:"UserPaymentMethods" toml:"UserPaymentMethods" yaml:"UserPaymentMethods"`
}

// NewStruct creates a new relationship struct
func (*paymentMethodR) NewStruct() *paymentMethodR {
	return &paymentMethodR{}
}

func (r *paymentMethodR) GetUserPaymentMethods() UserPaymentMethodSlice {
	if r == nil {
		return nil
	}
	return r.UserPaymentMethods
}

// paymentMethodL is where Load methods for each relationship are stored.
type paymentMethodL struct{}

var (
	paymentMethodAllColumns            = []string{"id", "code", "name", "receiver", "bank_name", "iban", "deleted_at", "updated_at", "created_at"}
	paymentMethodColumnsWithoutDefault = []string{"code", "name"}
	paymentMethodColumnsWithDefault    = []string{"id", "receiver", "bank_name", "iban", "deleted_at", "updated_at", "created_at"}
	paymentMethodPrimaryKeyColumns     = []string{"id"}
	paymentMethodGeneratedColumns      = []string{}
)

type (
	// PaymentMethodSlice is an alias for a slice of pointers to PaymentMethod.
	// This should almost always be used instead of []PaymentMethod.
	PaymentMethodSlice []*PaymentMethod
	// PaymentMethodHook is the signature for custom PaymentMethod hook methods
	PaymentMethodHook func(context.Context, boil.ContextExecutor, *PaymentMethod) error

	paymentMethodQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	paymentMethodType                 = reflect.TypeOf(&PaymentMethod{})
	paymentMethodMapping              = queries.MakeStructMapping(paymentMethodType)
	paymentMethodPrimaryKeyMapping, _ = queries.BindMapping(paymentMethodType, paymentMethodMapping, paymentMethodPrimaryKeyColumns)
	paymentMethodInsertCacheMut       sync.RWMutex
	paymentMethodInsertCache          = make(map[string]insertCache)
	paymentMethodUpdateCacheMut       sync.RWMutex
	paymentMethodUpdateCache          = make(map[string]updateCache)
	paymentMethodUpsertCacheMut       sync.RWMutex
	paymentMethodUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var paymentMethodAfterSelectHooks []PaymentMethodHook

var paymentMethodBeforeInsertHooks []PaymentMethodHook
var paymentMethodAfterInsertHooks []PaymentMethodHook

var paymentMethodBeforeUpdateHooks []PaymentMethodHook
var paymentMethodAfterUpdateHooks []PaymentMethodHook

var paymentMethodBeforeDeleteHooks []PaymentMethodHook
var paymentMethodAfterDeleteHooks []PaymentMethodHook

var paymentMethodBeforeUpsertHooks []PaymentMethodHook
var paymentMethodAfterUpsertHooks []PaymentMethodHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PaymentMethod) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentMethodAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PaymentMethod) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentMethodBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PaymentMethod) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentMethodAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PaymentMethod) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentMethodBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PaymentMethod) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentMethodAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PaymentMethod) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentMethodBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PaymentMethod) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentMethodAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PaymentMethod) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentMethodBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PaymentMethod) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentMethodAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPaymentMethodHook registers your hook function for all future operations.
func AddPaymentMethodHook(hookPoint boil.HookPoint, paymentMethodHook PaymentMethodHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		paymentMethodAfterSelectHooks = append(paymentMethodAfterSelectHooks, paymentMethodHook)
	case boil.BeforeInsertHook:
		paymentMethodBeforeInsertHooks = append(paymentMethodBeforeInsertHooks, paymentMethodHook)
	case boil.AfterInsertHook:
		paymentMethodAfterInsertHooks = append(paymentMethodAfterInsertHooks, paymentMethodHook)
	case boil.BeforeUpdateHook:
		paymentMethodBeforeUpdateHooks = append(paymentMethodBeforeUpdateHooks, paymentMethodHook)
	case boil.AfterUpdateHook:
		paymentMethodAfterUpdateHooks = append(paymentMethodAfterUpdateHooks, paymentMethodHook)
	case boil.BeforeDeleteHook:
		paymentMethodBeforeDeleteHooks = append(paymentMethodBeforeDeleteHooks, paymentMethodHook)
	case boil.AfterDeleteHook:
		paymentMethodAfterDeleteHooks = append(paymentMethodAfterDeleteHooks, paymentMethodHook)
	case boil.BeforeUpsertHook:
		paymentMethodBeforeUpsertHooks = append(paymentMethodBeforeUpsertHooks, paymentMethodHook)
	case boil.AfterUpsertHook:
		paymentMethodAfterUpsertHooks = append(paymentMethodAfterUpsertHooks, paymentMethodHook)
	}
}

// One returns a single paymentMethod record from the query.
func (q paymentMethodQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PaymentMethod, error) {
	o := &PaymentMethod{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for payment_methods")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PaymentMethod records from the query.
func (q paymentMethodQuery) All(ctx context.Context, exec boil.ContextExecutor) (PaymentMethodSlice, error) {
	var o []*PaymentMethod

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PaymentMethod slice")
	}

	if len(paymentMethodAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PaymentMethod records in the query.
func (q paymentMethodQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count payment_methods rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q paymentMethodQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if payment_methods exists")
	}

	return count > 0, nil
}

// UserPaymentMethods retrieves all the user_payment_method's UserPaymentMethods with an executor.
func (o *PaymentMethod) UserPaymentMethods(mods ...qm.QueryMod) userPaymentMethodQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_payment_methods\".\"payment_method_id\"=?", o.ID),
	)

	return UserPaymentMethods(queryMods...)
}

// LoadUserPaymentMethods allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (paymentMethodL) LoadUserPaymentMethods(ctx context.Context, e boil.ContextExecutor, singular bool, maybePaymentMethod interface{}, mods queries.Applicator) error {
	var slice []*PaymentMethod
	var object *PaymentMethod

	if singular {
		var ok bool
		object, ok = maybePaymentMethod.(*PaymentMethod)
		if !ok {
			object = new(PaymentMethod)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePaymentMethod)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePaymentMethod))
			}
		}
	} else {
		s, ok := maybePaymentMethod.(*[]*PaymentMethod)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePaymentMethod)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePaymentMethod))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &paymentMethodR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &paymentMethodR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_payment_methods`),
		qm.WhereIn(`user_payment_methods.payment_method_id in ?`, args...),
		qmhelper.WhereIsNull(`user_payment_methods.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_payment_methods")
	}

	var resultSlice []*UserPaymentMethod
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_payment_methods")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_payment_methods")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_payment_methods")
	}

	if len(userPaymentMethodAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserPaymentMethods = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userPaymentMethodR{}
			}
			foreign.R.PaymentMethod = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PaymentMethodID {
				local.R.UserPaymentMethods = append(local.R.UserPaymentMethods, foreign)
				if foreign.R == nil {
					foreign.R = &userPaymentMethodR{}
				}
				foreign.R.PaymentMethod = local
				break
			}
		}
	}

	return nil
}

// AddUserPaymentMethods adds the given related objects to the existing relationships
// of the payment_method, optionally inserting them as new records.
// Appends related to o.R.UserPaymentMethods.
// Sets related.R.PaymentMethod appropriately.
func (o *PaymentMethod) AddUserPaymentMethods(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserPaymentMethod) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PaymentMethodID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_payment_methods\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"payment_method_id"}),
				strmangle.WhereClause("\"", "\"", 2, userPaymentMethodPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PaymentMethodID = o.ID
		}
	}

	if o.R == nil {
		o.R = &paymentMethodR{
			UserPaymentMethods: related,
		}
	} else {
		o.R.UserPaymentMethods = append(o.R.UserPaymentMethods, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userPaymentMethodR{
				PaymentMethod: o,
			}
		} else {
			rel.R.PaymentMethod = o
		}
	}
	return nil
}

// PaymentMethods retrieves all the records using an executor.
func PaymentMethods(mods ...qm.QueryMod) paymentMethodQuery {
	mods = append(mods, qm.From("\"payment_methods\""), qmhelper.WhereIsNull("\"payment_methods\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"payment_methods\".*"})
	}

	return paymentMethodQuery{q}
}

// FindPaymentMethod retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPaymentMethod(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*PaymentMethod, error) {
	paymentMethodObj := &PaymentMethod{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"payment_methods\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, paymentMethodObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from payment_methods")
	}

	if err = paymentMethodObj.doAfterSelectHooks(ctx, exec); err != nil {
		return paymentMethodObj, err
	}

	return paymentMethodObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PaymentMethod) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no payment_methods provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(paymentMethodColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	paymentMethodInsertCacheMut.RLock()
	cache, cached := paymentMethodInsertCache[key]
	paymentMethodInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			paymentMethodAllColumns,
			paymentMethodColumnsWithDefault,
			paymentMethodColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(paymentMethodType, paymentMethodMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(paymentMethodType, paymentMethodMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"payment_methods\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"payment_methods\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into payment_methods")
	}

	if !cached {
		paymentMethodInsertCacheMut.Lock()
		paymentMethodInsertCache[key] = cache
		paymentMethodInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PaymentMethod.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PaymentMethod) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	paymentMethodUpdateCacheMut.RLock()
	cache, cached := paymentMethodUpdateCache[key]
	paymentMethodUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			paymentMethodAllColumns,
			paymentMethodPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update payment_methods, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"payment_methods\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, paymentMethodPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(paymentMethodType, paymentMethodMapping, append(wl, paymentMethodPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update payment_methods row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for payment_methods")
	}

	if !cached {
		paymentMethodUpdateCacheMut.Lock()
		paymentMethodUpdateCache[key] = cache
		paymentMethodUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q paymentMethodQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for payment_methods")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for payment_methods")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PaymentMethodSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentMethodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"payment_methods\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, paymentMethodPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in paymentMethod slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all paymentMethod")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PaymentMethod) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no payment_methods provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(paymentMethodColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	paymentMethodUpsertCacheMut.RLock()
	cache, cached := paymentMethodUpsertCache[key]
	paymentMethodUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			paymentMethodAllColumns,
			paymentMethodColumnsWithDefault,
			paymentMethodColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			paymentMethodAllColumns,
			paymentMethodPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert payment_methods, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(paymentMethodPrimaryKeyColumns))
			copy(conflict, paymentMethodPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"payment_methods\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(paymentMethodType, paymentMethodMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(paymentMethodType, paymentMethodMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert payment_methods")
	}

	if !cached {
		paymentMethodUpsertCacheMut.Lock()
		paymentMethodUpsertCache[key] = cache
		paymentMethodUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PaymentMethod record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PaymentMethod) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PaymentMethod provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), paymentMethodPrimaryKeyMapping)
		sql = "DELETE FROM \"payment_methods\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"payment_methods\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(paymentMethodType, paymentMethodMapping, append(wl, paymentMethodPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from payment_methods")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for payment_methods")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q paymentMethodQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no paymentMethodQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from payment_methods")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for payment_methods")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PaymentMethodSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(paymentMethodBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentMethodPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"payment_methods\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, paymentMethodPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentMethodPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"payment_methods\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, paymentMethodPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from paymentMethod slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for payment_methods")
	}

	if len(paymentMethodAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PaymentMethod) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPaymentMethod(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PaymentMethodSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PaymentMethodSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentMethodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"payment_methods\".* FROM \"payment_methods\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, paymentMethodPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PaymentMethodSlice")
	}

	*o = slice

	return nil
}

// PaymentMethodExists checks if the PaymentMethod row exists.
func PaymentMethodExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"payment_methods\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if payment_methods exists")
	}

	return exists, nil
}

// Exists checks if the PaymentMethod row exists.
func (o *PaymentMethod) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PaymentMethodExists(ctx, exec, o.ID)
}
