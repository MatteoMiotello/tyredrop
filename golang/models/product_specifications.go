// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProductSpecification is an object representing the database table.
type ProductSpecification struct {
	ID                int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	ProductCategoryID int64     `boil:"product_category_id" json:"product_category_id" toml:"product_category_id" yaml:"product_category_id"`
	SpecificationCode string    `boil:"specification_code" json:"specification_code" toml:"specification_code" yaml:"specification_code"`
	Type              string    `boil:"type" json:"type" toml:"type" yaml:"type"`
	Mandatory         bool      `boil:"mandatory" json:"mandatory" toml:"mandatory" yaml:"mandatory"`
	DeletedAt         null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	UpdatedAt         time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt         time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *productSpecificationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productSpecificationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductSpecificationColumns = struct {
	ID                string
	ProductCategoryID string
	SpecificationCode string
	Type              string
	Mandatory         string
	DeletedAt         string
	UpdatedAt         string
	CreatedAt         string
}{
	ID:                "id",
	ProductCategoryID: "product_category_id",
	SpecificationCode: "specification_code",
	Type:              "type",
	Mandatory:         "mandatory",
	DeletedAt:         "deleted_at",
	UpdatedAt:         "updated_at",
	CreatedAt:         "created_at",
}

var ProductSpecificationTableColumns = struct {
	ID                string
	ProductCategoryID string
	SpecificationCode string
	Type              string
	Mandatory         string
	DeletedAt         string
	UpdatedAt         string
	CreatedAt         string
}{
	ID:                "product_specifications.id",
	ProductCategoryID: "product_specifications.product_category_id",
	SpecificationCode: "product_specifications.specification_code",
	Type:              "product_specifications.type",
	Mandatory:         "product_specifications.mandatory",
	DeletedAt:         "product_specifications.deleted_at",
	UpdatedAt:         "product_specifications.updated_at",
	CreatedAt:         "product_specifications.created_at",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var ProductSpecificationWhere = struct {
	ID                whereHelperint64
	ProductCategoryID whereHelperint64
	SpecificationCode whereHelperstring
	Type              whereHelperstring
	Mandatory         whereHelperbool
	DeletedAt         whereHelpernull_Time
	UpdatedAt         whereHelpertime_Time
	CreatedAt         whereHelpertime_Time
}{
	ID:                whereHelperint64{field: "\"product_specifications\".\"id\""},
	ProductCategoryID: whereHelperint64{field: "\"product_specifications\".\"product_category_id\""},
	SpecificationCode: whereHelperstring{field: "\"product_specifications\".\"specification_code\""},
	Type:              whereHelperstring{field: "\"product_specifications\".\"type\""},
	Mandatory:         whereHelperbool{field: "\"product_specifications\".\"mandatory\""},
	DeletedAt:         whereHelpernull_Time{field: "\"product_specifications\".\"deleted_at\""},
	UpdatedAt:         whereHelpertime_Time{field: "\"product_specifications\".\"updated_at\""},
	CreatedAt:         whereHelpertime_Time{field: "\"product_specifications\".\"created_at\""},
}

// ProductSpecificationRels is where relationship names are stored.
var ProductSpecificationRels = struct {
	ProductCategory               string
	ProductSpecificationLanguages string
	ProductSpecificationValues    string
}{
	ProductCategory:               "ProductCategory",
	ProductSpecificationLanguages: "ProductSpecificationLanguages",
	ProductSpecificationValues:    "ProductSpecificationValues",
}

// productSpecificationR is where relationships are stored.
type productSpecificationR struct {
	ProductCategory               *ProductCategory                  `boil:"ProductCategory" json:"ProductCategory" toml:"ProductCategory" yaml:"ProductCategory"`
	ProductSpecificationLanguages ProductSpecificationLanguageSlice `boil:"ProductSpecificationLanguages" json:"ProductSpecificationLanguages" toml:"ProductSpecificationLanguages" yaml:"ProductSpecificationLanguages"`
	ProductSpecificationValues    ProductSpecificationValueSlice    `boil:"ProductSpecificationValues" json:"ProductSpecificationValues" toml:"ProductSpecificationValues" yaml:"ProductSpecificationValues"`
}

// NewStruct creates a new relationship struct
func (*productSpecificationR) NewStruct() *productSpecificationR {
	return &productSpecificationR{}
}

func (r *productSpecificationR) GetProductCategory() *ProductCategory {
	if r == nil {
		return nil
	}
	return r.ProductCategory
}

func (r *productSpecificationR) GetProductSpecificationLanguages() ProductSpecificationLanguageSlice {
	if r == nil {
		return nil
	}
	return r.ProductSpecificationLanguages
}

func (r *productSpecificationR) GetProductSpecificationValues() ProductSpecificationValueSlice {
	if r == nil {
		return nil
	}
	return r.ProductSpecificationValues
}

// productSpecificationL is where Load methods for each relationship are stored.
type productSpecificationL struct{}

var (
	productSpecificationAllColumns            = []string{"id", "product_category_id", "specification_code", "type", "mandatory", "deleted_at", "updated_at", "created_at"}
	productSpecificationColumnsWithoutDefault = []string{"product_category_id", "specification_code", "type", "mandatory"}
	productSpecificationColumnsWithDefault    = []string{"id", "deleted_at", "updated_at", "created_at"}
	productSpecificationPrimaryKeyColumns     = []string{"id"}
	productSpecificationGeneratedColumns      = []string{}
)

type (
	// ProductSpecificationSlice is an alias for a slice of pointers to ProductSpecification.
	// This should almost always be used instead of []ProductSpecification.
	ProductSpecificationSlice []*ProductSpecification
	// ProductSpecificationHook is the signature for custom ProductSpecification hook methods
	ProductSpecificationHook func(context.Context, boil.ContextExecutor, *ProductSpecification) error

	productSpecificationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productSpecificationType                 = reflect.TypeOf(&ProductSpecification{})
	productSpecificationMapping              = queries.MakeStructMapping(productSpecificationType)
	productSpecificationPrimaryKeyMapping, _ = queries.BindMapping(productSpecificationType, productSpecificationMapping, productSpecificationPrimaryKeyColumns)
	productSpecificationInsertCacheMut       sync.RWMutex
	productSpecificationInsertCache          = make(map[string]insertCache)
	productSpecificationUpdateCacheMut       sync.RWMutex
	productSpecificationUpdateCache          = make(map[string]updateCache)
	productSpecificationUpsertCacheMut       sync.RWMutex
	productSpecificationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var productSpecificationAfterSelectHooks []ProductSpecificationHook

var productSpecificationBeforeInsertHooks []ProductSpecificationHook
var productSpecificationAfterInsertHooks []ProductSpecificationHook

var productSpecificationBeforeUpdateHooks []ProductSpecificationHook
var productSpecificationAfterUpdateHooks []ProductSpecificationHook

var productSpecificationBeforeDeleteHooks []ProductSpecificationHook
var productSpecificationAfterDeleteHooks []ProductSpecificationHook

var productSpecificationBeforeUpsertHooks []ProductSpecificationHook
var productSpecificationAfterUpsertHooks []ProductSpecificationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProductSpecification) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productSpecificationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProductSpecification) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productSpecificationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProductSpecification) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productSpecificationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProductSpecification) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productSpecificationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProductSpecification) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productSpecificationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProductSpecification) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productSpecificationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProductSpecification) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productSpecificationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProductSpecification) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productSpecificationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProductSpecification) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productSpecificationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProductSpecificationHook registers your hook function for all future operations.
func AddProductSpecificationHook(hookPoint boil.HookPoint, productSpecificationHook ProductSpecificationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		productSpecificationAfterSelectHooks = append(productSpecificationAfterSelectHooks, productSpecificationHook)
	case boil.BeforeInsertHook:
		productSpecificationBeforeInsertHooks = append(productSpecificationBeforeInsertHooks, productSpecificationHook)
	case boil.AfterInsertHook:
		productSpecificationAfterInsertHooks = append(productSpecificationAfterInsertHooks, productSpecificationHook)
	case boil.BeforeUpdateHook:
		productSpecificationBeforeUpdateHooks = append(productSpecificationBeforeUpdateHooks, productSpecificationHook)
	case boil.AfterUpdateHook:
		productSpecificationAfterUpdateHooks = append(productSpecificationAfterUpdateHooks, productSpecificationHook)
	case boil.BeforeDeleteHook:
		productSpecificationBeforeDeleteHooks = append(productSpecificationBeforeDeleteHooks, productSpecificationHook)
	case boil.AfterDeleteHook:
		productSpecificationAfterDeleteHooks = append(productSpecificationAfterDeleteHooks, productSpecificationHook)
	case boil.BeforeUpsertHook:
		productSpecificationBeforeUpsertHooks = append(productSpecificationBeforeUpsertHooks, productSpecificationHook)
	case boil.AfterUpsertHook:
		productSpecificationAfterUpsertHooks = append(productSpecificationAfterUpsertHooks, productSpecificationHook)
	}
}

// One returns a single productSpecification record from the query.
func (q productSpecificationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProductSpecification, error) {
	o := &ProductSpecification{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for product_specifications")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ProductSpecification records from the query.
func (q productSpecificationQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProductSpecificationSlice, error) {
	var o []*ProductSpecification

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ProductSpecification slice")
	}

	if len(productSpecificationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ProductSpecification records in the query.
func (q productSpecificationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count product_specifications rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q productSpecificationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if product_specifications exists")
	}

	return count > 0, nil
}

// ProductCategory pointed to by the foreign key.
func (o *ProductSpecification) ProductCategory(mods ...qm.QueryMod) productCategoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProductCategoryID),
	}

	queryMods = append(queryMods, mods...)

	return ProductCategories(queryMods...)
}

// ProductSpecificationLanguages retrieves all the product_specification_language's ProductSpecificationLanguages with an executor.
func (o *ProductSpecification) ProductSpecificationLanguages(mods ...qm.QueryMod) productSpecificationLanguageQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"product_specification_languages\".\"product_specification_id\"=?", o.ID),
	)

	return ProductSpecificationLanguages(queryMods...)
}

// ProductSpecificationValues retrieves all the product_specification_value's ProductSpecificationValues with an executor.
func (o *ProductSpecification) ProductSpecificationValues(mods ...qm.QueryMod) productSpecificationValueQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"product_specification_values\".\"product_specification_id\"=?", o.ID),
	)

	return ProductSpecificationValues(queryMods...)
}

// LoadProductCategory allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productSpecificationL) LoadProductCategory(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductSpecification interface{}, mods queries.Applicator) error {
	var slice []*ProductSpecification
	var object *ProductSpecification

	if singular {
		var ok bool
		object, ok = maybeProductSpecification.(*ProductSpecification)
		if !ok {
			object = new(ProductSpecification)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductSpecification)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductSpecification))
			}
		}
	} else {
		s, ok := maybeProductSpecification.(*[]*ProductSpecification)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductSpecification)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductSpecification))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productSpecificationR{}
		}
		args = append(args, object.ProductCategoryID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productSpecificationR{}
			}

			for _, a := range args {
				if a == obj.ProductCategoryID {
					continue Outer
				}
			}

			args = append(args, obj.ProductCategoryID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_categories`),
		qm.WhereIn(`product_categories.id in ?`, args...),
		qmhelper.WhereIsNull(`product_categories.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ProductCategory")
	}

	var resultSlice []*ProductCategory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ProductCategory")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for product_categories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_categories")
	}

	if len(productCategoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductCategory = foreign
		if foreign.R == nil {
			foreign.R = &productCategoryR{}
		}
		foreign.R.ProductSpecifications = append(foreign.R.ProductSpecifications, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductCategoryID == foreign.ID {
				local.R.ProductCategory = foreign
				if foreign.R == nil {
					foreign.R = &productCategoryR{}
				}
				foreign.R.ProductSpecifications = append(foreign.R.ProductSpecifications, local)
				break
			}
		}
	}

	return nil
}

// LoadProductSpecificationLanguages allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productSpecificationL) LoadProductSpecificationLanguages(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductSpecification interface{}, mods queries.Applicator) error {
	var slice []*ProductSpecification
	var object *ProductSpecification

	if singular {
		var ok bool
		object, ok = maybeProductSpecification.(*ProductSpecification)
		if !ok {
			object = new(ProductSpecification)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductSpecification)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductSpecification))
			}
		}
	} else {
		s, ok := maybeProductSpecification.(*[]*ProductSpecification)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductSpecification)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductSpecification))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productSpecificationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productSpecificationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_specification_languages`),
		qm.WhereIn(`product_specification_languages.product_specification_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load product_specification_languages")
	}

	var resultSlice []*ProductSpecificationLanguage
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice product_specification_languages")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on product_specification_languages")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_specification_languages")
	}

	if len(productSpecificationLanguageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductSpecificationLanguages = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &productSpecificationLanguageR{}
			}
			foreign.R.ProductSpecification = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ProductSpecificationID {
				local.R.ProductSpecificationLanguages = append(local.R.ProductSpecificationLanguages, foreign)
				if foreign.R == nil {
					foreign.R = &productSpecificationLanguageR{}
				}
				foreign.R.ProductSpecification = local
				break
			}
		}
	}

	return nil
}

// LoadProductSpecificationValues allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productSpecificationL) LoadProductSpecificationValues(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductSpecification interface{}, mods queries.Applicator) error {
	var slice []*ProductSpecification
	var object *ProductSpecification

	if singular {
		var ok bool
		object, ok = maybeProductSpecification.(*ProductSpecification)
		if !ok {
			object = new(ProductSpecification)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductSpecification)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductSpecification))
			}
		}
	} else {
		s, ok := maybeProductSpecification.(*[]*ProductSpecification)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductSpecification)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductSpecification))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productSpecificationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productSpecificationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_specification_values`),
		qm.WhereIn(`product_specification_values.product_specification_id in ?`, args...),
		qmhelper.WhereIsNull(`product_specification_values.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load product_specification_values")
	}

	var resultSlice []*ProductSpecificationValue
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice product_specification_values")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on product_specification_values")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_specification_values")
	}

	if len(productSpecificationValueAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductSpecificationValues = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &productSpecificationValueR{}
			}
			foreign.R.ProductSpecification = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ProductSpecificationID {
				local.R.ProductSpecificationValues = append(local.R.ProductSpecificationValues, foreign)
				if foreign.R == nil {
					foreign.R = &productSpecificationValueR{}
				}
				foreign.R.ProductSpecification = local
				break
			}
		}
	}

	return nil
}

// SetProductCategory of the productSpecification to the related item.
// Sets o.R.ProductCategory to related.
// Adds o to related.R.ProductSpecifications.
func (o *ProductSpecification) SetProductCategory(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ProductCategory) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"product_specifications\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"product_category_id"}),
		strmangle.WhereClause("\"", "\"", 2, productSpecificationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductCategoryID = related.ID
	if o.R == nil {
		o.R = &productSpecificationR{
			ProductCategory: related,
		}
	} else {
		o.R.ProductCategory = related
	}

	if related.R == nil {
		related.R = &productCategoryR{
			ProductSpecifications: ProductSpecificationSlice{o},
		}
	} else {
		related.R.ProductSpecifications = append(related.R.ProductSpecifications, o)
	}

	return nil
}

// AddProductSpecificationLanguages adds the given related objects to the existing relationships
// of the product_specification, optionally inserting them as new records.
// Appends related to o.R.ProductSpecificationLanguages.
// Sets related.R.ProductSpecification appropriately.
func (o *ProductSpecification) AddProductSpecificationLanguages(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProductSpecificationLanguage) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductSpecificationID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"product_specification_languages\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"product_specification_id"}),
				strmangle.WhereClause("\"", "\"", 2, productSpecificationLanguagePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductSpecificationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &productSpecificationR{
			ProductSpecificationLanguages: related,
		}
	} else {
		o.R.ProductSpecificationLanguages = append(o.R.ProductSpecificationLanguages, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productSpecificationLanguageR{
				ProductSpecification: o,
			}
		} else {
			rel.R.ProductSpecification = o
		}
	}
	return nil
}

// AddProductSpecificationValues adds the given related objects to the existing relationships
// of the product_specification, optionally inserting them as new records.
// Appends related to o.R.ProductSpecificationValues.
// Sets related.R.ProductSpecification appropriately.
func (o *ProductSpecification) AddProductSpecificationValues(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProductSpecificationValue) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductSpecificationID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"product_specification_values\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"product_specification_id"}),
				strmangle.WhereClause("\"", "\"", 2, productSpecificationValuePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductSpecificationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &productSpecificationR{
			ProductSpecificationValues: related,
		}
	} else {
		o.R.ProductSpecificationValues = append(o.R.ProductSpecificationValues, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productSpecificationValueR{
				ProductSpecification: o,
			}
		} else {
			rel.R.ProductSpecification = o
		}
	}
	return nil
}

// ProductSpecifications retrieves all the records using an executor.
func ProductSpecifications(mods ...qm.QueryMod) productSpecificationQuery {
	mods = append(mods, qm.From("\"product_specifications\""), qmhelper.WhereIsNull("\"product_specifications\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"product_specifications\".*"})
	}

	return productSpecificationQuery{q}
}

// FindProductSpecification retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProductSpecification(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ProductSpecification, error) {
	productSpecificationObj := &ProductSpecification{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"product_specifications\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, productSpecificationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from product_specifications")
	}

	if err = productSpecificationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return productSpecificationObj, err
	}

	return productSpecificationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProductSpecification) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no product_specifications provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productSpecificationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productSpecificationInsertCacheMut.RLock()
	cache, cached := productSpecificationInsertCache[key]
	productSpecificationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productSpecificationAllColumns,
			productSpecificationColumnsWithDefault,
			productSpecificationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(productSpecificationType, productSpecificationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productSpecificationType, productSpecificationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"product_specifications\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"product_specifications\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into product_specifications")
	}

	if !cached {
		productSpecificationInsertCacheMut.Lock()
		productSpecificationInsertCache[key] = cache
		productSpecificationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ProductSpecification.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProductSpecification) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	productSpecificationUpdateCacheMut.RLock()
	cache, cached := productSpecificationUpdateCache[key]
	productSpecificationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productSpecificationAllColumns,
			productSpecificationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update product_specifications, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"product_specifications\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, productSpecificationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productSpecificationType, productSpecificationMapping, append(wl, productSpecificationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update product_specifications row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for product_specifications")
	}

	if !cached {
		productSpecificationUpdateCacheMut.Lock()
		productSpecificationUpdateCache[key] = cache
		productSpecificationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q productSpecificationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for product_specifications")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for product_specifications")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductSpecificationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productSpecificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"product_specifications\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, productSpecificationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in productSpecification slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all productSpecification")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProductSpecification) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no product_specifications provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productSpecificationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productSpecificationUpsertCacheMut.RLock()
	cache, cached := productSpecificationUpsertCache[key]
	productSpecificationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			productSpecificationAllColumns,
			productSpecificationColumnsWithDefault,
			productSpecificationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			productSpecificationAllColumns,
			productSpecificationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert product_specifications, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(productSpecificationPrimaryKeyColumns))
			copy(conflict, productSpecificationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"product_specifications\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(productSpecificationType, productSpecificationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productSpecificationType, productSpecificationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert product_specifications")
	}

	if !cached {
		productSpecificationUpsertCacheMut.Lock()
		productSpecificationUpsertCache[key] = cache
		productSpecificationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ProductSpecification record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProductSpecification) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ProductSpecification provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productSpecificationPrimaryKeyMapping)
		sql = "DELETE FROM \"product_specifications\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"product_specifications\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(productSpecificationType, productSpecificationMapping, append(wl, productSpecificationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from product_specifications")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for product_specifications")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q productSpecificationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no productSpecificationQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from product_specifications")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for product_specifications")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductSpecificationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(productSpecificationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productSpecificationPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"product_specifications\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productSpecificationPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productSpecificationPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"product_specifications\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, productSpecificationPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from productSpecification slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for product_specifications")
	}

	if len(productSpecificationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProductSpecification) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProductSpecification(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductSpecificationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductSpecificationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productSpecificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"product_specifications\".* FROM \"product_specifications\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productSpecificationPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProductSpecificationSlice")
	}

	*o = slice

	return nil
}

// ProductSpecificationExists checks if the ProductSpecification row exists.
func ProductSpecificationExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"product_specifications\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if product_specifications exists")
	}

	return exists, nil
}

// Exists checks if the ProductSpecification row exists.
func (o *ProductSpecification) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ProductSpecificationExists(ctx, exec, o.ID)
}
