// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProductPriceMarkup is an object representing the database table.
type ProductPriceMarkup struct {
	ID                          int64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	ProductCategoryID           null.Int64 `boil:"product_category_id" json:"product_category_id,omitempty" toml:"product_category_id" yaml:"product_category_id,omitempty"`
	BrandID                     null.Int64 `boil:"brand_id" json:"brand_id,omitempty" toml:"brand_id" yaml:"brand_id,omitempty"`
	ProductID                   null.Int64 `boil:"product_id" json:"product_id,omitempty" toml:"product_id" yaml:"product_id,omitempty"`
	MarkupPercentage            int        `boil:"markup_percentage" json:"markup_percentage" toml:"markup_percentage" yaml:"markup_percentage"`
	DeletedAt                   null.Time  `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	UpdatedAt                   time.Time  `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt                   time.Time  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	ProductSpecificationValueID null.Int64 `boil:"product_specification_value_id" json:"product_specification_value_id,omitempty" toml:"product_specification_value_id" yaml:"product_specification_value_id,omitempty"`

	R *productPriceMarkupR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productPriceMarkupL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductPriceMarkupColumns = struct {
	ID                          string
	ProductCategoryID           string
	BrandID                     string
	ProductID                   string
	MarkupPercentage            string
	DeletedAt                   string
	UpdatedAt                   string
	CreatedAt                   string
	ProductSpecificationValueID string
}{
	ID:                          "id",
	ProductCategoryID:           "product_category_id",
	BrandID:                     "brand_id",
	ProductID:                   "product_id",
	MarkupPercentage:            "markup_percentage",
	DeletedAt:                   "deleted_at",
	UpdatedAt:                   "updated_at",
	CreatedAt:                   "created_at",
	ProductSpecificationValueID: "product_specification_value_id",
}

var ProductPriceMarkupTableColumns = struct {
	ID                          string
	ProductCategoryID           string
	BrandID                     string
	ProductID                   string
	MarkupPercentage            string
	DeletedAt                   string
	UpdatedAt                   string
	CreatedAt                   string
	ProductSpecificationValueID string
}{
	ID:                          "product_price_markup.id",
	ProductCategoryID:           "product_price_markup.product_category_id",
	BrandID:                     "product_price_markup.brand_id",
	ProductID:                   "product_price_markup.product_id",
	MarkupPercentage:            "product_price_markup.markup_percentage",
	DeletedAt:                   "product_price_markup.deleted_at",
	UpdatedAt:                   "product_price_markup.updated_at",
	CreatedAt:                   "product_price_markup.created_at",
	ProductSpecificationValueID: "product_price_markup.product_specification_value_id",
}

// Generated where

var ProductPriceMarkupWhere = struct {
	ID                          whereHelperint64
	ProductCategoryID           whereHelpernull_Int64
	BrandID                     whereHelpernull_Int64
	ProductID                   whereHelpernull_Int64
	MarkupPercentage            whereHelperint
	DeletedAt                   whereHelpernull_Time
	UpdatedAt                   whereHelpertime_Time
	CreatedAt                   whereHelpertime_Time
	ProductSpecificationValueID whereHelpernull_Int64
}{
	ID:                          whereHelperint64{field: "\"product_price_markup\".\"id\""},
	ProductCategoryID:           whereHelpernull_Int64{field: "\"product_price_markup\".\"product_category_id\""},
	BrandID:                     whereHelpernull_Int64{field: "\"product_price_markup\".\"brand_id\""},
	ProductID:                   whereHelpernull_Int64{field: "\"product_price_markup\".\"product_id\""},
	MarkupPercentage:            whereHelperint{field: "\"product_price_markup\".\"markup_percentage\""},
	DeletedAt:                   whereHelpernull_Time{field: "\"product_price_markup\".\"deleted_at\""},
	UpdatedAt:                   whereHelpertime_Time{field: "\"product_price_markup\".\"updated_at\""},
	CreatedAt:                   whereHelpertime_Time{field: "\"product_price_markup\".\"created_at\""},
	ProductSpecificationValueID: whereHelpernull_Int64{field: "\"product_price_markup\".\"product_specification_value_id\""},
}

// ProductPriceMarkupRels is where relationship names are stored.
var ProductPriceMarkupRels = struct {
	Brand                     string
	Product                   string
	ProductCategory           string
	ProductSpecificationValue string
}{
	Brand:                     "Brand",
	Product:                   "Product",
	ProductCategory:           "ProductCategory",
	ProductSpecificationValue: "ProductSpecificationValue",
}

// productPriceMarkupR is where relationships are stored.
type productPriceMarkupR struct {
	Brand                     *Brand                     `boil:"Brand" json:"Brand" toml:"Brand" yaml:"Brand"`
	Product                   *Product                   `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	ProductCategory           *ProductCategory           `boil:"ProductCategory" json:"ProductCategory" toml:"ProductCategory" yaml:"ProductCategory"`
	ProductSpecificationValue *ProductSpecificationValue `boil:"ProductSpecificationValue" json:"ProductSpecificationValue" toml:"ProductSpecificationValue" yaml:"ProductSpecificationValue"`
}

// NewStruct creates a new relationship struct
func (*productPriceMarkupR) NewStruct() *productPriceMarkupR {
	return &productPriceMarkupR{}
}

func (r *productPriceMarkupR) GetBrand() *Brand {
	if r == nil {
		return nil
	}
	return r.Brand
}

func (r *productPriceMarkupR) GetProduct() *Product {
	if r == nil {
		return nil
	}
	return r.Product
}

func (r *productPriceMarkupR) GetProductCategory() *ProductCategory {
	if r == nil {
		return nil
	}
	return r.ProductCategory
}

func (r *productPriceMarkupR) GetProductSpecificationValue() *ProductSpecificationValue {
	if r == nil {
		return nil
	}
	return r.ProductSpecificationValue
}

// productPriceMarkupL is where Load methods for each relationship are stored.
type productPriceMarkupL struct{}

var (
	productPriceMarkupAllColumns            = []string{"id", "product_category_id", "brand_id", "product_id", "markup_percentage", "deleted_at", "updated_at", "created_at", "product_specification_value_id"}
	productPriceMarkupColumnsWithoutDefault = []string{"markup_percentage"}
	productPriceMarkupColumnsWithDefault    = []string{"id", "product_category_id", "brand_id", "product_id", "deleted_at", "updated_at", "created_at", "product_specification_value_id"}
	productPriceMarkupPrimaryKeyColumns     = []string{"id"}
	productPriceMarkupGeneratedColumns      = []string{}
)

type (
	// ProductPriceMarkupSlice is an alias for a slice of pointers to ProductPriceMarkup.
	// This should almost always be used instead of []ProductPriceMarkup.
	ProductPriceMarkupSlice []*ProductPriceMarkup
	// ProductPriceMarkupHook is the signature for custom ProductPriceMarkup hook methods
	ProductPriceMarkupHook func(context.Context, boil.ContextExecutor, *ProductPriceMarkup) error

	productPriceMarkupQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productPriceMarkupType                 = reflect.TypeOf(&ProductPriceMarkup{})
	productPriceMarkupMapping              = queries.MakeStructMapping(productPriceMarkupType)
	productPriceMarkupPrimaryKeyMapping, _ = queries.BindMapping(productPriceMarkupType, productPriceMarkupMapping, productPriceMarkupPrimaryKeyColumns)
	productPriceMarkupInsertCacheMut       sync.RWMutex
	productPriceMarkupInsertCache          = make(map[string]insertCache)
	productPriceMarkupUpdateCacheMut       sync.RWMutex
	productPriceMarkupUpdateCache          = make(map[string]updateCache)
	productPriceMarkupUpsertCacheMut       sync.RWMutex
	productPriceMarkupUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var productPriceMarkupAfterSelectHooks []ProductPriceMarkupHook

var productPriceMarkupBeforeInsertHooks []ProductPriceMarkupHook
var productPriceMarkupAfterInsertHooks []ProductPriceMarkupHook

var productPriceMarkupBeforeUpdateHooks []ProductPriceMarkupHook
var productPriceMarkupAfterUpdateHooks []ProductPriceMarkupHook

var productPriceMarkupBeforeDeleteHooks []ProductPriceMarkupHook
var productPriceMarkupAfterDeleteHooks []ProductPriceMarkupHook

var productPriceMarkupBeforeUpsertHooks []ProductPriceMarkupHook
var productPriceMarkupAfterUpsertHooks []ProductPriceMarkupHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProductPriceMarkup) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productPriceMarkupAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProductPriceMarkup) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productPriceMarkupBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProductPriceMarkup) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productPriceMarkupAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProductPriceMarkup) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productPriceMarkupBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProductPriceMarkup) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productPriceMarkupAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProductPriceMarkup) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productPriceMarkupBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProductPriceMarkup) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productPriceMarkupAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProductPriceMarkup) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productPriceMarkupBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProductPriceMarkup) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productPriceMarkupAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProductPriceMarkupHook registers your hook function for all future operations.
func AddProductPriceMarkupHook(hookPoint boil.HookPoint, productPriceMarkupHook ProductPriceMarkupHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		productPriceMarkupAfterSelectHooks = append(productPriceMarkupAfterSelectHooks, productPriceMarkupHook)
	case boil.BeforeInsertHook:
		productPriceMarkupBeforeInsertHooks = append(productPriceMarkupBeforeInsertHooks, productPriceMarkupHook)
	case boil.AfterInsertHook:
		productPriceMarkupAfterInsertHooks = append(productPriceMarkupAfterInsertHooks, productPriceMarkupHook)
	case boil.BeforeUpdateHook:
		productPriceMarkupBeforeUpdateHooks = append(productPriceMarkupBeforeUpdateHooks, productPriceMarkupHook)
	case boil.AfterUpdateHook:
		productPriceMarkupAfterUpdateHooks = append(productPriceMarkupAfterUpdateHooks, productPriceMarkupHook)
	case boil.BeforeDeleteHook:
		productPriceMarkupBeforeDeleteHooks = append(productPriceMarkupBeforeDeleteHooks, productPriceMarkupHook)
	case boil.AfterDeleteHook:
		productPriceMarkupAfterDeleteHooks = append(productPriceMarkupAfterDeleteHooks, productPriceMarkupHook)
	case boil.BeforeUpsertHook:
		productPriceMarkupBeforeUpsertHooks = append(productPriceMarkupBeforeUpsertHooks, productPriceMarkupHook)
	case boil.AfterUpsertHook:
		productPriceMarkupAfterUpsertHooks = append(productPriceMarkupAfterUpsertHooks, productPriceMarkupHook)
	}
}

// One returns a single productPriceMarkup record from the query.
func (q productPriceMarkupQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProductPriceMarkup, error) {
	o := &ProductPriceMarkup{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for product_price_markup")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ProductPriceMarkup records from the query.
func (q productPriceMarkupQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProductPriceMarkupSlice, error) {
	var o []*ProductPriceMarkup

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ProductPriceMarkup slice")
	}

	if len(productPriceMarkupAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ProductPriceMarkup records in the query.
func (q productPriceMarkupQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count product_price_markup rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q productPriceMarkupQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if product_price_markup exists")
	}

	return count > 0, nil
}

// Brand pointed to by the foreign key.
func (o *ProductPriceMarkup) Brand(mods ...qm.QueryMod) brandQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BrandID),
	}

	queryMods = append(queryMods, mods...)

	return Brands(queryMods...)
}

// Product pointed to by the foreign key.
func (o *ProductPriceMarkup) Product(mods ...qm.QueryMod) productQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProductID),
	}

	queryMods = append(queryMods, mods...)

	return Products(queryMods...)
}

// ProductCategory pointed to by the foreign key.
func (o *ProductPriceMarkup) ProductCategory(mods ...qm.QueryMod) productCategoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProductCategoryID),
	}

	queryMods = append(queryMods, mods...)

	return ProductCategories(queryMods...)
}

// ProductSpecificationValue pointed to by the foreign key.
func (o *ProductPriceMarkup) ProductSpecificationValue(mods ...qm.QueryMod) productSpecificationValueQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProductSpecificationValueID),
	}

	queryMods = append(queryMods, mods...)

	return ProductSpecificationValues(queryMods...)
}

// LoadBrand allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productPriceMarkupL) LoadBrand(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductPriceMarkup interface{}, mods queries.Applicator) error {
	var slice []*ProductPriceMarkup
	var object *ProductPriceMarkup

	if singular {
		var ok bool
		object, ok = maybeProductPriceMarkup.(*ProductPriceMarkup)
		if !ok {
			object = new(ProductPriceMarkup)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductPriceMarkup)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductPriceMarkup))
			}
		}
	} else {
		s, ok := maybeProductPriceMarkup.(*[]*ProductPriceMarkup)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductPriceMarkup)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductPriceMarkup))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productPriceMarkupR{}
		}
		if !queries.IsNil(object.BrandID) {
			args = append(args, object.BrandID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productPriceMarkupR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BrandID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BrandID) {
				args = append(args, obj.BrandID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`brands`),
		qm.WhereIn(`brands.id in ?`, args...),
		qmhelper.WhereIsNull(`brands.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Brand")
	}

	var resultSlice []*Brand
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Brand")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for brands")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for brands")
	}

	if len(brandAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Brand = foreign
		if foreign.R == nil {
			foreign.R = &brandR{}
		}
		foreign.R.ProductPriceMarkups = append(foreign.R.ProductPriceMarkups, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BrandID, foreign.ID) {
				local.R.Brand = foreign
				if foreign.R == nil {
					foreign.R = &brandR{}
				}
				foreign.R.ProductPriceMarkups = append(foreign.R.ProductPriceMarkups, local)
				break
			}
		}
	}

	return nil
}

// LoadProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productPriceMarkupL) LoadProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductPriceMarkup interface{}, mods queries.Applicator) error {
	var slice []*ProductPriceMarkup
	var object *ProductPriceMarkup

	if singular {
		var ok bool
		object, ok = maybeProductPriceMarkup.(*ProductPriceMarkup)
		if !ok {
			object = new(ProductPriceMarkup)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductPriceMarkup)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductPriceMarkup))
			}
		}
	} else {
		s, ok := maybeProductPriceMarkup.(*[]*ProductPriceMarkup)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductPriceMarkup)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductPriceMarkup))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productPriceMarkupR{}
		}
		if !queries.IsNil(object.ProductID) {
			args = append(args, object.ProductID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productPriceMarkupR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProductID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ProductID) {
				args = append(args, obj.ProductID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`products`),
		qm.WhereIn(`products.id in ?`, args...),
		qmhelper.WhereIsNull(`products.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Product")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Product")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Product = foreign
		if foreign.R == nil {
			foreign.R = &productR{}
		}
		foreign.R.ProductPriceMarkups = append(foreign.R.ProductPriceMarkups, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ProductID, foreign.ID) {
				local.R.Product = foreign
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.ProductPriceMarkups = append(foreign.R.ProductPriceMarkups, local)
				break
			}
		}
	}

	return nil
}

// LoadProductCategory allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productPriceMarkupL) LoadProductCategory(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductPriceMarkup interface{}, mods queries.Applicator) error {
	var slice []*ProductPriceMarkup
	var object *ProductPriceMarkup

	if singular {
		var ok bool
		object, ok = maybeProductPriceMarkup.(*ProductPriceMarkup)
		if !ok {
			object = new(ProductPriceMarkup)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductPriceMarkup)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductPriceMarkup))
			}
		}
	} else {
		s, ok := maybeProductPriceMarkup.(*[]*ProductPriceMarkup)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductPriceMarkup)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductPriceMarkup))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productPriceMarkupR{}
		}
		if !queries.IsNil(object.ProductCategoryID) {
			args = append(args, object.ProductCategoryID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productPriceMarkupR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProductCategoryID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ProductCategoryID) {
				args = append(args, obj.ProductCategoryID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_categories`),
		qm.WhereIn(`product_categories.id in ?`, args...),
		qmhelper.WhereIsNull(`product_categories.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ProductCategory")
	}

	var resultSlice []*ProductCategory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ProductCategory")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for product_categories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_categories")
	}

	if len(productCategoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductCategory = foreign
		if foreign.R == nil {
			foreign.R = &productCategoryR{}
		}
		foreign.R.ProductPriceMarkups = append(foreign.R.ProductPriceMarkups, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ProductCategoryID, foreign.ID) {
				local.R.ProductCategory = foreign
				if foreign.R == nil {
					foreign.R = &productCategoryR{}
				}
				foreign.R.ProductPriceMarkups = append(foreign.R.ProductPriceMarkups, local)
				break
			}
		}
	}

	return nil
}

// LoadProductSpecificationValue allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productPriceMarkupL) LoadProductSpecificationValue(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductPriceMarkup interface{}, mods queries.Applicator) error {
	var slice []*ProductPriceMarkup
	var object *ProductPriceMarkup

	if singular {
		var ok bool
		object, ok = maybeProductPriceMarkup.(*ProductPriceMarkup)
		if !ok {
			object = new(ProductPriceMarkup)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductPriceMarkup)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductPriceMarkup))
			}
		}
	} else {
		s, ok := maybeProductPriceMarkup.(*[]*ProductPriceMarkup)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductPriceMarkup)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductPriceMarkup))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productPriceMarkupR{}
		}
		if !queries.IsNil(object.ProductSpecificationValueID) {
			args = append(args, object.ProductSpecificationValueID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productPriceMarkupR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProductSpecificationValueID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ProductSpecificationValueID) {
				args = append(args, obj.ProductSpecificationValueID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_specification_values`),
		qm.WhereIn(`product_specification_values.id in ?`, args...),
		qmhelper.WhereIsNull(`product_specification_values.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ProductSpecificationValue")
	}

	var resultSlice []*ProductSpecificationValue
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ProductSpecificationValue")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for product_specification_values")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_specification_values")
	}

	if len(productSpecificationValueAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductSpecificationValue = foreign
		if foreign.R == nil {
			foreign.R = &productSpecificationValueR{}
		}
		foreign.R.ProductPriceMarkups = append(foreign.R.ProductPriceMarkups, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ProductSpecificationValueID, foreign.ID) {
				local.R.ProductSpecificationValue = foreign
				if foreign.R == nil {
					foreign.R = &productSpecificationValueR{}
				}
				foreign.R.ProductPriceMarkups = append(foreign.R.ProductPriceMarkups, local)
				break
			}
		}
	}

	return nil
}

// SetBrand of the productPriceMarkup to the related item.
// Sets o.R.Brand to related.
// Adds o to related.R.ProductPriceMarkups.
func (o *ProductPriceMarkup) SetBrand(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Brand) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"product_price_markup\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"brand_id"}),
		strmangle.WhereClause("\"", "\"", 2, productPriceMarkupPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BrandID, related.ID)
	if o.R == nil {
		o.R = &productPriceMarkupR{
			Brand: related,
		}
	} else {
		o.R.Brand = related
	}

	if related.R == nil {
		related.R = &brandR{
			ProductPriceMarkups: ProductPriceMarkupSlice{o},
		}
	} else {
		related.R.ProductPriceMarkups = append(related.R.ProductPriceMarkups, o)
	}

	return nil
}

// RemoveBrand relationship.
// Sets o.R.Brand to nil.
// Removes o from all passed in related items' relationships struct.
func (o *ProductPriceMarkup) RemoveBrand(ctx context.Context, exec boil.ContextExecutor, related *Brand) error {
	var err error

	queries.SetScanner(&o.BrandID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("brand_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Brand = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ProductPriceMarkups {
		if queries.Equal(o.BrandID, ri.BrandID) {
			continue
		}

		ln := len(related.R.ProductPriceMarkups)
		if ln > 1 && i < ln-1 {
			related.R.ProductPriceMarkups[i] = related.R.ProductPriceMarkups[ln-1]
		}
		related.R.ProductPriceMarkups = related.R.ProductPriceMarkups[:ln-1]
		break
	}
	return nil
}

// SetProduct of the productPriceMarkup to the related item.
// Sets o.R.Product to related.
// Adds o to related.R.ProductPriceMarkups.
func (o *ProductPriceMarkup) SetProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Product) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"product_price_markup\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"product_id"}),
		strmangle.WhereClause("\"", "\"", 2, productPriceMarkupPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ProductID, related.ID)
	if o.R == nil {
		o.R = &productPriceMarkupR{
			Product: related,
		}
	} else {
		o.R.Product = related
	}

	if related.R == nil {
		related.R = &productR{
			ProductPriceMarkups: ProductPriceMarkupSlice{o},
		}
	} else {
		related.R.ProductPriceMarkups = append(related.R.ProductPriceMarkups, o)
	}

	return nil
}

// RemoveProduct relationship.
// Sets o.R.Product to nil.
// Removes o from all passed in related items' relationships struct.
func (o *ProductPriceMarkup) RemoveProduct(ctx context.Context, exec boil.ContextExecutor, related *Product) error {
	var err error

	queries.SetScanner(&o.ProductID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("product_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Product = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ProductPriceMarkups {
		if queries.Equal(o.ProductID, ri.ProductID) {
			continue
		}

		ln := len(related.R.ProductPriceMarkups)
		if ln > 1 && i < ln-1 {
			related.R.ProductPriceMarkups[i] = related.R.ProductPriceMarkups[ln-1]
		}
		related.R.ProductPriceMarkups = related.R.ProductPriceMarkups[:ln-1]
		break
	}
	return nil
}

// SetProductCategory of the productPriceMarkup to the related item.
// Sets o.R.ProductCategory to related.
// Adds o to related.R.ProductPriceMarkups.
func (o *ProductPriceMarkup) SetProductCategory(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ProductCategory) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"product_price_markup\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"product_category_id"}),
		strmangle.WhereClause("\"", "\"", 2, productPriceMarkupPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ProductCategoryID, related.ID)
	if o.R == nil {
		o.R = &productPriceMarkupR{
			ProductCategory: related,
		}
	} else {
		o.R.ProductCategory = related
	}

	if related.R == nil {
		related.R = &productCategoryR{
			ProductPriceMarkups: ProductPriceMarkupSlice{o},
		}
	} else {
		related.R.ProductPriceMarkups = append(related.R.ProductPriceMarkups, o)
	}

	return nil
}

// RemoveProductCategory relationship.
// Sets o.R.ProductCategory to nil.
// Removes o from all passed in related items' relationships struct.
func (o *ProductPriceMarkup) RemoveProductCategory(ctx context.Context, exec boil.ContextExecutor, related *ProductCategory) error {
	var err error

	queries.SetScanner(&o.ProductCategoryID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("product_category_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ProductCategory = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ProductPriceMarkups {
		if queries.Equal(o.ProductCategoryID, ri.ProductCategoryID) {
			continue
		}

		ln := len(related.R.ProductPriceMarkups)
		if ln > 1 && i < ln-1 {
			related.R.ProductPriceMarkups[i] = related.R.ProductPriceMarkups[ln-1]
		}
		related.R.ProductPriceMarkups = related.R.ProductPriceMarkups[:ln-1]
		break
	}
	return nil
}

// SetProductSpecificationValue of the productPriceMarkup to the related item.
// Sets o.R.ProductSpecificationValue to related.
// Adds o to related.R.ProductPriceMarkups.
func (o *ProductPriceMarkup) SetProductSpecificationValue(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ProductSpecificationValue) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"product_price_markup\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"product_specification_value_id"}),
		strmangle.WhereClause("\"", "\"", 2, productPriceMarkupPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ProductSpecificationValueID, related.ID)
	if o.R == nil {
		o.R = &productPriceMarkupR{
			ProductSpecificationValue: related,
		}
	} else {
		o.R.ProductSpecificationValue = related
	}

	if related.R == nil {
		related.R = &productSpecificationValueR{
			ProductPriceMarkups: ProductPriceMarkupSlice{o},
		}
	} else {
		related.R.ProductPriceMarkups = append(related.R.ProductPriceMarkups, o)
	}

	return nil
}

// RemoveProductSpecificationValue relationship.
// Sets o.R.ProductSpecificationValue to nil.
// Removes o from all passed in related items' relationships struct.
func (o *ProductPriceMarkup) RemoveProductSpecificationValue(ctx context.Context, exec boil.ContextExecutor, related *ProductSpecificationValue) error {
	var err error

	queries.SetScanner(&o.ProductSpecificationValueID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("product_specification_value_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ProductSpecificationValue = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ProductPriceMarkups {
		if queries.Equal(o.ProductSpecificationValueID, ri.ProductSpecificationValueID) {
			continue
		}

		ln := len(related.R.ProductPriceMarkups)
		if ln > 1 && i < ln-1 {
			related.R.ProductPriceMarkups[i] = related.R.ProductPriceMarkups[ln-1]
		}
		related.R.ProductPriceMarkups = related.R.ProductPriceMarkups[:ln-1]
		break
	}
	return nil
}

// ProductPriceMarkups retrieves all the records using an executor.
func ProductPriceMarkups(mods ...qm.QueryMod) productPriceMarkupQuery {
	mods = append(mods, qm.From("\"product_price_markup\""), qmhelper.WhereIsNull("\"product_price_markup\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"product_price_markup\".*"})
	}

	return productPriceMarkupQuery{q}
}

// FindProductPriceMarkup retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProductPriceMarkup(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ProductPriceMarkup, error) {
	productPriceMarkupObj := &ProductPriceMarkup{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"product_price_markup\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, productPriceMarkupObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from product_price_markup")
	}

	if err = productPriceMarkupObj.doAfterSelectHooks(ctx, exec); err != nil {
		return productPriceMarkupObj, err
	}

	return productPriceMarkupObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProductPriceMarkup) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no product_price_markup provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productPriceMarkupColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productPriceMarkupInsertCacheMut.RLock()
	cache, cached := productPriceMarkupInsertCache[key]
	productPriceMarkupInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productPriceMarkupAllColumns,
			productPriceMarkupColumnsWithDefault,
			productPriceMarkupColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(productPriceMarkupType, productPriceMarkupMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productPriceMarkupType, productPriceMarkupMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"product_price_markup\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"product_price_markup\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into product_price_markup")
	}

	if !cached {
		productPriceMarkupInsertCacheMut.Lock()
		productPriceMarkupInsertCache[key] = cache
		productPriceMarkupInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ProductPriceMarkup.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProductPriceMarkup) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	productPriceMarkupUpdateCacheMut.RLock()
	cache, cached := productPriceMarkupUpdateCache[key]
	productPriceMarkupUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productPriceMarkupAllColumns,
			productPriceMarkupPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update product_price_markup, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"product_price_markup\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, productPriceMarkupPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productPriceMarkupType, productPriceMarkupMapping, append(wl, productPriceMarkupPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update product_price_markup row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for product_price_markup")
	}

	if !cached {
		productPriceMarkupUpdateCacheMut.Lock()
		productPriceMarkupUpdateCache[key] = cache
		productPriceMarkupUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q productPriceMarkupQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for product_price_markup")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for product_price_markup")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductPriceMarkupSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productPriceMarkupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"product_price_markup\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, productPriceMarkupPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in productPriceMarkup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all productPriceMarkup")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProductPriceMarkup) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no product_price_markup provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productPriceMarkupColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productPriceMarkupUpsertCacheMut.RLock()
	cache, cached := productPriceMarkupUpsertCache[key]
	productPriceMarkupUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			productPriceMarkupAllColumns,
			productPriceMarkupColumnsWithDefault,
			productPriceMarkupColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			productPriceMarkupAllColumns,
			productPriceMarkupPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert product_price_markup, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(productPriceMarkupPrimaryKeyColumns))
			copy(conflict, productPriceMarkupPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"product_price_markup\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(productPriceMarkupType, productPriceMarkupMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productPriceMarkupType, productPriceMarkupMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert product_price_markup")
	}

	if !cached {
		productPriceMarkupUpsertCacheMut.Lock()
		productPriceMarkupUpsertCache[key] = cache
		productPriceMarkupUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ProductPriceMarkup record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProductPriceMarkup) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ProductPriceMarkup provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productPriceMarkupPrimaryKeyMapping)
		sql = "DELETE FROM \"product_price_markup\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"product_price_markup\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(productPriceMarkupType, productPriceMarkupMapping, append(wl, productPriceMarkupPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from product_price_markup")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for product_price_markup")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q productPriceMarkupQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no productPriceMarkupQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from product_price_markup")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for product_price_markup")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductPriceMarkupSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(productPriceMarkupBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productPriceMarkupPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"product_price_markup\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productPriceMarkupPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productPriceMarkupPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"product_price_markup\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, productPriceMarkupPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from productPriceMarkup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for product_price_markup")
	}

	if len(productPriceMarkupAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProductPriceMarkup) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProductPriceMarkup(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductPriceMarkupSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductPriceMarkupSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productPriceMarkupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"product_price_markup\".* FROM \"product_price_markup\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productPriceMarkupPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProductPriceMarkupSlice")
	}

	*o = slice

	return nil
}

// ProductPriceMarkupExists checks if the ProductPriceMarkup row exists.
func ProductPriceMarkupExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"product_price_markup\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if product_price_markup exists")
	}

	return exists, nil
}

// Exists checks if the ProductPriceMarkup row exists.
func (o *ProductPriceMarkup) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ProductPriceMarkupExists(ctx, exec, o.ID)
}
