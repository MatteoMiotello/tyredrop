// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type AdditionValue struct {
	AdditionName string  `json:"additionName"`
	Value        float64 `json:"value"`
}

type BillingInput struct {
	LegalEntityTypeID int64   `json:"legalEntityTypeID"`
	Name              string  `json:"name"`
	Surname           *string `json:"surname,omitempty"`
	FiscalCode        string  `json:"fiscalCode"`
	VatNumber         *string `json:"vatNumber,omitempty"`
	AddressLine1      string  `json:"addressLine1"`
	AddressLine2      *string `json:"addressLine2,omitempty"`
	City              string  `json:"city"`
	Province          string  `json:"province"`
	Cap               string  `json:"cap"`
	Country           string  `json:"country"`
}

type Brand struct {
	ID        int64  `json:"id"`
	Name      string `json:"name"`
	Code      string `json:"code"`
	ImageLogo string `json:"image_logo"`
	Quality   *int   `json:"quality,omitempty"`
}

type CartResponse struct {
	Items      []*Cart     `json:"items"`
	TotalPrice *TotalPrice `json:"totalPrice,omitempty"`
}

type CreateAdminUserInput struct {
	Name     string `json:"name"`
	Surname  string `json:"surname"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

type CreateUserBilling struct {
	LegalEntityTypeID int64   `json:"legalEntityTypeId"`
	Name              string  `json:"name"`
	Surname           *string `json:"surname,omitempty"`
	FiscalCode        *string `json:"fiscalCode,omitempty"`
	VatNumber         string  `json:"vatNumber"`
	AddressLine1      string  `json:"addressLine1"`
	AddressLine2      *string `json:"addressLine2,omitempty"`
	City              string  `json:"city"`
	Province          string  `json:"province"`
	Cap               string  `json:"cap"`
	Country           string  `json:"country"`
	Iban              string  `json:"iban"`
	SdiCode           *string `json:"sdiCode,omitempty"`
	SdiPec            *string `json:"sdiPec,omitempty"`
}

type Currency struct {
	ID      int64  `json:"id"`
	IsoCode string `json:"iso_code"`
	Symbol  string `json:"symbol"`
	Tag     string `json:"tag"`
	Name    string `json:"name"`
}

type InvoiceFilter struct {
	UserBillingID *int64  `json:"userBillingId,omitempty"`
	Number        *string `json:"number,omitempty"`
	From          *string `json:"from,omitempty"`
	To            *string `json:"to,omitempty"`
	Status        *string `json:"status,omitempty"`
}

type InvoicePaginator struct {
	Data       []*Invoice  `json:"data"`
	Pagination *Pagination `json:"pagination"`
}

type LegalEntityType struct {
	ID       int64  `json:"id"`
	Name     string `json:"name"`
	IsPerson bool   `json:"isPerson"`
}

type OrderFilterInput struct {
	DateFrom *string `json:"dateFrom,omitempty"`
	DateTo   *string `json:"dateTo,omitempty"`
	Number   *string `json:"number,omitempty"`
}

type OrderRowInput struct {
	TrackingNumber *string `json:"trackingNumber,omitempty"`
}

type OrderingInput struct {
	Column string `json:"column"`
	Desc   *bool  `json:"desc,omitempty"`
}

type OrdersFilterInput struct {
	From   *string      `json:"from,omitempty"`
	To     *string      `json:"to,omitempty"`
	Number *string      `json:"number,omitempty"`
	Status *OrderStatus `json:"status,omitempty"`
}

type OrdersPaginator struct {
	Data       []*Order    `json:"data"`
	Pagination *Pagination `json:"pagination"`
}

type Pagination struct {
	Limit       *int `json:"limit,omitempty"`
	Offset      *int `json:"offset,omitempty"`
	Totals      *int `json:"totals,omitempty"`
	CurrentPage *int `json:"currentPage,omitempty"`
	PageCount   *int `json:"pageCount,omitempty"`
}

type PaginationInput struct {
	Limit  int `json:"limit"`
	Offset int `json:"offset"`
}

type PaymentMethod struct {
	ID       int64   `json:"id"`
	Code     string  `json:"code"`
	Name     string  `json:"name"`
	Receiver *string `json:"receiver,omitempty"`
	BankName *string `json:"bank_name,omitempty"`
	Iban     *string `json:"iban,omitempty"`
}

type PriceMarkupInput struct {
	BrandID              *int64 `json:"brandId,omitempty"`
	SpecificationValueID *int64 `json:"specificationValueId,omitempty"`
	MarkupPercentage     int    `json:"markupPercentage"`
}

type ProductItemPaginate struct {
	Pagination   *Pagination    `json:"pagination,omitempty"`
	ProductItems []*ProductItem `json:"productItems,omitempty"`
}

type ProductPaginate struct {
	Pagination *Pagination `json:"pagination,omitempty"`
	Products   []*Product  `json:"products,omitempty"`
}

type ProductSearchInput struct {
	Brand          *string                      `json:"brand,omitempty"`
	Name           *string                      `json:"name,omitempty"`
	Code           *string                      `json:"code,omitempty"`
	VehicleCode    *string                      `json:"vehicleCode,omitempty"`
	Specifications []*ProductSpecificationInput `json:"specifications,omitempty"`
}

type ProductSpecificationInput struct {
	Code  string `json:"code"`
	Value string `json:"value"`
}

type StatResponse struct {
	TotalUsers  int          `json:"totalUsers"`
	TotalOrders float64      `json:"totalOrders"`
	BestUser    *UserBilling `json:"bestUser"`
}

type Supplier struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
	Code string `json:"code"`
}

type Tax struct {
	ID               int64   `json:"id"`
	MarkupPercentage float64 `json:"markupPercentage"`
	Name             string  `json:"name"`
}

type TotalPrice struct {
	Value           float64          `json:"value"`
	TotalValue      float64          `json:"totalValue"`
	TaxesValue      float64          `json:"taxesValue"`
	AdditionsValues []*AdditionValue `json:"additionsValues,omitempty"`
	Currency        *Currency        `json:"currency,omitempty"`
}

type UserAddressInput struct {
	AddressName  string  `json:"addressName"`
	AddressLine1 string  `json:"addressLine1"`
	AddressLine2 *string `json:"addressLine2,omitempty"`
	City         string  `json:"city"`
	Province     string  `json:"province"`
	PostalCode   string  `json:"postalCode"`
	Country      string  `json:"country"`
	IsDefault    bool    `json:"IsDefault"`
}

type UserFilterInput struct {
	Name      *string `json:"name,omitempty"`
	Email     *string `json:"email,omitempty"`
	Confirmed *bool   `json:"confirmed,omitempty"`
}

type UserPaginator struct {
	Data       []*User     `json:"data"`
	Pagination *Pagination `json:"pagination"`
}

type UserRole struct {
	ID       int64  `json:"id"`
	RoleCode string `json:"roleCode"`
	Name     string `json:"name"`
	IsAdmin  bool   `json:"isAdmin"`
}

type VehicleType struct {
	ID   int64  `json:"ID"`
	Code string `json:"code"`
	Name string `json:"name"`
}

type InvoiceStatus string

const (
	InvoiceStatusPayed InvoiceStatus = "PAYED"
	InvoiceStatusToPay InvoiceStatus = "TO_PAY"
)

var AllInvoiceStatus = []InvoiceStatus{
	InvoiceStatusPayed,
	InvoiceStatusToPay,
}

func (e InvoiceStatus) IsValid() bool {
	switch e {
	case InvoiceStatusPayed, InvoiceStatusToPay:
		return true
	}
	return false
}

func (e InvoiceStatus) String() string {
	return string(e)
}

func (e *InvoiceStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = InvoiceStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid InvoiceStatus", str)
	}
	return nil
}

func (e InvoiceStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OrderStatus string

const (
	OrderStatusNotCompleted OrderStatus = "NOT_COMPLETED"
	OrderStatusNew          OrderStatus = "NEW"
	OrderStatusToPay        OrderStatus = "TO_PAY"
	OrderStatusConfirmed    OrderStatus = "CONFIRMED"
	OrderStatusCanceled     OrderStatus = "CANCELED"
	OrderStatusRejected     OrderStatus = "REJECTED"
	OrderStatusDelivered    OrderStatus = "DELIVERED"
	OrderStatusReturned     OrderStatus = "RETURNED"
)

var AllOrderStatus = []OrderStatus{
	OrderStatusNotCompleted,
	OrderStatusNew,
	OrderStatusToPay,
	OrderStatusConfirmed,
	OrderStatusCanceled,
	OrderStatusRejected,
	OrderStatusDelivered,
	OrderStatusReturned,
}

func (e OrderStatus) IsValid() bool {
	switch e {
	case OrderStatusNotCompleted, OrderStatusNew, OrderStatusToPay, OrderStatusConfirmed, OrderStatusCanceled, OrderStatusRejected, OrderStatusDelivered, OrderStatusReturned:
		return true
	}
	return false
}

func (e OrderStatus) String() string {
	return string(e)
}

func (e *OrderStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderStatus", str)
	}
	return nil
}

func (e OrderStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
