package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"fmt"
	"pillowww/titw/graph/converters"
	"pillowww/titw/graph/model"
	"pillowww/titw/internal/auth"
	"pillowww/titw/models"
)

// ProductCategories is the resolver for the productCategories field.
func (r *queryResolver) ProductCategories(ctx context.Context) ([]*model.ProductCategory, error) {
	defaultLang := auth.CurrentLanguage(ctx)

	dbModels, err := r.ProductCategoryDao.
		Load(
			models.ProductCategoryRels.ProductCategoryLanguages,
			models.ProductCategoryLanguageWhere.LanguageID.EQ(defaultLang.L.ID),
		).
		FindAll(ctx)

	if err != nil {
		return nil, err
	}

	var graphModels []*model.ProductCategory

	for _, dbModel := range dbModels {
		graphModels = append(graphModels, converters.ProductCategoryToGraphQL(dbModel))
	}

	return graphModels, nil
}

// ProductsItemsByCode is the resolver for the productsItemsByCode field.
func (r *queryResolver) ProductsItemsByCode(ctx context.Context, code string) (*model.ProductItem, error) {
	pItem, err := r.ProductItemDao.FindLessExpensiveByProductCode(ctx, code)

	if err != nil {
		return nil, err
	}

	return converters.ProductItemToGraphQL(pItem), nil
}

// ProductItems is the resolver for the productItems field.
func (r *queryResolver) ProductItems(ctx context.Context, pagination *model.PaginationInput, productSearchInput *model.ProductSearchInput) (*model.ProductItemPaginate, error) {
	currency, err := r.CurrencyDao.FindDefault(ctx)
	dao := r.ProductItemDao
	pWithoutPagination, err := dao.FindProductItems(ctx, productSearchInput, currency)

	if err != nil {
		return nil, err
	}

	if pagination != nil {
		dao = r.ProductItemDao.Paginate(pagination.Limit, pagination.Offset)
	}

	if err != nil {
		return nil, err
	}

	products, err := dao.FindProductItems(ctx, productSearchInput, currency)

	if err != nil {
		return nil, err
	}

	countInt := len(pWithoutPagination)

	var graphModels []*model.ProductItem

	for _, product := range products {
		graphModels = append(graphModels, converters.ProductItemToGraphQL(product))
	}

	return &model.ProductItemPaginate{
		ProductItems: graphModels,
		Pagination:   converters.PaginationToGraphql(pagination, countInt),
	}, nil
}

// ProductItem is the resolver for the productItem field.
func (r *queryResolver) ProductItem(ctx context.Context, id int64) (*model.ProductItem, error) {
	dbModel, err := r.ProductItemDao.FindProductItemById(ctx, id)

	if err != nil {
		return nil, err
	}

	return converters.ProductItemToGraphQL(dbModel), nil
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context, pagination *model.PaginationInput, productSearchInput *model.ProductSearchInput) (*model.ProductPaginate, error) {
	dao := r.ProductDao

	if pagination != nil {
		dao = r.ProductDao.Paginate(pagination.Limit, pagination.Offset)
	}

	currency, err := r.CurrencyDao.FindDefault(ctx)

	if err != nil {
		return nil, err
	}

	products, err := dao.Search(ctx, productSearchInput, currency)

	if err != nil {
		return nil, err
	}

	countInt := len(products)

	var graphModels []*model.Product

	for _, product := range products {
		graphModels = append(graphModels, converters.ProductToGraphQL(product))
	}

	return &model.ProductPaginate{
		Products: graphModels,
		Pagination: &model.Pagination{
			Offset: &pagination.Offset,
			Limit:  &pagination.Limit,
			Totals: &countInt,
		},
	}, nil
}

// Specifications is the resolver for the specifications field.
func (r *queryResolver) Specifications(ctx context.Context) ([]*model.ProductSpecification, error) {
	panic(fmt.Errorf("not implemented: Specifications - specifications"))
}

// SearchSpecificationValue is the resolver for the searchSpecificationValue field.
func (r *queryResolver) SearchSpecificationValue(ctx context.Context, code string, value *string, vehicleCode *string) ([]*model.ProductSpecificationValue, error) {
	values, err := r.ProductSpecificationValueDao.SearchBySpecificationAndValue(ctx, code, value, vehicleCode)
	if err != nil {
		return nil, err
	}

	var graphValues []*model.ProductSpecificationValue

	for _, value := range values {
		graphValues = append(graphValues, converters.ProductSpecificationValueToGraphQL(value))
	}

	return graphValues, nil
}
