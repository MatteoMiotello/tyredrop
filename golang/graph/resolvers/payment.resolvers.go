package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.28

import (
	"context"
	"pillowww/titw/graph"
	"pillowww/titw/graph/converters"
	"pillowww/titw/graph/model"
	auth2 "pillowww/titw/internal/auth"
	"pillowww/titw/models"
)

// UserPaymentMethod is the resolver for the userPaymentMethod field.
func (r *paymentResolver) UserPaymentMethod(ctx context.Context, obj *model.Payment) (*model.UserPaymentMethod, error) {
	method, err := r.PaymentDao.FindUserPaymentMethodById(ctx, obj.UserPaymentMethodID)

	if err != nil {
		return nil, err
	}

	return converters.UserPaymentMethodToGraphQL(method), nil
}

// Currency is the resolver for the currency field.
func (r *paymentResolver) Currency(ctx context.Context, obj *model.Payment) (*model.Currency, error) {
	defLang := auth2.CurrentLanguage(ctx)

	curr, err := r.CurrencyDao.
		Load(
			models.CurrencyRels.CurrencyLanguages,
			models.CurrencyLanguageWhere.LanguageID.EQ(defLang.L.ID),
		).
		FindById(ctx, obj.CurrencyID)

	if err != nil {
		return nil, err
	}

	return converters.CurrencyToGraphQL(curr), err
}

// PaymentMethod is the resolver for the paymentMethod field.
func (r *userPaymentMethodResolver) PaymentMethod(ctx context.Context, obj *model.UserPaymentMethod) (*model.PaymentMethod, error) {
	m, err := r.PaymentDao.FindPaymentMethodById(ctx, obj.PaymentMethodID)

	if err != nil {
		return nil, err
	}

	return converters.PaymentMethodToGraphQL(m), err
}

// Payment returns graph.PaymentResolver implementation.
func (r *Resolver) Payment() graph.PaymentResolver { return &paymentResolver{r} }

// UserPaymentMethod returns graph.UserPaymentMethodResolver implementation.
func (r *Resolver) UserPaymentMethod() graph.UserPaymentMethodResolver {
	return &userPaymentMethodResolver{r}
}

type paymentResolver struct{ *Resolver }
type userPaymentMethodResolver struct{ *Resolver }
