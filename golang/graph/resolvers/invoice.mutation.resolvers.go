package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.28

import (
	"context"
	"errors"
	"io"
	"pillowww/titw/graph/converters"
	"pillowww/titw/graph/graphErrors"
	"pillowww/titw/graph/model"
	"pillowww/titw/internal/fs/fshandlers"
	"pillowww/titw/models"
	"strconv"
	"time"

	"github.com/99designs/gqlgen/graphql"
	null "github.com/volatiletech/null/v8"
)

// CreateInvoice is the resolver for the createInvoice field.
func (r *mutationResolver) CreateInvoice(ctx context.Context, userBillingID int64, number *string, file graphql.Upload) (*model.Invoice, error) {
	ub, err := r.UserDao.FindUserBillingById(ctx, userBillingID)

	if err != nil {
		return nil, err
	}

	fs := fshandlers.NewInvoiceHandler()

	bytes, err := io.ReadAll(file.File)

	if err != nil {
		return nil, err
	}

	if number == nil || len(*number) == 0 {
		*number = strconv.Itoa(int(time.Now().Unix())) + "." + strconv.FormatInt(ub.ID, 16)
	}

	fn, err := fs.StoreInvoice(ub, file.ContentType, *number, bytes)

	if err != nil {
		return nil, err
	}

	invoice := &models.Invoice{
		UserBillingID: ub.ID,
		Number:        *number,
		FilePath:      *fn,
		Status:        null.StringFrom(model.InvoiceStatusToPay.String()),
	}

	err = r.InvoiceDao.Save(ctx, invoice)

	if err != nil {
		return nil, err
	}

	return converters.InvoiceToGraphQL(invoice), nil
}

// DeleteInvoice is the resolver for the deleteInvoice field.
func (r *mutationResolver) DeleteInvoice(ctx context.Context, id int64) (*model.Invoice, error) {
	i, err := r.InvoiceDao.FindOneById(ctx, id)

	if err != nil {
		return nil, err
	}

	err = r.InvoiceDao.Delete(ctx, i)
	if err != nil {
		return nil, err
	}

	return converters.InvoiceToGraphQL(i), nil
}

// UpdateInvoiceStatus is the resolver for the updateInvoiceStatus field.
func (r *mutationResolver) UpdateInvoiceStatus(ctx context.Context, id int64, status model.InvoiceStatus) (*model.Invoice, error) {
	i, err := r.InvoiceDao.FindOneById(ctx, id)

	if err != nil {
		return nil, err
	}

	if !status.IsValid() {
		return nil, graphErrors.NewGraphError(ctx, errors.New("Invalid status prompted"), "INVALID_STATUS")
	}

	i.Status = null.StringFrom(status.String())
	err = r.InvoiceDao.Save(ctx, i)

	if err != nil {
		return nil, err
	}

	return converters.InvoiceToGraphQL(i), nil
}
