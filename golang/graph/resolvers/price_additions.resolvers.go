package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"pillowww/titw/graph"
	"pillowww/titw/graph/converters"
	"pillowww/titw/graph/model"
	auth2 "pillowww/titw/internal/auth"
	"pillowww/titw/models"

	"github.com/volatiletech/sqlboiler/v4/queries/qm"
)

// Currency is the resolver for the currency field.
func (r *priceAdditionTypeResolver) Currency(ctx context.Context, obj *model.PriceAdditionType) (*model.Currency, error) {
	curr, err := r.CurrencyDao.
		Load(models.CurrencyRels.CurrencyLanguages).
		FindById(ctx, obj.CurrencyID)

	if err != nil {
		return nil, err
	}

	return converters.CurrencyToGraphQL(curr), nil
}

// ProductItemPrice is the resolver for the productItemPrice field.
func (r *productItemPriceAdditionResolver) ProductItemPrice(ctx context.Context, obj *model.ProductItemPriceAddition) (*model.ProductItemPrice, error) {
	defLang := auth2.CurrentLanguage(ctx)

	price, err := r.ProductItemPriceDao.
		Load(
			qm.Rels(
				models.ProductItemPriceRels.Currency,
				models.CurrencyRels.CurrencyLanguages,
			),
			models.CurrencyLanguageWhere.LanguageID.EQ(defLang.L.ID),
		).
		FindOneById(ctx, obj.ProductItemPriceID)

	if err != nil {
		return nil, err
	}

	return converters.ProductItemPriceToGraphQL(price)
}

// PriceAdditionType is the resolver for the priceAdditionType field.
func (r *productItemPriceAdditionResolver) PriceAdditionType(ctx context.Context, obj *model.ProductItemPriceAddition) (*model.PriceAdditionType, error) {
	add, err := r.ProductItemPriceDao.
		Load(models.PriceAdditionTypeRels.Currency).
		FindPriceAdditionTypeById(ctx, obj.PriceAdditionTypeID)

	if err != nil {
		return nil, err
	}

	return converters.PriceAdditionTypeToGraphQL(add)
}

// PriceAdditionType returns graph.PriceAdditionTypeResolver implementation.
func (r *Resolver) PriceAdditionType() graph.PriceAdditionTypeResolver {
	return &priceAdditionTypeResolver{r}
}

// ProductItemPriceAddition returns graph.ProductItemPriceAdditionResolver implementation.
func (r *Resolver) ProductItemPriceAddition() graph.ProductItemPriceAdditionResolver {
	return &productItemPriceAdditionResolver{r}
}

type priceAdditionTypeResolver struct{ *Resolver }
type productItemPriceAdditionResolver struct{ *Resolver }
