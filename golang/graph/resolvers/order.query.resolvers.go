package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"pillowww/titw/graph/aggregators"
	"pillowww/titw/graph/converters"
	"pillowww/titw/graph/model"
	"pillowww/titw/models"
)

// Order is the resolver for the order field.
func (r *queryResolver) Order(ctx context.Context, id int64) (*model.Order, error) {
	orderModel, err := r.OrderDao.
		Load(models.OrderRels.Currency).
		FindOneById(ctx, id)

	if err != nil {
		return nil, err
	}

	return converters.OrderToGraphQL(orderModel)
}

// AllOrders is the resolver for the allOrders field.
func (r *queryResolver) AllOrders(ctx context.Context, pagination *model.PaginationInput, filter *model.OrdersFilterInput, ordering []*model.OrderingInput) (*model.OrdersPaginator, error) {
	orderDao := r.OrderDao.
		Load(models.OrderRels.Currency)

	if pagination != nil {
		orderDao = orderDao.Paginate(pagination.Limit, pagination.Offset)
	}

	if ordering != nil {
		orderDao = orderDao.Order(ordering)
	}

	var orders models.OrderSlice
	var ordersWithoutPagination models.OrderSlice
	var err error

	if filter != nil {
		ordersWithoutPagination, _ = r.OrderDao.FindAll(ctx, filter.From, filter.To, filter.Number, filter.Status)
		orders, err = orderDao.FindAll(ctx, filter.From, filter.To, filter.Number, filter.Status)
	} else {
		ordersWithoutPagination, _ = r.OrderDao.FindAll(ctx, nil, nil, nil, nil)
		orders, err = orderDao.FindAll(ctx, nil, nil, nil, nil)
	}

	totalCount := len(ordersWithoutPagination)

	if err != nil {
		return nil, err
	}

	graphOrders, err := aggregators.AggregateOrderModels(orders)

	if err != nil {
		return nil, err
	}

	return &model.OrdersPaginator{
		Data:       graphOrders,
		Pagination: converters.PaginationToGraphql(pagination, totalCount),
	}, nil
}

// PossibleOrderStatuses is the resolver for the possibleOrderStatuses field.
func (r *queryResolver) PossibleOrderStatuses(ctx context.Context, orderID int64) ([]model.OrderStatus, error) {
	o, err := r.OrderDao.FindOneById(ctx, orderID)

	if err != nil {
		return nil, err
	}

	return model.GetValidStatusForOrder(o), err
}

// OrderRows is the resolver for the orderRows field.
func (r *queryResolver) OrderRows(ctx context.Context, orderID int64) ([]*model.OrderRow, error) {
	o, err := r.OrderDao.
		Load(models.OrderRels.OrderRows).
		Load(models.OrderRels.Currency).
		FindOneById(ctx, orderID)

	if err != nil {
		return nil, err
	}

	return aggregators.RowsFromOrderModel(o), nil
}
