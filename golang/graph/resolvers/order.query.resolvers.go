package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.28

import (
	"context"
	"pillowww/titw/graph/aggregators"
	"pillowww/titw/graph/converters"
	"pillowww/titw/graph/model"
	"pillowww/titw/models"
)

// AllOrders is the resolver for the allOrders field.
func (r *queryResolver) AllOrders(ctx context.Context, pagination *model.PaginationInput, filter *model.OrdersFilterInput, ordering []*model.OrderingInput) (*model.OrdersPaginator, error) {
	orderDao := r.OrderDao.
		Load(models.OrderRels.Currency)

	if pagination != nil {
		orderDao = orderDao.Paginate(pagination.Limit, pagination.Offset)
	}

	if ordering != nil {
		orderDao = orderDao.Order(ordering)
	}

	var orders models.OrderSlice
	var ordersWithoutPagination models.OrderSlice
	var err error

	if filter != nil {
		ordersWithoutPagination, _ = r.OrderDao.FindAll(ctx, filter.From, filter.To, filter.Number, filter.Status)
		orders, err = orderDao.FindAll(ctx, filter.From, filter.To, filter.Number, filter.Status)
	} else {
		ordersWithoutPagination, _ = r.OrderDao.FindAll(ctx, nil, nil, nil, nil)
		orders, err = orderDao.FindAll(ctx, nil, nil, nil, nil)
	}

	totalCount := len(ordersWithoutPagination)

	if err != nil {
		return nil, err
	}

	graphOrders, err := aggregators.AggregateOrderModels(orders)

	if err != nil {
		return nil, err
	}

	return &model.OrdersPaginator{
		Data:       graphOrders,
		Pagination: converters.PaginationToGraphql(pagination, totalCount),
	}, nil
}
