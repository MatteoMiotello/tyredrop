package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"errors"
	"pillowww/titw/graph/converters"
	"pillowww/titw/graph/graphErrors"
	"pillowww/titw/graph/model"
	"pillowww/titw/internal/domain/product"
	"pillowww/titw/models"

	null "github.com/volatiletech/null/v8"
)

// CreatePriceMarkup is the resolver for the createPriceMarkup field.
func (r *mutationResolver) CreatePriceMarkup(ctx context.Context, input model.PriceMarkupInput) (*model.ProductPriceMarkup, error) {
	var valueId *int64
	var brandId *int64
	valueId = input.SpecificationValueID

	if valueId != nil && *valueId == 0 {
		valueId = nil
	}

	brandId = input.BrandID

	if brandId != nil && *brandId == 0 {
		brandId = nil
	}

	markup, _ := r.PriceMarkupDao.FindByBrandOrSpecificationId(ctx, brandId, valueId)
	if markup != nil {
		return nil, graphErrors.NewGraphError(ctx, errors.New("markup already exists"), "MARKUP_ALREADY_EXISTS")
	}

	markup = &models.ProductPriceMarkup{
		ProductSpecificationValueID: null.Int64FromPtr(valueId),
		BrandID:                     null.Int64FromPtr(brandId),
		MarkupPercentage:            input.MarkupPercentage,
	}

	err := r.PriceMarkupDao.Save(ctx, markup)

	if err != nil {
		return nil, err
	}

	ps := product.NewPriceService(
		r.ProductDao,
		r.ProductItemDao,
		r.PriceMarkupDao,
		r.CurrencyDao,
		r.ProductItemPriceDao,
	)

	err = ps.UpdateMarkup(ctx, markup, input.MarkupPercentage)
	if err != nil {
		return nil, err
	}

	return converters.PriceMarkupToGraphQL(markup), nil
}

// UpdatePriceMarkup is the resolver for the updatePriceMarkup field.
func (r *mutationResolver) UpdatePriceMarkup(ctx context.Context, id int64, input model.PriceMarkupInput) (*model.ProductPriceMarkup, error) {
	ps := product.NewPriceService(
		r.ProductDao,
		r.ProductItemDao,
		r.PriceMarkupDao,
		r.CurrencyDao,
		r.ProductItemPriceDao,
	)

	markup, err := r.PriceMarkupDao.FindOneById(ctx, id)

	if err != nil {
		return nil, err
	}

	err = ps.UpdateMarkup(ctx, markup, input.MarkupPercentage)

	if err != nil {
		return nil, err
	}

	return converters.PriceMarkupToGraphQL(markup), nil
}
