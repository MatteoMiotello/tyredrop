package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.28

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"pillowww/titw/graph"
	"pillowww/titw/graph/converters"
	"pillowww/titw/graph/model"
	auth2 "pillowww/titw/internal/auth"
	"pillowww/titw/internal/db"
	"pillowww/titw/internal/domain/user"
	"pillowww/titw/models"
	"pillowww/titw/pkg/constants"

	null "github.com/volatiletech/null/v8"
)

// CreateAdminUser is the resolver for the createAdminUser field.
func (r *mutationResolver) CreateAdminUser(ctx context.Context, userInput model.CreateAdminUserInput) (*model.User, error) {
	panic(fmt.Errorf("not implemented: CreateAdminUser - createAdminUser"))
}

// CreateUserBilling is the resolver for the createUserBilling field.
func (r *mutationResolver) CreateUserBilling(ctx context.Context, billingInput model.CreateUserBilling) (*model.UserBilling, error) {
	auth := auth2.FromCtx(ctx)
	currentUser, err := auth.GetUser(ctx)

	if err != nil {
		return nil, errors.New("User not found: " + err.Error())
	}

	var userBillingModel *models.UserBilling = new(models.UserBilling)
	var paymentMethod *models.UserPaymentMethod = new(models.UserPaymentMethod)

	err = db.WithTx(ctx, func(tx *sql.Tx) error {
		userDao := user.NewDao(tx)
		userBillingModel.UserID = currentUser.ID
		userBillingModel.LegalEntityTypeID = billingInput.LegalEntityTypeID
		userBillingModel.Name = billingInput.Name
		userBillingModel.Surname = billingInput.Surname
		userBillingModel.VatNumber = billingInput.VatNumber
		userBillingModel.AddressLine1 = billingInput.AddressLine1
		userBillingModel.AddressLine2 = null.StringFrom(*billingInput.AddressLine2)
		userBillingModel.City = billingInput.City
		userBillingModel.Province = billingInput.Province
		userBillingModel.Cap = billingInput.Cap
		userBillingModel.Country = billingInput.Country

		if billingInput.FiscalCode == nil {
			userBillingModel.FiscalCode = billingInput.VatNumber
		} else {
			userBillingModel.FiscalCode = *billingInput.FiscalCode
		}

		err = userDao.Insert(ctx, userBillingModel)
		if err != nil {
			return err
		}

		paymentMethod.UserID = currentUser.ID
		paymentMethod.Name = billingInput.Name + " " + billingInput.Surname
		paymentMethod.Type = constants.PAYMENT_METHOD_SEPA
		paymentMethod.Value = billingInput.Iban
		paymentMethod.TypePrimary = true

		err = userDao.Insert(ctx, paymentMethod)

		if err != nil {
			return err
		}

		return nil
	})

	if err != nil {
		return nil, err
	}

	return converters.UserBillingToGraphQL(userBillingModel), nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
