type Pagination {
    limit: Int
    offset: Int
    totals: Int
    currentPage: Int
    pageCount: Int
}

input OrderingInput {
    column: String!
    desc: Boolean
}

input PaginationInput {
    limit: Int!
    offset: Int!
}


type OrdersPaginator {
    data: [Order]!
    pagination: Pagination!
}

input OrderFilterInput {
    dateFrom: String
    dateTo: String
    number: String
}

input UserFilterInput {
    name: String @emptyStringToNull
    email: String @emptyStringToNull
    confirmed: Boolean
}

type UserPaginator {
    data: [User]!
    pagination: Pagination!
}

type StatResponse {
    totalUsers: Int!
    totalOrders: Float!
    bestUser: UserBilling!
}

type Query {
    user(ID: ID!): User
    users( pagination: PaginationInput, filter: UserFilterInput ): UserPaginator @isAdmin
    userAddress( userId: ID! ): [UserAddress]
    userBilling( userId: ID! ): UserBilling

    taxRates: [Tax]
    brands: [Brand]

    searchBrands( name: String! ): [Brand]

    carts: CartResponse @userConfirmed

    legalEntityTypes: [LegalEntityType]

    currency( id: ID! ): Currency
    currencies: [Currency]

    userOrders( userId: ID!, pagination: PaginationInput, filter: OrderFilterInput, ordering: [OrderingInput] ): OrdersPaginator @userConfirmed
    paymentMethods: [PaymentMethod]!

    stats: StatResponse! @isAdmin
}
