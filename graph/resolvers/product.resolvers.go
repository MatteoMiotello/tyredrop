package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"
	"pillowww/titw/graph"
	"pillowww/titw/graph/model"
)

// Brand is the resolver for the brand field.
func (r *productResolver) Brand(ctx context.Context, obj *model.Product) (*model.Brand, error) {
	panic(fmt.Errorf("not implemented: Brand - brand"))
}

// Category is the resolver for the category field.
func (r *productResolver) Category(ctx context.Context, obj *model.Product) (*model.ProductCategory, error) {
	panic(fmt.Errorf("not implemented: Category - category"))
}

// Specifications is the resolver for the specifications field.
func (r *productResolver) Specifications(ctx context.Context, obj *model.Product) ([]*model.ProductSpecificationValue, error) {
	panic(fmt.Errorf("not implemented: Specifications - specifications"))
}

// Specifications is the resolver for the specifications field.
func (r *productCategoryResolver) Specifications(ctx context.Context, obj *model.ProductCategory) ([]*model.ProductSpecification, error) {
	panic(fmt.Errorf("not implemented: Specifications - specifications"))
}

// Product is the resolver for the product field.
func (r *productItemResolver) Product(ctx context.Context, obj *model.ProductItem) (*model.Product, error) {
	panic(fmt.Errorf("not implemented: Product - product"))
}

// Price is the resolver for the price field.
func (r *productItemResolver) Price(ctx context.Context, obj *model.ProductItem) ([]*model.Price, error) {
	panic(fmt.Errorf("not implemented: Price - price"))
}

// Supplier is the resolver for the supplier field.
func (r *productItemResolver) Supplier(ctx context.Context, obj *model.ProductItem) (*model.Supplier, error) {
	panic(fmt.Errorf("not implemented: Supplier - supplier"))
}

// SupplierPrice is the resolver for the supplier_price field.
func (r *productItemResolver) SupplierPrice(ctx context.Context, obj *model.ProductItem) (*model.Price, error) {
	panic(fmt.Errorf("not implemented: SupplierPrice - supplier_price"))
}

// SearchByProductCode is the resolver for the searchByProductCode field.
func (r *queryResolver) SearchByProductCode(ctx context.Context, code string) (*model.ProductItem, error) {
	panic(fmt.Errorf("not implemented: SearchByProductCode - searchByProductCode"))
}

// Search is the resolver for the search field.
func (r *queryResolver) Search(ctx context.Context, input []*model.ProductSpecificationInput) ([]*model.ProductItem, error) {
	panic(fmt.Errorf("not implemented: Search - search"))
}

// Product returns graph.ProductResolver implementation.
func (r *Resolver) Product() graph.ProductResolver { return &productResolver{r} }

// ProductCategory returns graph.ProductCategoryResolver implementation.
func (r *Resolver) ProductCategory() graph.ProductCategoryResolver {
	return &productCategoryResolver{r}
}

// ProductItem returns graph.ProductItemResolver implementation.
func (r *Resolver) ProductItem() graph.ProductItemResolver { return &productItemResolver{r} }

type productResolver struct{ *Resolver }
type productCategoryResolver struct{ *Resolver }
type productItemResolver struct{ *Resolver }
