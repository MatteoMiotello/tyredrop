// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProductSpecificationLanguage is an object representing the database table.
type ProductSpecificationLanguage struct {
	ID                     int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	ProductSpecificationID int64       `boil:"product_specification_id" json:"product_specification_id" toml:"product_specification_id" yaml:"product_specification_id"`
	LanguageID             int64       `boil:"language_id" json:"language_id" toml:"language_id" yaml:"language_id"`
	Name                   string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description            null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	UpdatedAt              time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt              time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *productSpecificationLanguageR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productSpecificationLanguageL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductSpecificationLanguageColumns = struct {
	ID                     string
	ProductSpecificationID string
	LanguageID             string
	Name                   string
	Description            string
	UpdatedAt              string
	CreatedAt              string
}{
	ID:                     "id",
	ProductSpecificationID: "product_specification_id",
	LanguageID:             "language_id",
	Name:                   "name",
	Description:            "description",
	UpdatedAt:              "updated_at",
	CreatedAt:              "created_at",
}

var ProductSpecificationLanguageTableColumns = struct {
	ID                     string
	ProductSpecificationID string
	LanguageID             string
	Name                   string
	Description            string
	UpdatedAt              string
	CreatedAt              string
}{
	ID:                     "product_specification_languages.id",
	ProductSpecificationID: "product_specification_languages.product_specification_id",
	LanguageID:             "product_specification_languages.language_id",
	Name:                   "product_specification_languages.name",
	Description:            "product_specification_languages.description",
	UpdatedAt:              "product_specification_languages.updated_at",
	CreatedAt:              "product_specification_languages.created_at",
}

// Generated where

var ProductSpecificationLanguageWhere = struct {
	ID                     whereHelperint64
	ProductSpecificationID whereHelperint64
	LanguageID             whereHelperint64
	Name                   whereHelperstring
	Description            whereHelpernull_String
	UpdatedAt              whereHelpertime_Time
	CreatedAt              whereHelpertime_Time
}{
	ID:                     whereHelperint64{field: "\"product_specification_languages\".\"id\""},
	ProductSpecificationID: whereHelperint64{field: "\"product_specification_languages\".\"product_specification_id\""},
	LanguageID:             whereHelperint64{field: "\"product_specification_languages\".\"language_id\""},
	Name:                   whereHelperstring{field: "\"product_specification_languages\".\"name\""},
	Description:            whereHelpernull_String{field: "\"product_specification_languages\".\"description\""},
	UpdatedAt:              whereHelpertime_Time{field: "\"product_specification_languages\".\"updated_at\""},
	CreatedAt:              whereHelpertime_Time{field: "\"product_specification_languages\".\"created_at\""},
}

// ProductSpecificationLanguageRels is where relationship names are stored.
var ProductSpecificationLanguageRels = struct {
	Language             string
	ProductSpecification string
}{
	Language:             "Language",
	ProductSpecification: "ProductSpecification",
}

// productSpecificationLanguageR is where relationships are stored.
type productSpecificationLanguageR struct {
	Language             *Language             `boil:"Language" json:"Language" toml:"Language" yaml:"Language"`
	ProductSpecification *ProductSpecification `boil:"ProductSpecification" json:"ProductSpecification" toml:"ProductSpecification" yaml:"ProductSpecification"`
}

// NewStruct creates a new relationship struct
func (*productSpecificationLanguageR) NewStruct() *productSpecificationLanguageR {
	return &productSpecificationLanguageR{}
}

func (r *productSpecificationLanguageR) GetLanguage() *Language {
	if r == nil {
		return nil
	}
	return r.Language
}

func (r *productSpecificationLanguageR) GetProductSpecification() *ProductSpecification {
	if r == nil {
		return nil
	}
	return r.ProductSpecification
}

// productSpecificationLanguageL is where Load methods for each relationship are stored.
type productSpecificationLanguageL struct{}

var (
	productSpecificationLanguageAllColumns            = []string{"id", "product_specification_id", "language_id", "name", "description", "updated_at", "created_at"}
	productSpecificationLanguageColumnsWithoutDefault = []string{"name"}
	productSpecificationLanguageColumnsWithDefault    = []string{"id", "product_specification_id", "language_id", "description", "updated_at", "created_at"}
	productSpecificationLanguagePrimaryKeyColumns     = []string{"id"}
	productSpecificationLanguageGeneratedColumns      = []string{}
)

type (
	// ProductSpecificationLanguageSlice is an alias for a slice of pointers to ProductSpecificationLanguage.
	// This should almost always be used instead of []ProductSpecificationLanguage.
	ProductSpecificationLanguageSlice []*ProductSpecificationLanguage
	// ProductSpecificationLanguageHook is the signature for custom ProductSpecificationLanguage hook methods
	ProductSpecificationLanguageHook func(context.Context, boil.ContextExecutor, *ProductSpecificationLanguage) error

	productSpecificationLanguageQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productSpecificationLanguageType                 = reflect.TypeOf(&ProductSpecificationLanguage{})
	productSpecificationLanguageMapping              = queries.MakeStructMapping(productSpecificationLanguageType)
	productSpecificationLanguagePrimaryKeyMapping, _ = queries.BindMapping(productSpecificationLanguageType, productSpecificationLanguageMapping, productSpecificationLanguagePrimaryKeyColumns)
	productSpecificationLanguageInsertCacheMut       sync.RWMutex
	productSpecificationLanguageInsertCache          = make(map[string]insertCache)
	productSpecificationLanguageUpdateCacheMut       sync.RWMutex
	productSpecificationLanguageUpdateCache          = make(map[string]updateCache)
	productSpecificationLanguageUpsertCacheMut       sync.RWMutex
	productSpecificationLanguageUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var productSpecificationLanguageAfterSelectHooks []ProductSpecificationLanguageHook

var productSpecificationLanguageBeforeInsertHooks []ProductSpecificationLanguageHook
var productSpecificationLanguageAfterInsertHooks []ProductSpecificationLanguageHook

var productSpecificationLanguageBeforeUpdateHooks []ProductSpecificationLanguageHook
var productSpecificationLanguageAfterUpdateHooks []ProductSpecificationLanguageHook

var productSpecificationLanguageBeforeDeleteHooks []ProductSpecificationLanguageHook
var productSpecificationLanguageAfterDeleteHooks []ProductSpecificationLanguageHook

var productSpecificationLanguageBeforeUpsertHooks []ProductSpecificationLanguageHook
var productSpecificationLanguageAfterUpsertHooks []ProductSpecificationLanguageHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProductSpecificationLanguage) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productSpecificationLanguageAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProductSpecificationLanguage) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productSpecificationLanguageBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProductSpecificationLanguage) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productSpecificationLanguageAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProductSpecificationLanguage) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productSpecificationLanguageBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProductSpecificationLanguage) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productSpecificationLanguageAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProductSpecificationLanguage) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productSpecificationLanguageBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProductSpecificationLanguage) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productSpecificationLanguageAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProductSpecificationLanguage) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productSpecificationLanguageBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProductSpecificationLanguage) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productSpecificationLanguageAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProductSpecificationLanguageHook registers your hook function for all future operations.
func AddProductSpecificationLanguageHook(hookPoint boil.HookPoint, productSpecificationLanguageHook ProductSpecificationLanguageHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		productSpecificationLanguageAfterSelectHooks = append(productSpecificationLanguageAfterSelectHooks, productSpecificationLanguageHook)
	case boil.BeforeInsertHook:
		productSpecificationLanguageBeforeInsertHooks = append(productSpecificationLanguageBeforeInsertHooks, productSpecificationLanguageHook)
	case boil.AfterInsertHook:
		productSpecificationLanguageAfterInsertHooks = append(productSpecificationLanguageAfterInsertHooks, productSpecificationLanguageHook)
	case boil.BeforeUpdateHook:
		productSpecificationLanguageBeforeUpdateHooks = append(productSpecificationLanguageBeforeUpdateHooks, productSpecificationLanguageHook)
	case boil.AfterUpdateHook:
		productSpecificationLanguageAfterUpdateHooks = append(productSpecificationLanguageAfterUpdateHooks, productSpecificationLanguageHook)
	case boil.BeforeDeleteHook:
		productSpecificationLanguageBeforeDeleteHooks = append(productSpecificationLanguageBeforeDeleteHooks, productSpecificationLanguageHook)
	case boil.AfterDeleteHook:
		productSpecificationLanguageAfterDeleteHooks = append(productSpecificationLanguageAfterDeleteHooks, productSpecificationLanguageHook)
	case boil.BeforeUpsertHook:
		productSpecificationLanguageBeforeUpsertHooks = append(productSpecificationLanguageBeforeUpsertHooks, productSpecificationLanguageHook)
	case boil.AfterUpsertHook:
		productSpecificationLanguageAfterUpsertHooks = append(productSpecificationLanguageAfterUpsertHooks, productSpecificationLanguageHook)
	}
}

// One returns a single productSpecificationLanguage record from the query.
func (q productSpecificationLanguageQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProductSpecificationLanguage, error) {
	o := &ProductSpecificationLanguage{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for product_specification_languages")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ProductSpecificationLanguage records from the query.
func (q productSpecificationLanguageQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProductSpecificationLanguageSlice, error) {
	var o []*ProductSpecificationLanguage

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ProductSpecificationLanguage slice")
	}

	if len(productSpecificationLanguageAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ProductSpecificationLanguage records in the query.
func (q productSpecificationLanguageQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count product_specification_languages rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q productSpecificationLanguageQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if product_specification_languages exists")
	}

	return count > 0, nil
}

// Language pointed to by the foreign key.
func (o *ProductSpecificationLanguage) Language(mods ...qm.QueryMod) languageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.LanguageID),
	}

	queryMods = append(queryMods, mods...)

	return Languages(queryMods...)
}

// ProductSpecification pointed to by the foreign key.
func (o *ProductSpecificationLanguage) ProductSpecification(mods ...qm.QueryMod) productSpecificationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProductSpecificationID),
	}

	queryMods = append(queryMods, mods...)

	return ProductSpecifications(queryMods...)
}

// LoadLanguage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productSpecificationLanguageL) LoadLanguage(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductSpecificationLanguage interface{}, mods queries.Applicator) error {
	var slice []*ProductSpecificationLanguage
	var object *ProductSpecificationLanguage

	if singular {
		var ok bool
		object, ok = maybeProductSpecificationLanguage.(*ProductSpecificationLanguage)
		if !ok {
			object = new(ProductSpecificationLanguage)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductSpecificationLanguage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductSpecificationLanguage))
			}
		}
	} else {
		s, ok := maybeProductSpecificationLanguage.(*[]*ProductSpecificationLanguage)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductSpecificationLanguage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductSpecificationLanguage))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productSpecificationLanguageR{}
		}
		args = append(args, object.LanguageID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productSpecificationLanguageR{}
			}

			for _, a := range args {
				if a == obj.LanguageID {
					continue Outer
				}
			}

			args = append(args, obj.LanguageID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`languages`),
		qm.WhereIn(`languages.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Language")
	}

	var resultSlice []*Language
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Language")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for languages")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for languages")
	}

	if len(languageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Language = foreign
		if foreign.R == nil {
			foreign.R = &languageR{}
		}
		foreign.R.ProductSpecificationLanguages = append(foreign.R.ProductSpecificationLanguages, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LanguageID == foreign.ID {
				local.R.Language = foreign
				if foreign.R == nil {
					foreign.R = &languageR{}
				}
				foreign.R.ProductSpecificationLanguages = append(foreign.R.ProductSpecificationLanguages, local)
				break
			}
		}
	}

	return nil
}

// LoadProductSpecification allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productSpecificationLanguageL) LoadProductSpecification(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductSpecificationLanguage interface{}, mods queries.Applicator) error {
	var slice []*ProductSpecificationLanguage
	var object *ProductSpecificationLanguage

	if singular {
		var ok bool
		object, ok = maybeProductSpecificationLanguage.(*ProductSpecificationLanguage)
		if !ok {
			object = new(ProductSpecificationLanguage)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductSpecificationLanguage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductSpecificationLanguage))
			}
		}
	} else {
		s, ok := maybeProductSpecificationLanguage.(*[]*ProductSpecificationLanguage)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductSpecificationLanguage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductSpecificationLanguage))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productSpecificationLanguageR{}
		}
		args = append(args, object.ProductSpecificationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productSpecificationLanguageR{}
			}

			for _, a := range args {
				if a == obj.ProductSpecificationID {
					continue Outer
				}
			}

			args = append(args, obj.ProductSpecificationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_specifications`),
		qm.WhereIn(`product_specifications.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ProductSpecification")
	}

	var resultSlice []*ProductSpecification
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ProductSpecification")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for product_specifications")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_specifications")
	}

	if len(productSpecificationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductSpecification = foreign
		if foreign.R == nil {
			foreign.R = &productSpecificationR{}
		}
		foreign.R.ProductSpecificationLanguages = append(foreign.R.ProductSpecificationLanguages, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductSpecificationID == foreign.ID {
				local.R.ProductSpecification = foreign
				if foreign.R == nil {
					foreign.R = &productSpecificationR{}
				}
				foreign.R.ProductSpecificationLanguages = append(foreign.R.ProductSpecificationLanguages, local)
				break
			}
		}
	}

	return nil
}

// SetLanguage of the productSpecificationLanguage to the related item.
// Sets o.R.Language to related.
// Adds o to related.R.ProductSpecificationLanguages.
func (o *ProductSpecificationLanguage) SetLanguage(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Language) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"product_specification_languages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"language_id"}),
		strmangle.WhereClause("\"", "\"", 2, productSpecificationLanguagePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LanguageID = related.ID
	if o.R == nil {
		o.R = &productSpecificationLanguageR{
			Language: related,
		}
	} else {
		o.R.Language = related
	}

	if related.R == nil {
		related.R = &languageR{
			ProductSpecificationLanguages: ProductSpecificationLanguageSlice{o},
		}
	} else {
		related.R.ProductSpecificationLanguages = append(related.R.ProductSpecificationLanguages, o)
	}

	return nil
}

// SetProductSpecification of the productSpecificationLanguage to the related item.
// Sets o.R.ProductSpecification to related.
// Adds o to related.R.ProductSpecificationLanguages.
func (o *ProductSpecificationLanguage) SetProductSpecification(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ProductSpecification) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"product_specification_languages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"product_specification_id"}),
		strmangle.WhereClause("\"", "\"", 2, productSpecificationLanguagePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductSpecificationID = related.ID
	if o.R == nil {
		o.R = &productSpecificationLanguageR{
			ProductSpecification: related,
		}
	} else {
		o.R.ProductSpecification = related
	}

	if related.R == nil {
		related.R = &productSpecificationR{
			ProductSpecificationLanguages: ProductSpecificationLanguageSlice{o},
		}
	} else {
		related.R.ProductSpecificationLanguages = append(related.R.ProductSpecificationLanguages, o)
	}

	return nil
}

// ProductSpecificationLanguages retrieves all the records using an executor.
func ProductSpecificationLanguages(mods ...qm.QueryMod) productSpecificationLanguageQuery {
	mods = append(mods, qm.From("\"product_specification_languages\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"product_specification_languages\".*"})
	}

	return productSpecificationLanguageQuery{q}
}

// FindProductSpecificationLanguage retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProductSpecificationLanguage(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ProductSpecificationLanguage, error) {
	productSpecificationLanguageObj := &ProductSpecificationLanguage{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"product_specification_languages\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, productSpecificationLanguageObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from product_specification_languages")
	}

	if err = productSpecificationLanguageObj.doAfterSelectHooks(ctx, exec); err != nil {
		return productSpecificationLanguageObj, err
	}

	return productSpecificationLanguageObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProductSpecificationLanguage) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no product_specification_languages provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productSpecificationLanguageColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productSpecificationLanguageInsertCacheMut.RLock()
	cache, cached := productSpecificationLanguageInsertCache[key]
	productSpecificationLanguageInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productSpecificationLanguageAllColumns,
			productSpecificationLanguageColumnsWithDefault,
			productSpecificationLanguageColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(productSpecificationLanguageType, productSpecificationLanguageMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productSpecificationLanguageType, productSpecificationLanguageMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"product_specification_languages\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"product_specification_languages\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into product_specification_languages")
	}

	if !cached {
		productSpecificationLanguageInsertCacheMut.Lock()
		productSpecificationLanguageInsertCache[key] = cache
		productSpecificationLanguageInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ProductSpecificationLanguage.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProductSpecificationLanguage) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	productSpecificationLanguageUpdateCacheMut.RLock()
	cache, cached := productSpecificationLanguageUpdateCache[key]
	productSpecificationLanguageUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productSpecificationLanguageAllColumns,
			productSpecificationLanguagePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update product_specification_languages, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"product_specification_languages\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, productSpecificationLanguagePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productSpecificationLanguageType, productSpecificationLanguageMapping, append(wl, productSpecificationLanguagePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update product_specification_languages row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for product_specification_languages")
	}

	if !cached {
		productSpecificationLanguageUpdateCacheMut.Lock()
		productSpecificationLanguageUpdateCache[key] = cache
		productSpecificationLanguageUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q productSpecificationLanguageQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for product_specification_languages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for product_specification_languages")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductSpecificationLanguageSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productSpecificationLanguagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"product_specification_languages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, productSpecificationLanguagePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in productSpecificationLanguage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all productSpecificationLanguage")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProductSpecificationLanguage) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no product_specification_languages provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productSpecificationLanguageColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productSpecificationLanguageUpsertCacheMut.RLock()
	cache, cached := productSpecificationLanguageUpsertCache[key]
	productSpecificationLanguageUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			productSpecificationLanguageAllColumns,
			productSpecificationLanguageColumnsWithDefault,
			productSpecificationLanguageColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			productSpecificationLanguageAllColumns,
			productSpecificationLanguagePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert product_specification_languages, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(productSpecificationLanguagePrimaryKeyColumns))
			copy(conflict, productSpecificationLanguagePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"product_specification_languages\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(productSpecificationLanguageType, productSpecificationLanguageMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productSpecificationLanguageType, productSpecificationLanguageMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert product_specification_languages")
	}

	if !cached {
		productSpecificationLanguageUpsertCacheMut.Lock()
		productSpecificationLanguageUpsertCache[key] = cache
		productSpecificationLanguageUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ProductSpecificationLanguage record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProductSpecificationLanguage) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ProductSpecificationLanguage provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productSpecificationLanguagePrimaryKeyMapping)
	sql := "DELETE FROM \"product_specification_languages\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from product_specification_languages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for product_specification_languages")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q productSpecificationLanguageQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no productSpecificationLanguageQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from product_specification_languages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for product_specification_languages")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductSpecificationLanguageSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(productSpecificationLanguageBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productSpecificationLanguagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"product_specification_languages\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productSpecificationLanguagePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from productSpecificationLanguage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for product_specification_languages")
	}

	if len(productSpecificationLanguageAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProductSpecificationLanguage) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProductSpecificationLanguage(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductSpecificationLanguageSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductSpecificationLanguageSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productSpecificationLanguagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"product_specification_languages\".* FROM \"product_specification_languages\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productSpecificationLanguagePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProductSpecificationLanguageSlice")
	}

	*o = slice

	return nil
}

// ProductSpecificationLanguageExists checks if the ProductSpecificationLanguage row exists.
func ProductSpecificationLanguageExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"product_specification_languages\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if product_specification_languages exists")
	}

	return exists, nil
}

// Exists checks if the ProductSpecificationLanguage row exists.
func (o *ProductSpecificationLanguage) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ProductSpecificationLanguageExists(ctx, exec, o.ID)
}
