// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ImportJob is an object representing the database table.
type ImportJob struct {
	ID           int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	SupplierID   int64       `boil:"supplier_id" json:"supplier_id" toml:"supplier_id" yaml:"supplier_id"`
	Filename     string      `boil:"filename" json:"filename" toml:"filename" yaml:"filename"`
	ErrorMessage null.String `boil:"error_message" json:"error_message,omitempty" toml:"error_message" yaml:"error_message,omitempty"`
	StartedAt    null.Time   `boil:"started_at" json:"started_at,omitempty" toml:"started_at" yaml:"started_at,omitempty"`
	EndedAt      null.Time   `boil:"ended_at" json:"ended_at,omitempty" toml:"ended_at" yaml:"ended_at,omitempty"`
	UpdatedAt    time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *importJobR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L importJobL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ImportJobColumns = struct {
	ID           string
	SupplierID   string
	Filename     string
	ErrorMessage string
	StartedAt    string
	EndedAt      string
	UpdatedAt    string
	CreatedAt    string
}{
	ID:           "id",
	SupplierID:   "supplier_id",
	Filename:     "filename",
	ErrorMessage: "error_message",
	StartedAt:    "started_at",
	EndedAt:      "ended_at",
	UpdatedAt:    "updated_at",
	CreatedAt:    "created_at",
}

var ImportJobTableColumns = struct {
	ID           string
	SupplierID   string
	Filename     string
	ErrorMessage string
	StartedAt    string
	EndedAt      string
	UpdatedAt    string
	CreatedAt    string
}{
	ID:           "import_jobs.id",
	SupplierID:   "import_jobs.supplier_id",
	Filename:     "import_jobs.filename",
	ErrorMessage: "import_jobs.error_message",
	StartedAt:    "import_jobs.started_at",
	EndedAt:      "import_jobs.ended_at",
	UpdatedAt:    "import_jobs.updated_at",
	CreatedAt:    "import_jobs.created_at",
}

// Generated where

var ImportJobWhere = struct {
	ID           whereHelperint64
	SupplierID   whereHelperint64
	Filename     whereHelperstring
	ErrorMessage whereHelpernull_String
	StartedAt    whereHelpernull_Time
	EndedAt      whereHelpernull_Time
	UpdatedAt    whereHelpertime_Time
	CreatedAt    whereHelpertime_Time
}{
	ID:           whereHelperint64{field: "\"import_jobs\".\"id\""},
	SupplierID:   whereHelperint64{field: "\"import_jobs\".\"supplier_id\""},
	Filename:     whereHelperstring{field: "\"import_jobs\".\"filename\""},
	ErrorMessage: whereHelpernull_String{field: "\"import_jobs\".\"error_message\""},
	StartedAt:    whereHelpernull_Time{field: "\"import_jobs\".\"started_at\""},
	EndedAt:      whereHelpernull_Time{field: "\"import_jobs\".\"ended_at\""},
	UpdatedAt:    whereHelpertime_Time{field: "\"import_jobs\".\"updated_at\""},
	CreatedAt:    whereHelpertime_Time{field: "\"import_jobs\".\"created_at\""},
}

// ImportJobRels is where relationship names are stored.
var ImportJobRels = struct {
	Supplier string
}{
	Supplier: "Supplier",
}

// importJobR is where relationships are stored.
type importJobR struct {
	Supplier *Supplier `boil:"Supplier" json:"Supplier" toml:"Supplier" yaml:"Supplier"`
}

// NewStruct creates a new relationship struct
func (*importJobR) NewStruct() *importJobR {
	return &importJobR{}
}

func (r *importJobR) GetSupplier() *Supplier {
	if r == nil {
		return nil
	}
	return r.Supplier
}

// importJobL is where Load methods for each relationship are stored.
type importJobL struct{}

var (
	importJobAllColumns            = []string{"id", "supplier_id", "filename", "error_message", "started_at", "ended_at", "updated_at", "created_at"}
	importJobColumnsWithoutDefault = []string{"filename"}
	importJobColumnsWithDefault    = []string{"id", "supplier_id", "error_message", "started_at", "ended_at", "updated_at", "created_at"}
	importJobPrimaryKeyColumns     = []string{"id"}
	importJobGeneratedColumns      = []string{}
)

type (
	// ImportJobSlice is an alias for a slice of pointers to ImportJob.
	// This should almost always be used instead of []ImportJob.
	ImportJobSlice []*ImportJob
	// ImportJobHook is the signature for custom ImportJob hook methods
	ImportJobHook func(context.Context, boil.ContextExecutor, *ImportJob) error

	importJobQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	importJobType                 = reflect.TypeOf(&ImportJob{})
	importJobMapping              = queries.MakeStructMapping(importJobType)
	importJobPrimaryKeyMapping, _ = queries.BindMapping(importJobType, importJobMapping, importJobPrimaryKeyColumns)
	importJobInsertCacheMut       sync.RWMutex
	importJobInsertCache          = make(map[string]insertCache)
	importJobUpdateCacheMut       sync.RWMutex
	importJobUpdateCache          = make(map[string]updateCache)
	importJobUpsertCacheMut       sync.RWMutex
	importJobUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var importJobAfterSelectHooks []ImportJobHook

var importJobBeforeInsertHooks []ImportJobHook
var importJobAfterInsertHooks []ImportJobHook

var importJobBeforeUpdateHooks []ImportJobHook
var importJobAfterUpdateHooks []ImportJobHook

var importJobBeforeDeleteHooks []ImportJobHook
var importJobAfterDeleteHooks []ImportJobHook

var importJobBeforeUpsertHooks []ImportJobHook
var importJobAfterUpsertHooks []ImportJobHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ImportJob) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importJobAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ImportJob) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importJobBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ImportJob) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importJobAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ImportJob) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importJobBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ImportJob) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importJobAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ImportJob) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importJobBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ImportJob) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importJobAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ImportJob) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importJobBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ImportJob) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range importJobAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddImportJobHook registers your hook function for all future operations.
func AddImportJobHook(hookPoint boil.HookPoint, importJobHook ImportJobHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		importJobAfterSelectHooks = append(importJobAfterSelectHooks, importJobHook)
	case boil.BeforeInsertHook:
		importJobBeforeInsertHooks = append(importJobBeforeInsertHooks, importJobHook)
	case boil.AfterInsertHook:
		importJobAfterInsertHooks = append(importJobAfterInsertHooks, importJobHook)
	case boil.BeforeUpdateHook:
		importJobBeforeUpdateHooks = append(importJobBeforeUpdateHooks, importJobHook)
	case boil.AfterUpdateHook:
		importJobAfterUpdateHooks = append(importJobAfterUpdateHooks, importJobHook)
	case boil.BeforeDeleteHook:
		importJobBeforeDeleteHooks = append(importJobBeforeDeleteHooks, importJobHook)
	case boil.AfterDeleteHook:
		importJobAfterDeleteHooks = append(importJobAfterDeleteHooks, importJobHook)
	case boil.BeforeUpsertHook:
		importJobBeforeUpsertHooks = append(importJobBeforeUpsertHooks, importJobHook)
	case boil.AfterUpsertHook:
		importJobAfterUpsertHooks = append(importJobAfterUpsertHooks, importJobHook)
	}
}

// One returns a single importJob record from the query.
func (q importJobQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ImportJob, error) {
	o := &ImportJob{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for import_jobs")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ImportJob records from the query.
func (q importJobQuery) All(ctx context.Context, exec boil.ContextExecutor) (ImportJobSlice, error) {
	var o []*ImportJob

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ImportJob slice")
	}

	if len(importJobAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ImportJob records in the query.
func (q importJobQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count import_jobs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q importJobQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if import_jobs exists")
	}

	return count > 0, nil
}

// Supplier pointed to by the foreign key.
func (o *ImportJob) Supplier(mods ...qm.QueryMod) supplierQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SupplierID),
	}

	queryMods = append(queryMods, mods...)

	return Suppliers(queryMods...)
}

// LoadSupplier allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (importJobL) LoadSupplier(ctx context.Context, e boil.ContextExecutor, singular bool, maybeImportJob interface{}, mods queries.Applicator) error {
	var slice []*ImportJob
	var object *ImportJob

	if singular {
		var ok bool
		object, ok = maybeImportJob.(*ImportJob)
		if !ok {
			object = new(ImportJob)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeImportJob)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeImportJob))
			}
		}
	} else {
		s, ok := maybeImportJob.(*[]*ImportJob)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeImportJob)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeImportJob))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &importJobR{}
		}
		args = append(args, object.SupplierID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &importJobR{}
			}

			for _, a := range args {
				if a == obj.SupplierID {
					continue Outer
				}
			}

			args = append(args, obj.SupplierID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`suppliers`),
		qm.WhereIn(`suppliers.id in ?`, args...),
		qmhelper.WhereIsNull(`suppliers.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Supplier")
	}

	var resultSlice []*Supplier
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Supplier")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for suppliers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for suppliers")
	}

	if len(supplierAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Supplier = foreign
		if foreign.R == nil {
			foreign.R = &supplierR{}
		}
		foreign.R.ImportJobs = append(foreign.R.ImportJobs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SupplierID == foreign.ID {
				local.R.Supplier = foreign
				if foreign.R == nil {
					foreign.R = &supplierR{}
				}
				foreign.R.ImportJobs = append(foreign.R.ImportJobs, local)
				break
			}
		}
	}

	return nil
}

// SetSupplier of the importJob to the related item.
// Sets o.R.Supplier to related.
// Adds o to related.R.ImportJobs.
func (o *ImportJob) SetSupplier(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Supplier) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"import_jobs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"supplier_id"}),
		strmangle.WhereClause("\"", "\"", 2, importJobPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SupplierID = related.ID
	if o.R == nil {
		o.R = &importJobR{
			Supplier: related,
		}
	} else {
		o.R.Supplier = related
	}

	if related.R == nil {
		related.R = &supplierR{
			ImportJobs: ImportJobSlice{o},
		}
	} else {
		related.R.ImportJobs = append(related.R.ImportJobs, o)
	}

	return nil
}

// ImportJobs retrieves all the records using an executor.
func ImportJobs(mods ...qm.QueryMod) importJobQuery {
	mods = append(mods, qm.From("\"import_jobs\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"import_jobs\".*"})
	}

	return importJobQuery{q}
}

// FindImportJob retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindImportJob(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ImportJob, error) {
	importJobObj := &ImportJob{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"import_jobs\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, importJobObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from import_jobs")
	}

	if err = importJobObj.doAfterSelectHooks(ctx, exec); err != nil {
		return importJobObj, err
	}

	return importJobObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ImportJob) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no import_jobs provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(importJobColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	importJobInsertCacheMut.RLock()
	cache, cached := importJobInsertCache[key]
	importJobInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			importJobAllColumns,
			importJobColumnsWithDefault,
			importJobColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(importJobType, importJobMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(importJobType, importJobMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"import_jobs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"import_jobs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into import_jobs")
	}

	if !cached {
		importJobInsertCacheMut.Lock()
		importJobInsertCache[key] = cache
		importJobInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ImportJob.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ImportJob) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	importJobUpdateCacheMut.RLock()
	cache, cached := importJobUpdateCache[key]
	importJobUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			importJobAllColumns,
			importJobPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update import_jobs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"import_jobs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, importJobPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(importJobType, importJobMapping, append(wl, importJobPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update import_jobs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for import_jobs")
	}

	if !cached {
		importJobUpdateCacheMut.Lock()
		importJobUpdateCache[key] = cache
		importJobUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q importJobQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for import_jobs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for import_jobs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ImportJobSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), importJobPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"import_jobs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, importJobPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in importJob slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all importJob")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ImportJob) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no import_jobs provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(importJobColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	importJobUpsertCacheMut.RLock()
	cache, cached := importJobUpsertCache[key]
	importJobUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			importJobAllColumns,
			importJobColumnsWithDefault,
			importJobColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			importJobAllColumns,
			importJobPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert import_jobs, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(importJobPrimaryKeyColumns))
			copy(conflict, importJobPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"import_jobs\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(importJobType, importJobMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(importJobType, importJobMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert import_jobs")
	}

	if !cached {
		importJobUpsertCacheMut.Lock()
		importJobUpsertCache[key] = cache
		importJobUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ImportJob record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ImportJob) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ImportJob provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), importJobPrimaryKeyMapping)
	sql := "DELETE FROM \"import_jobs\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from import_jobs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for import_jobs")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q importJobQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no importJobQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from import_jobs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for import_jobs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ImportJobSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(importJobBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), importJobPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"import_jobs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, importJobPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from importJob slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for import_jobs")
	}

	if len(importJobAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ImportJob) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindImportJob(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ImportJobSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ImportJobSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), importJobPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"import_jobs\".* FROM \"import_jobs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, importJobPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ImportJobSlice")
	}

	*o = slice

	return nil
}

// ImportJobExists checks if the ImportJob row exists.
func ImportJobExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"import_jobs\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if import_jobs exists")
	}

	return exists, nil
}

// Exists checks if the ImportJob row exists.
func (o *ImportJob) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ImportJobExists(ctx, exec, o.ID)
}
