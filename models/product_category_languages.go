// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProductCategoryLanguage is an object representing the database table.
type ProductCategoryLanguage struct {
	ID                int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	LanguageID        int64     `boil:"language_id" json:"language_id" toml:"language_id" yaml:"language_id"`
	ProductCategoryID int64     `boil:"product_category_id" json:"product_category_id" toml:"product_category_id" yaml:"product_category_id"`
	Name              string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	UpdatedAt         time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt         time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *productCategoryLanguageR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productCategoryLanguageL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductCategoryLanguageColumns = struct {
	ID                string
	LanguageID        string
	ProductCategoryID string
	Name              string
	UpdatedAt         string
	CreatedAt         string
}{
	ID:                "id",
	LanguageID:        "language_id",
	ProductCategoryID: "product_category_id",
	Name:              "name",
	UpdatedAt:         "updated_at",
	CreatedAt:         "created_at",
}

var ProductCategoryLanguageTableColumns = struct {
	ID                string
	LanguageID        string
	ProductCategoryID string
	Name              string
	UpdatedAt         string
	CreatedAt         string
}{
	ID:                "product_category_languages.id",
	LanguageID:        "product_category_languages.language_id",
	ProductCategoryID: "product_category_languages.product_category_id",
	Name:              "product_category_languages.name",
	UpdatedAt:         "product_category_languages.updated_at",
	CreatedAt:         "product_category_languages.created_at",
}

// Generated where

var ProductCategoryLanguageWhere = struct {
	ID                whereHelperint64
	LanguageID        whereHelperint64
	ProductCategoryID whereHelperint64
	Name              whereHelperstring
	UpdatedAt         whereHelpertime_Time
	CreatedAt         whereHelpertime_Time
}{
	ID:                whereHelperint64{field: "\"product_category_languages\".\"id\""},
	LanguageID:        whereHelperint64{field: "\"product_category_languages\".\"language_id\""},
	ProductCategoryID: whereHelperint64{field: "\"product_category_languages\".\"product_category_id\""},
	Name:              whereHelperstring{field: "\"product_category_languages\".\"name\""},
	UpdatedAt:         whereHelpertime_Time{field: "\"product_category_languages\".\"updated_at\""},
	CreatedAt:         whereHelpertime_Time{field: "\"product_category_languages\".\"created_at\""},
}

// ProductCategoryLanguageRels is where relationship names are stored.
var ProductCategoryLanguageRels = struct {
	Language        string
	ProductCategory string
}{
	Language:        "L",
	ProductCategory: "ProductCategory",
}

// productCategoryLanguageR is where relationships are stored.
type productCategoryLanguageR struct {
	Language        *Language        `boil:"L" json:"L" toml:"L" yaml:"L"`
	ProductCategory *ProductCategory `boil:"ProductCategory" json:"ProductCategory" toml:"ProductCategory" yaml:"ProductCategory"`
}

// NewStruct creates a new relationship struct
func (*productCategoryLanguageR) NewStruct() *productCategoryLanguageR {
	return &productCategoryLanguageR{}
}

func (r *productCategoryLanguageR) GetLanguage() *Language {
	if r == nil {
		return nil
	}
	return r.Language
}

func (r *productCategoryLanguageR) GetProductCategory() *ProductCategory {
	if r == nil {
		return nil
	}
	return r.ProductCategory
}

// productCategoryLanguageL is where Load methods for each relationship are stored.
type productCategoryLanguageL struct{}

var (
	productCategoryLanguageAllColumns            = []string{"id", "language_id", "product_category_id", "name", "updated_at", "created_at"}
	productCategoryLanguageColumnsWithoutDefault = []string{"name"}
	productCategoryLanguageColumnsWithDefault    = []string{"id", "language_id", "product_category_id", "updated_at", "created_at"}
	productCategoryLanguagePrimaryKeyColumns     = []string{"id"}
	productCategoryLanguageGeneratedColumns      = []string{}
)

type (
	// ProductCategoryLanguageSlice is an alias for a slice of pointers to ProductCategoryLanguage.
	// This should almost always be used instead of []ProductCategoryLanguage.
	ProductCategoryLanguageSlice []*ProductCategoryLanguage
	// ProductCategoryLanguageHook is the signature for custom ProductCategoryLanguage hook methods
	ProductCategoryLanguageHook func(context.Context, boil.ContextExecutor, *ProductCategoryLanguage) error

	productCategoryLanguageQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productCategoryLanguageType                 = reflect.TypeOf(&ProductCategoryLanguage{})
	productCategoryLanguageMapping              = queries.MakeStructMapping(productCategoryLanguageType)
	productCategoryLanguagePrimaryKeyMapping, _ = queries.BindMapping(productCategoryLanguageType, productCategoryLanguageMapping, productCategoryLanguagePrimaryKeyColumns)
	productCategoryLanguageInsertCacheMut       sync.RWMutex
	productCategoryLanguageInsertCache          = make(map[string]insertCache)
	productCategoryLanguageUpdateCacheMut       sync.RWMutex
	productCategoryLanguageUpdateCache          = make(map[string]updateCache)
	productCategoryLanguageUpsertCacheMut       sync.RWMutex
	productCategoryLanguageUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var productCategoryLanguageAfterSelectHooks []ProductCategoryLanguageHook

var productCategoryLanguageBeforeInsertHooks []ProductCategoryLanguageHook
var productCategoryLanguageAfterInsertHooks []ProductCategoryLanguageHook

var productCategoryLanguageBeforeUpdateHooks []ProductCategoryLanguageHook
var productCategoryLanguageAfterUpdateHooks []ProductCategoryLanguageHook

var productCategoryLanguageBeforeDeleteHooks []ProductCategoryLanguageHook
var productCategoryLanguageAfterDeleteHooks []ProductCategoryLanguageHook

var productCategoryLanguageBeforeUpsertHooks []ProductCategoryLanguageHook
var productCategoryLanguageAfterUpsertHooks []ProductCategoryLanguageHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProductCategoryLanguage) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productCategoryLanguageAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProductCategoryLanguage) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productCategoryLanguageBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProductCategoryLanguage) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productCategoryLanguageAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProductCategoryLanguage) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productCategoryLanguageBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProductCategoryLanguage) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productCategoryLanguageAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProductCategoryLanguage) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productCategoryLanguageBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProductCategoryLanguage) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productCategoryLanguageAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProductCategoryLanguage) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productCategoryLanguageBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProductCategoryLanguage) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productCategoryLanguageAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProductCategoryLanguageHook registers your hook function for all future operations.
func AddProductCategoryLanguageHook(hookPoint boil.HookPoint, productCategoryLanguageHook ProductCategoryLanguageHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		productCategoryLanguageAfterSelectHooks = append(productCategoryLanguageAfterSelectHooks, productCategoryLanguageHook)
	case boil.BeforeInsertHook:
		productCategoryLanguageBeforeInsertHooks = append(productCategoryLanguageBeforeInsertHooks, productCategoryLanguageHook)
	case boil.AfterInsertHook:
		productCategoryLanguageAfterInsertHooks = append(productCategoryLanguageAfterInsertHooks, productCategoryLanguageHook)
	case boil.BeforeUpdateHook:
		productCategoryLanguageBeforeUpdateHooks = append(productCategoryLanguageBeforeUpdateHooks, productCategoryLanguageHook)
	case boil.AfterUpdateHook:
		productCategoryLanguageAfterUpdateHooks = append(productCategoryLanguageAfterUpdateHooks, productCategoryLanguageHook)
	case boil.BeforeDeleteHook:
		productCategoryLanguageBeforeDeleteHooks = append(productCategoryLanguageBeforeDeleteHooks, productCategoryLanguageHook)
	case boil.AfterDeleteHook:
		productCategoryLanguageAfterDeleteHooks = append(productCategoryLanguageAfterDeleteHooks, productCategoryLanguageHook)
	case boil.BeforeUpsertHook:
		productCategoryLanguageBeforeUpsertHooks = append(productCategoryLanguageBeforeUpsertHooks, productCategoryLanguageHook)
	case boil.AfterUpsertHook:
		productCategoryLanguageAfterUpsertHooks = append(productCategoryLanguageAfterUpsertHooks, productCategoryLanguageHook)
	}
}

// One returns a single productCategoryLanguage record from the query.
func (q productCategoryLanguageQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProductCategoryLanguage, error) {
	o := &ProductCategoryLanguage{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for product_category_languages")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ProductCategoryLanguage records from the query.
func (q productCategoryLanguageQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProductCategoryLanguageSlice, error) {
	var o []*ProductCategoryLanguage

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ProductCategoryLanguage slice")
	}

	if len(productCategoryLanguageAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ProductCategoryLanguage records in the query.
func (q productCategoryLanguageQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count product_category_languages rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q productCategoryLanguageQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if product_category_languages exists")
	}

	return count > 0, nil
}

// Language pointed to by the foreign key.
func (o *ProductCategoryLanguage) Language(mods ...qm.QueryMod) languageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.LanguageID),
	}

	queryMods = append(queryMods, mods...)

	return Languages(queryMods...)
}

// ProductCategory pointed to by the foreign key.
func (o *ProductCategoryLanguage) ProductCategory(mods ...qm.QueryMod) productCategoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProductCategoryID),
	}

	queryMods = append(queryMods, mods...)

	return ProductCategories(queryMods...)
}

// LoadLanguage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productCategoryLanguageL) LoadLanguage(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductCategoryLanguage interface{}, mods queries.Applicator) error {
	var slice []*ProductCategoryLanguage
	var object *ProductCategoryLanguage

	if singular {
		var ok bool
		object, ok = maybeProductCategoryLanguage.(*ProductCategoryLanguage)
		if !ok {
			object = new(ProductCategoryLanguage)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductCategoryLanguage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductCategoryLanguage))
			}
		}
	} else {
		s, ok := maybeProductCategoryLanguage.(*[]*ProductCategoryLanguage)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductCategoryLanguage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductCategoryLanguage))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productCategoryLanguageR{}
		}
		args = append(args, object.LanguageID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productCategoryLanguageR{}
			}

			for _, a := range args {
				if a == obj.LanguageID {
					continue Outer
				}
			}

			args = append(args, obj.LanguageID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`languages`),
		qm.WhereIn(`languages.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load L")
	}

	var resultSlice []*Language
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice L")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for languages")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for languages")
	}

	if len(languageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Language = foreign
		if foreign.R == nil {
			foreign.R = &languageR{}
		}
		foreign.R.ProductCategoryLanguages = append(foreign.R.ProductCategoryLanguages, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LanguageID == foreign.ID {
				local.R.Language = foreign
				if foreign.R == nil {
					foreign.R = &languageR{}
				}
				foreign.R.ProductCategoryLanguages = append(foreign.R.ProductCategoryLanguages, local)
				break
			}
		}
	}

	return nil
}

// LoadProductCategory allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productCategoryLanguageL) LoadProductCategory(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductCategoryLanguage interface{}, mods queries.Applicator) error {
	var slice []*ProductCategoryLanguage
	var object *ProductCategoryLanguage

	if singular {
		var ok bool
		object, ok = maybeProductCategoryLanguage.(*ProductCategoryLanguage)
		if !ok {
			object = new(ProductCategoryLanguage)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductCategoryLanguage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductCategoryLanguage))
			}
		}
	} else {
		s, ok := maybeProductCategoryLanguage.(*[]*ProductCategoryLanguage)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductCategoryLanguage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductCategoryLanguage))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productCategoryLanguageR{}
		}
		args = append(args, object.ProductCategoryID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productCategoryLanguageR{}
			}

			for _, a := range args {
				if a == obj.ProductCategoryID {
					continue Outer
				}
			}

			args = append(args, obj.ProductCategoryID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_categories`),
		qm.WhereIn(`product_categories.id in ?`, args...),
		qmhelper.WhereIsNull(`product_categories.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ProductCategory")
	}

	var resultSlice []*ProductCategory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ProductCategory")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for product_categories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_categories")
	}

	if len(productCategoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductCategory = foreign
		if foreign.R == nil {
			foreign.R = &productCategoryR{}
		}
		foreign.R.ProductCategoryLanguages = append(foreign.R.ProductCategoryLanguages, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductCategoryID == foreign.ID {
				local.R.ProductCategory = foreign
				if foreign.R == nil {
					foreign.R = &productCategoryR{}
				}
				foreign.R.ProductCategoryLanguages = append(foreign.R.ProductCategoryLanguages, local)
				break
			}
		}
	}

	return nil
}

// SetLanguage of the productCategoryLanguage to the related item.
// Sets o.R.L to related.
// Adds o to related.R.ProductCategoryLanguages.
func (o *ProductCategoryLanguage) SetLanguage(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Language) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"product_category_languages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"language_id"}),
		strmangle.WhereClause("\"", "\"", 2, productCategoryLanguagePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LanguageID = related.ID
	if o.R == nil {
		o.R = &productCategoryLanguageR{
			Language: related,
		}
	} else {
		o.R.Language = related
	}

	if related.R == nil {
		related.R = &languageR{
			ProductCategoryLanguages: ProductCategoryLanguageSlice{o},
		}
	} else {
		related.R.ProductCategoryLanguages = append(related.R.ProductCategoryLanguages, o)
	}

	return nil
}

// SetProductCategory of the productCategoryLanguage to the related item.
// Sets o.R.ProductCategory to related.
// Adds o to related.R.ProductCategoryLanguages.
func (o *ProductCategoryLanguage) SetProductCategory(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ProductCategory) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"product_category_languages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"product_category_id"}),
		strmangle.WhereClause("\"", "\"", 2, productCategoryLanguagePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductCategoryID = related.ID
	if o.R == nil {
		o.R = &productCategoryLanguageR{
			ProductCategory: related,
		}
	} else {
		o.R.ProductCategory = related
	}

	if related.R == nil {
		related.R = &productCategoryR{
			ProductCategoryLanguages: ProductCategoryLanguageSlice{o},
		}
	} else {
		related.R.ProductCategoryLanguages = append(related.R.ProductCategoryLanguages, o)
	}

	return nil
}

// ProductCategoryLanguages retrieves all the records using an executor.
func ProductCategoryLanguages(mods ...qm.QueryMod) productCategoryLanguageQuery {
	mods = append(mods, qm.From("\"product_category_languages\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"product_category_languages\".*"})
	}

	return productCategoryLanguageQuery{q}
}

// FindProductCategoryLanguage retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProductCategoryLanguage(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ProductCategoryLanguage, error) {
	productCategoryLanguageObj := &ProductCategoryLanguage{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"product_category_languages\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, productCategoryLanguageObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from product_category_languages")
	}

	if err = productCategoryLanguageObj.doAfterSelectHooks(ctx, exec); err != nil {
		return productCategoryLanguageObj, err
	}

	return productCategoryLanguageObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProductCategoryLanguage) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no product_category_languages provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productCategoryLanguageColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productCategoryLanguageInsertCacheMut.RLock()
	cache, cached := productCategoryLanguageInsertCache[key]
	productCategoryLanguageInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productCategoryLanguageAllColumns,
			productCategoryLanguageColumnsWithDefault,
			productCategoryLanguageColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(productCategoryLanguageType, productCategoryLanguageMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productCategoryLanguageType, productCategoryLanguageMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"product_category_languages\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"product_category_languages\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into product_category_languages")
	}

	if !cached {
		productCategoryLanguageInsertCacheMut.Lock()
		productCategoryLanguageInsertCache[key] = cache
		productCategoryLanguageInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ProductCategoryLanguage.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProductCategoryLanguage) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	productCategoryLanguageUpdateCacheMut.RLock()
	cache, cached := productCategoryLanguageUpdateCache[key]
	productCategoryLanguageUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productCategoryLanguageAllColumns,
			productCategoryLanguagePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update product_category_languages, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"product_category_languages\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, productCategoryLanguagePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productCategoryLanguageType, productCategoryLanguageMapping, append(wl, productCategoryLanguagePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update product_category_languages row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for product_category_languages")
	}

	if !cached {
		productCategoryLanguageUpdateCacheMut.Lock()
		productCategoryLanguageUpdateCache[key] = cache
		productCategoryLanguageUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q productCategoryLanguageQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for product_category_languages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for product_category_languages")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductCategoryLanguageSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productCategoryLanguagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"product_category_languages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, productCategoryLanguagePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in productCategoryLanguage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all productCategoryLanguage")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProductCategoryLanguage) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no product_category_languages provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productCategoryLanguageColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productCategoryLanguageUpsertCacheMut.RLock()
	cache, cached := productCategoryLanguageUpsertCache[key]
	productCategoryLanguageUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			productCategoryLanguageAllColumns,
			productCategoryLanguageColumnsWithDefault,
			productCategoryLanguageColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			productCategoryLanguageAllColumns,
			productCategoryLanguagePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert product_category_languages, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(productCategoryLanguagePrimaryKeyColumns))
			copy(conflict, productCategoryLanguagePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"product_category_languages\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(productCategoryLanguageType, productCategoryLanguageMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productCategoryLanguageType, productCategoryLanguageMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert product_category_languages")
	}

	if !cached {
		productCategoryLanguageUpsertCacheMut.Lock()
		productCategoryLanguageUpsertCache[key] = cache
		productCategoryLanguageUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ProductCategoryLanguage record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProductCategoryLanguage) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ProductCategoryLanguage provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productCategoryLanguagePrimaryKeyMapping)
	sql := "DELETE FROM \"product_category_languages\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from product_category_languages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for product_category_languages")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q productCategoryLanguageQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no productCategoryLanguageQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from product_category_languages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for product_category_languages")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductCategoryLanguageSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(productCategoryLanguageBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productCategoryLanguagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"product_category_languages\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productCategoryLanguagePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from productCategoryLanguage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for product_category_languages")
	}

	if len(productCategoryLanguageAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProductCategoryLanguage) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProductCategoryLanguage(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductCategoryLanguageSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductCategoryLanguageSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productCategoryLanguagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"product_category_languages\".* FROM \"product_category_languages\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productCategoryLanguagePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProductCategoryLanguageSlice")
	}

	*o = slice

	return nil
}

// ProductCategoryLanguageExists checks if the ProductCategoryLanguage row exists.
func ProductCategoryLanguageExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"product_category_languages\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if product_category_languages exists")
	}

	return exists, nil
}

// Exists checks if the ProductCategoryLanguage row exists.
func (o *ProductCategoryLanguage) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ProductCategoryLanguageExists(ctx, exec, o.ID)
}
